{"version":3,"sources":["webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/data/Label.tsx","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/data/Number.tsx","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/util/internal/locale/NumberFormatter.ts","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/util/time/RelativeTimeFormatter.ts","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/util/react/ClickThreshold.tsx","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/data/box/TimeElapsedBox.tsx","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/icon/RadioOnIcon.tsx","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/icon/RadioOffIcon.tsx","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/control/Radio.tsx","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/datetime-difference/index.js","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/util/internal/locale/numberFormat.ts","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/util/internal/locale/BigNumberFormatter.ts","webpack:///./components/content/box/block/UnclesCountBox.tsx","webpack:///./helpers/getRelativeTimeTranslations.ts","webpack:///./components/content/box/TimeElapsedBox.tsx","webpack:///./page/block/txHighlight/HighlightSelectBox.tsx","webpack:///./page/dashboard/DashboardContentCenter.tsx","webpack:///./page/dashboard/barChart/BarChartItemBar.tsx","webpack:///./page/dashboard/barChart/BarChartItem.tsx","webpack:///./page/dashboard/barChart/BarChart.tsx","webpack:///./page/dashboard/BlockListDashboard.tsx","webpack:///./page/dashboard/nodeDropdown/NodeSelector.tsx","webpack:///./page/dashboard/DashboardContent.tsx","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/icon/CloseSmallIcon.tsx","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/control/ModalSelectBox.tsx","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/control/SelectBox.tsx","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/layout/content/LayoutBoxItem.tsx","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/layout/content/LayoutRowItem.tsx"],"names":["__webpack_require__","d","__webpack_exports__","Label","_styled_components__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_1___default","n","$Label","children","className","Object","props","arrow","disabled","theme","colors","arrowLabelBgDisabled","arrowLabelBg","arrowLabel","label","Number","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","_util_internal_locale_NumberFormatter__WEBPACK_IMPORTED_MODULE_1__","_util_internal_locale_BigNumberFormatter__WEBPACK_IMPORTED_MODULE_2__","[object Object]","value","locale","this","format","NumberFormatter","toLocaleString","defaultTranslations","future","past","s","ss","m","mm","h","hh","dd","M","MM","y","yy","unitCodes","years","months","days","hours","minutes","seconds","RelativeTimeFormatter_RelativeTimeFormatter","translations","d1","d2","formatted","formatRelativeTime","intv","present","Date","getTime","before","diff","datetime_difference","units","firstSignificantIdx","findIndex","unit","humanizeDiffUnit","firstUnit","length","secondUnit","unitCode","replace","DEFAULT_THRESHOLD","ClickThreshold_ClickThreshold","react","onMouseDown","e","mouseDownCoords","x","clientX","clientY","onMouseUp","Math","abs","threshold","onClick","defaultProps","TimeElapsedContentRoot","styled_components","div","CopyValueButtonWrapper","DisplayMode","TimeElapsedBox_TimeElapsedBox","TimeElapsedBox","displayMode","RelativeTime","cycleDisplayMode","AbsoluteTime","Error","updateCurrentTime","currentTime","floor","now","timeoutId","setTimeout","computeRefreshInterval","prevProps","timestamp","clearTimeout","formatDiff","toLocaleDateString","timeZone","timeZoneName","year","month","day","hour","minute","second","box","ValueBox","variant","TooltipRegular","content","style","display","alignItems","CopyValueButton","clipboard","nonclickable","tslib_es6","mobx_module","index_module","RadioOnIcon_RadioOnIcon","SvgIcon","assign","stroke","strokeWidth","fill","fillRule","points","RadioOffIcon_RadioOffIcon","RadioWrapper","RadioLabel","checkboxLabel","RadioIconWrapper","checkboxIcon","Radio_Radio","Radio","onChange","event","name","type","id","checked","htmlFor","module","exports","datetimeDiff","from","to","min","Infinity","max","temp","start","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","end","i","dec","r","UTC","milliseconds","getNumberSeparator","separatorType","numberFormat","Intl","NumberFormat","formatToParts","find","part","BigNumberFormatter_BigNumberFormatter","fmt","formats","get","decimalSeparator","groupSeparator","groupSize","set","num","options","getBnFormat","decimalPlaces","maximumFractionDigits","minimumFractionDigits","fractionDigits","toFormat","Map","UnclesCountBox","ethstats_ui_lib_layout_content_box_ValueBox__WEBPACK_IMPORTED_MODULE_1__","ethstats_ui_lib_data_Number__WEBPACK_IMPORTED_MODULE_2__","background","unclesBoxBg","text","unclesBoxText","border","unclesBoxBorder","getRelativeTimeTranslations","translation","react_default","a","Component","createElement","box_TimeElapsedBox","HighlightSelectBox","app_styled_components__WEBPACK_IMPORTED_MODULE_0__","withConfig","displayName","componentId","selectBoxBorder","selectBoxBg","selectBoxTextDisabled","selectBoxText","selectBoxBubble","selectBoxArrow","DashboardContentCenter","BarChartItemBarRoot","active","blockColorCode","blockListItem","BarChartItemRoot","BarChartItemBar","BarChartItemHitBox","maxHeight","BarChartItemBarWrapper","round","percent","BarChartItem_BarChartItem","Tooltip","placement","nonInteractive","showDelay","hideDelay","offset","referenceElement","barEl","tooltip","Link","link","innerRef","ref","BarChartRoot","height","BarChart_BarChart","data","reduce","acc","dataItem","maxValue","getMaxValue","map","key","linkThunk","tooltipThunk","activeThunk","MAX_BLOCKS_SHOWN_COUNT","BlockListDashboard_BlockListDashboard","BlockListDashboard","blockValues","handleResize","wrapperElement","wrapperElementWidth","clientWidth","computedStyle","getComputedStyle","lateralSpacing","parseInt","getPropertyValue","maxNumberOfElements","blocksShownCount","handleRangeChange","blockRangeStart","blockStateStore","getLatest","idx","blockNumber","transactionCount","padding","BlockNumberBox","noLink","TxCountBox","urlBuilder","getBlock","UrlBuilder","window","addEventListener","setupLatestValueWatch","removeEventListener","destroyLatestValueWatch","latestValueWatch","dataFetchTask","cancel","Task","cancelToken","fetchData","catch","cancellation","logger","error","blockRangeEnd","blockValueStore","fetch","isCancelled","shallow","NodeSelector_NodeSelector","NodeSelector","onCheckboxChange","_e","_name","fields","setSelectedField","userPreferences","newSelectedNode","getSelectedField","nodeStore","selectedNode","url","requestClose","SelectBox","left","top","render","getFields","f","Title","h1","SubTitle","h2","DashboardLabel","GithubLink","DashboardContent_DashboardContent","DashboardContent","tr","appConfig","getLocale","href","target","SearchInlineWrapper","SearchInline","search","searchInlineStore","justifyContent","flexWrap","LayoutRowItem","nodeDropdownItems","lastBlock","creationTime","transactions","uncles","CloseSmallIcon_CloseSmallIcon","CloseButton","closeBtn","ModalSelectBoxWrapper","overlayBg","ModalSelectBox_ModalSelectBox","onClose","Overlay","SelectBox_SelectBox","isOpened","openSelectBox","closeSelectBox","esm","cursor","react_dom","modifiers","flip","enabled","preventOverflow","hide","data-placement","document","body","$LayoutBoxItem","LayoutBoxItem","autoHeight","baseHeight","isBeginningOfRow","autoWidth","mediaQueries","breakPoints","smallerThanFullView","lessThan620px","LayoutRowItem_LayoutRowItem","$LayoutRowItemWrapper","LayoutRowItemWrapper","fullRow","$LayoutInfoBoxItem","LayoutInfoBoxItem","childrenArray","toArray","outArr","child","react_is","push","c","console","labelElement","shift","ignoreFirstLabel","childrenArrayRender","_brand"],"mappings":"uGAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAJ,EAAA,YAAAK,EAAAL,EAAA,YAAAM,EAAAN,EAAAO,EAAAF,GASA,MAAMG,EAAgD,EAAGC,WAAUC,eAC/DL,EAAA,wBAAKK,UAAWA,GAAYD,GAGzB,MAAMN,EAAQQ,OAAAP,EAAA,KAAAO,CAAOH;;;;;wBAKJI,GAChBA,EAAMC,MAEFD,EAAME,SACNF,EAAMG,MAAMC,OAAOC,qBACnBL,EAAMG,MAAMC,OAAOE,aAEvB;;;;oBAKYN,GAASA,EAAMC,MAAQ,OAAS;aACvCD,GACLA,EAAMC,MACND,EAAMG,MAAMC,OAAOG,WACnBP,EAAMG,MAAMC,OAAOI;;;;;;;;;;MAWrBR,GAASA,EAAMC,MAAQT,EAAA;;;;;;;;;kCASKQ,EAAME,SAC5BF,EAAMG,MAAMC,OAAOC,qBACnBL,EAAMG,MAAMC,OAAOE;;;;MAKvB;qCC7DRlB,EAAAC,EAAAC,EAAA,sBAAAmB,IAAA,IAAAC,EAAAtB,EAAA,YAAAuB,EAAAvB,EAAAO,EAAAe,GAAA,IAAAE,EAAAxB,EAAA,YAAAyB,EAAAzB,EAAA,cAUaqB,UAAeC,EAAA,aACxBI,SACI,IAAIC,MAAEA,EAAKC,OAAEA,GAAWC,KAAKjB,MAC7B,MAAwB,iBAAVe,GACV,IAAIF,EAAA,MAAqBK,OAAOH,EAAOC,IACvC,IAAIJ,EAAA,MAAkBM,OAAOH,EAAOC,wCCdhD5B,EAAAC,EAAAC,EAAA,sBAAA6B,UAAaA,EACTL,OAAOC,EAAeC,GAClB,OAAOD,EAAMK,eAAeJ,wICIpC,MAAMK,GACFC,OAAQ,QACRC,KAAM,SACNC,EAAG,WACHC,GAAI,aACJC,EAAG,WACHC,GAAI,aACJC,EAAG,SACHC,GAAI,WACJxC,EAAG,QACHyC,GAAI,UACJC,EAAG,UACHC,GAAI,YACJC,EAAG,SACHC,GAAI,YAIR,IAAIC,GACAC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,MAAO,IACPC,QAAS,IACTC,QAAS,WAGAC,EACT5B,YAAoB6B,EAA0CtB,GAA1CJ,KAAA0B,eAWpB7B,WAAW8B,EAAYC,GACnB,IAAIC,EAAY7B,KAAKC,OAAO0B,EAAIC,GAChC,OAAO5B,KAAK8B,mBAAmBD,EAAWF,EAAKC,GAUnD/B,eAAekC,GACX,IAAIC,GAAU,IAAIC,MAAOC,UACzB,IAAIC,EAASH,EAAUD,EAEvB,OAAO/B,KAAKC,OAAO+B,EAASG,GAGxBtC,OAAO8B,EAAYC,GACvB,IAAIQ,EAAOC,EAAmB,IAAIJ,KAAKN,GAAK,IAAIM,KAAKL,IACrD,IAAIU,GAAqB,QAAS,SAAU,OAAQ,QAAS,UAAW,WACxE,IAAIC,EAAsBD,EAAME,UAAUC,GAAuB,IAAfL,EAAKK,IACvD,IAA6B,IAAzBF,EAEA,OAAOvC,KAAK0C,iBAAiB,EAAG,WAC7B,CACH,IAAIb,EAAY,GAChB,IAAIc,EAAYL,EAAMC,GACtBV,GAAa7B,KAAK0C,iBAAiBN,EAAKO,GAAYA,GAGpD,GAAIJ,EAAsB,EAAID,EAAMM,OAAQ,CACxC,IAAIC,EAAaP,EAAMC,EAAsB,GACpB,IAArBH,EAAKS,KACLhB,GAAa,IAAM7B,KAAK0C,iBAAiBN,EAAKS,GAAaA,IAInE,OAAOhB,GAUPhC,iBAAiBC,EAAe2C,GACpC,IAAIK,EAAqB,IAAVhD,EACXoB,EAAUuB,GACVvB,EAAUuB,GAAQvB,EAAUuB,GAEhC,OAAOzC,KAAK0B,aAAaoB,GAAUC,QAAQ,MAAO,GAAKjD,GAOnDD,mBAAmBC,EAAeO,GACtC,OAAOL,KAAK0B,aAAarB,EAAS,SAAW,QAAQ0C,QAAQ,MAAOjD,oBC1G5E,MAAMkD,EAAoB,QAabC,UAAuBC,EAAA,aAApCrD,kCAmBYG,KAAAmD,YAAc,CAACC,IACnBpD,KAAKqD,iBACDC,EAAGF,EAAEG,QACLvC,EAAGoC,EAAEI,WAILxD,KAAAyD,UAAY,CAACL,IACbM,KAAKC,IAAIP,EAAEG,QAAUvD,KAAKqD,gBAAgBC,IAAMtD,KAAK4D,WACrDF,KAAKC,IAAIP,EAAEI,QAAUxD,KAAKqD,gBAAgBrC,IAAMhB,KAAK4D,WAErD5D,KAAKjB,MAAM8E,YAvBnBD,gBACI,OAAO5D,KAAKjB,MAAM6E,UAGtB/D,SACI,OACIqD,EAAA,wBAAKC,YAAanD,KAAKmD,YAAaM,UAAWzD,KAAKyD,WAC/CzD,KAAKjB,MAAMH,WAbjBqE,EAAAa,cACHF,UAfkB,mECS1B,MAAMG,EAAyBC,EAAA,KAAOC;;;EAKtC,MAAMC,EAAyBF,EAAA,KAAOC;;EAItC,IAAKE,GAAL,SAAKA,GACDA,IAAA,kCACAA,IAAA,kCAFJ,CAAKA,WAwBL,IAAaC,QAAAC,UAAuBnB,EAAA,aADpCrD,kCAKYG,KAAAsE,YAAcH,EAAYI,aA8D1BvE,KAAAwE,iBAAmB,MACvB,GAAIxE,KAAKsE,cAAgBH,EAAYI,aACjCvE,KAAKsE,YAAcH,EAAYM,iBAC5B,IAAIzE,KAAKsE,cAAgBH,EAAYM,aAGxC,MAAM,IAAIC,+BAA+B1E,KAAKsE,eAF9CtE,KAAKsE,YAAcH,EAAYI,gBAM/BvE,KAAA2E,kBAAoB,MACxB3E,KAAK4E,YAAclB,KAAKmB,MAAM5C,KAAK6C,MAAQ,KAC3C9E,KAAK+E,UAAYC,WAAWhF,KAAK2E,kBAAmB3E,KAAKiF,4BAvE7DpF,oBACIG,KAAK2E,oBAGT9E,mBAAmBqF,GACf,GAAIlF,KAAKjB,MAAMoG,YAAcD,EAAUC,UAAW,CAC1CnF,KAAK+E,WACLK,aAAapF,KAAK+E,WAEtB/E,KAAK2E,qBAIb9E,uBACQG,KAAK+E,WACLK,aAAapF,KAAK+E,WAI1BlF,SACI,IAAIC,EACJ,GAAIE,KAAKsE,cAAgBH,EAAYI,aACjCzE,EAAQ,IAAI2B,EAAsBzB,KAAKjB,MAAM2C,cAAc2D,WACpC,IAAnBrF,KAAK4E,YAA2C,IAAvB5E,KAAKjB,MAAMoG,eAErC,IAAInF,KAAKsE,cAAgBH,EAAYM,aAOxC,MAAM,IAAIC,mCAAmCP,EAAYnE,KAAKsE,iBAN9DxE,EAAQ,IAAImC,KAA4B,IAAvBjC,KAAKjB,MAAMoG,WAAkBG,mBAAmBtF,KAAKjB,MAAMgB,QACxEwF,SAAU,MACVC,aAAc,QACdC,KAAM,UAAWC,MAAO,OAAQC,IAAK,UAAWC,KAAM,UAAWC,OAAQ,UAAWC,OAAQ,YAKpG,IAAIC,EACA7C,EAAA,iBAAC8C,EAAA,MAASC,QAASjG,KAAKjB,MAAMkH,SAC1B/C,EAAA,iBAACa,EAAsB,KAClBjE,IAIb,OACIoD,EAAA,iBAACgD,EAAA,MAAeC,QACZjD,EAAA,wBAAKkD,OAASC,QAAS,OAAQC,WAAY,WACvCpD,EAAA,4BAAMlD,KAAKjB,MAAMoG,WACjBjC,EAAA,iBAACgB,EAAsB,KACnBhB,EAAA,iBAACqD,EAAA,MAAgBzG,MAAO,GAAKE,KAAKjB,MAAMoG,UAAWqB,UAAWxG,KAAKjB,MAAMyH,eAI/ExG,KAAKjB,MAAM0H,aAAeV,EAC5B7C,EAAA,iBAACD,GAAeY,QAAS7D,KAAKwE,kBACxBuB,IAsBVlG,yBAEJ,OAAOG,KAAK4E,YAAc5E,KAAKjB,MAAMoG,UAAY,GAAK,IAAQ,MAjFlEuB,EAAA,eADCC,EAAA,wCAGDD,EAAA,eADCC,EAAA,wCAHQvC,EAAcsC,EAAA,eAD1BE,EAAA,MACYxC,8HCrCAyC,UAAoB3D,EAAA,aAC7BrD,SACI,OACIqD,EAAA,iBAAC4D,EAAA,KAAOhI,OAAAiI,UAAK/G,KAAKjB,OACdmE,EAAA,sBAAG8D,OAAO,OAAOC,YAAY,IAAIC,KAAK,OAAOC,SAAS,WAClDjE,EAAA,4BAASkE,OAAO,wBAChBlE,EAAA,yBAAM9E,EAEF,mZACF8I,KAAK,0BCTdG,UAAqBnE,EAAA,aAC9BrD,SACI,OACIqD,EAAA,iBAAC4D,EAAA,KAAOhI,OAAAiI,UAAK/G,KAAKjB,OACdmE,EAAA,sBAAG8D,OAAO,OAAOC,YAAY,IAAIC,KAAK,OAAOC,SAAS,WAClDjE,EAAA,4BAASkE,OAAO,wBAChBlE,EAAA,yBAAM9E,EAEF,gRACF8I,KAAK,oDCV3B,MAAMI,EAAetD,EAAA,KAAOC;;;EAI5B,MAAMsD,EAAavD,EAAA,KAAOzE;;;;;;aAMb,EAAEL,WAAWA,EAAMC,OAAOqI;EAEvC,MAAMC,EAAmBzD,EAAA,KAAOC;;;;aAInB,EAAE/E,WAAWA,EAAMC,OAAOuI;EAiBvC,IAAaC,QAAAC,UAAc1E,EAAA,aAD3BrD,kCAwBYG,KAAA6H,SAAW,CAACC,IACZ9H,KAAKjB,MAAM8I,UACX7H,KAAKjB,MAAM8I,SAASC,GAAO,EAAM9H,KAAKjB,MAAMgJ,KAAM/H,KAAKjB,MAAMe,SAxBrED,SACI,OACIqD,EAAA,iBAACoE,EAAY,KACTpE,EAAA,0BACI8E,KAAK,QACLC,GAAIjI,KAAKjB,MAAMkJ,GACfF,KAAM,SAAW/H,KAAKjB,MAAMgJ,KAC5BjI,MAAOE,KAAKjB,MAAMe,MAClBoI,QAASlI,KAAKjB,MAAMmJ,UAAW,EAC/BL,SAAU7H,KAAK6H,SACfzB,OAAQC,QAAS,UAErBnD,EAAA,iBAACqE,GAAWY,QAASnI,KAAKjB,MAAMkJ,IAC5B/E,EAAA,iBAACuE,EAAgB,KACXzH,KAAKjB,MAAMmJ,QAAUhF,EAAA,iBAAC2D,EAAW,MAAM3D,EAAA,iBAACmE,EAAY,OAEzDrH,KAAKjB,MAAMH,aAjBnB+I,EAAKjB,EAAA,eADjBE,EAAA,MACYe,sCCrCbS,EAAAC,QAAA,SAAAC,EAAAC,EAAAC,GAEA,MAAAC,IAAAC,IAAA,aACA,MAAAC,GAAAD,IAAA,sBAEA,GAAAF,EAAAD,EAAA,CACA,MAAAK,EAAAJ,EACAA,EAAAD,EACAA,EAAAK,EAGA,IAAAC,GAAAN,EAAAO,iBAAAP,EAAAQ,cAAA,EAAAR,EAAAS,aAAAT,EAAAU,cACAV,EAAAW,gBAAAX,EAAAY,gBAAAZ,EAAAa,sBACAC,GAAAb,EAAAM,iBAAAN,EAAAO,cAAA,EAAAP,EAAAQ,aAAAR,EAAAS,cAAAT,EAAAU,gBACAV,EAAAW,gBAAAX,EAAAY,sBACAE,EAAA,EAEA,MAAAC,EAAAD,MACAD,EAAAC,GACA,KAAAD,EAAAC,GAAAb,EAAAa,IAAA,CACA,MAAAE,EAAAD,EAAAD,EAAA,GACAD,EAAAC,IAAA,OAAAX,EAAAW,GACAE,EACAb,EAAAW,GAEA,WAAAA,EAAA,IAAArH,UAAAwH,IAAAJ,EAAA,GAAAA,EAAA,OAAAL,aAAAL,EAAAW,EAAA,IAGA,KAAAA,EAAA,IAEA,IAAAlH,EAAAiH,IADAC,GACAT,EAAAS,GACA,KAAAlH,EAAA,IACAiH,EAAAC,IAAAC,EAAAD,EAAA,GACAlH,EAAAiH,EAAAC,GAAAT,EAAAS,GAEAD,EAAAC,GAAAlH,EAGA,OACAjB,MAAAkI,EAAA,GACAjI,OAAAiI,EAAA,GACAhI,KAAAgI,EAAA,GACA/H,MAAA+H,EAAA,GACA9H,QAAA8H,EAAA,GACA7H,QAAA6H,EAAA,GACAK,aAAAL,EAAA,wCCxCO,SAASM,EAAmB5J,EAAgB6J,GAC/C,IAAIC,EAAoBC,KAAKC,aAAahK,GAE1C,GAAI8J,EAAaG,cACb,OAAOH,EACFG,cAAc,QACdC,KAAMC,GAAcA,EAAKlC,OAAS4B,GAClC9J,MAGT,MAAsB,UAAlB8J,EACO,IAAOzJ,iBAAiB4C,QAAQ,SAAU,IAE1C,IAAI5C,iBAAiB4C,QAAQ,SAAU,ICnBtD5E,EAAAC,EAAAC,EAAA,sBAAA8L,UAaaA,EAKDtK,mBAAmBE,GACvB,IAAIqK,EAAMpK,KAAKqK,QAAQC,IAAIvK,GAC3B,IAAKqK,EAAK,CACNA,GACIG,iBAAkBZ,EAAmB5J,EAAQ,WAC7CyK,eAAgBb,EAAmB5J,EAAQ,SAC3C0K,UAAW,GAEfzK,KAAKqK,QAAQK,IAAI3K,EAAQqK,GAE7B,OAAOA,EAGXvK,OAAO8K,EAAgB5K,EAAgB6K,MACnC,IAAIR,EAAMD,EAAmBU,YAAY9K,GACzC4K,EAAMA,EAAIG,mBAAgD,IAAlCF,EAAQG,sBAAmCH,EAAQG,sBAAwB,GAEnG,QAAsC,IAAlCH,EAAQI,sBAAkC,CAC1C,IAAIC,EACJ,GADqBN,EAAIG,gBACJF,EAAQI,sBACzB,OAAOL,EAAIO,SAASN,EAAQI,sBAAuBZ,GAG3D,OAAOO,EAAIO,SAASd,IAzBTD,EAAAE,QAAU,IAAIc,uCCjBjChN,EAAAC,EAAAC,EAAA,sBAAA+M,IAAA,IAAA3L,EAAAtB,EAAA,YAAAuB,EAAAvB,EAAAO,EAAAe,GAAA,IAAA4L,EAAAlN,EAAA,YAAAmN,EAAAnN,EAAA,cAWaiN,UAAuB3L,EAAA,aAChCI,SACI,OACIJ,EAAA,iBAAC4L,EAAA,MACGlM,OAASD,KACLqM,WAAYrM,EAAMC,OAAOqM,YACzBC,KAAMvM,EAAMC,OAAOuM,cACnBC,OAAQzM,EAAMC,OAAOyM,kBAEzB3F,QAASjG,KAAKjB,MAAMkH,SAEpBxG,EAAA,iBAAC6L,EAAA,MAAOvL,OAAQC,KAAKjB,MAAMgB,OAAQD,MAAOE,KAAKjB,MAAMH,8FCpB9D,SAASiN,EAA4BC,GACxC,OACIzL,OAAQyL,EAAYxB,IAAI,+BACxBhK,KAAMwL,EAAYxB,IAAI,6BACtB/J,EAAGuL,EAAYxB,IAAI,0BACnB9J,GAAIsL,EAAYxB,IAAI,2BACpB7J,EAAGqL,EAAYxB,IAAI,0BACnB5J,GAAIoL,EAAYxB,IAAI,2BACpB3J,EAAGmL,EAAYxB,IAAI,0BACnB1J,GAAIkL,EAAYxB,IAAI,2BACpBlM,EAAG0N,EAAYxB,IAAI,0BACnBzJ,GAAIiL,EAAYxB,IAAI,2BACpBxJ,EAAGgL,EAAYxB,IAAI,0BACnBvJ,GAAI+K,EAAYxB,IAAI,2BACpBtJ,EAAG8K,EAAYxB,IAAI,0BACnBrJ,GAAI6K,EAAYxB,IAAI,4BCjB5BnM,EAAAC,EAAAC,EAAA,sBAAA+F,UAYaA,UAAuB2H,EAAAC,EAAMC,UACtCpM,SACI,OAAOkM,EAAAC,EAAAE,cAACC,EAAA,KAAkBrN,OAAAiI,UAAK/G,KAAKjB,OAChC2C,aAAcmK,EAA4B7L,KAAKjB,MAAM+M,qDCfjE3N,EAAAC,EAAAC,EAAA,sBAAA+N,IAAA,IAAAC,EAAAlO,EAAA,QAMO,MAAMiO,EAAqBtN,OAAAuN,EAAA,KAAAvN,CAAwC,OAAMwN,YAAAC,YAAA,qBAAAC,YAAA;;;;;;;wBAOxDzN,GAASA,EAAMG,MAAMC,OAAOsN;;wBAE5B1N,GAASA,EAAMG,MAAMC,OAAOuN;;;aAGvC3N,GAAUA,EAAME,SAA8CF,EAAMG,MAAMC,OAAOwN,sBAAtD5N,EAAMG,MAAMC,OAAOyN;cAC7C7N,GAASA,EAAME,SAAW,UAAY;;;;;;;;4BAQxBF,GAAUA,EAAME,SAEhCF,EAAMG,MAAMC,OAAOwN,sBADnB5N,EAAMG,MAAMC,OAAO0N;;;;;;;;;;;;gCAaC9N,GAASA,EAAMG,MAAMC,OAAO2N;;;;4GCvCrD,MAAMC,EAAyB/I,EAAA,KAAOC,IAAGqI,YAAAC,YAAA,yBAAAC,YAAA;;;;;kFCWhD,MAAMQ,EAAsBlO,OAAAkF,EAAA,KAAAlF,CAAqC,OAAMwN,YAAAC,YAAA,sBAAAC,YAAA;;;wBAG/CzN,GAChBA,EAAMkO,OACNlO,EAAMG,MAAMC,OAAO+N,eACnBnO,EAAMG,MAAMC,OAAOgO;wBAEHpO,GAChBA,EAAMkO,OACNlO,EAAMG,MAAMC,OAAO+N,eACnBnO,EAAMG,MAAMC,OAAOgO;;MAGrBpO,GAAUA,EAAME,UAAaF,EAAMkO,OAKjC,GAL0CjJ,EAAA;MAC5CoJ;4BACsBrO,EAAMG,MAAMC,OAAO+N;;;;MAIzCnO,GAASA,EAAME,SAAW+E,EAAA;;MAExB;EAGD,MAAMqJ,EAAoEtO,GAC7EmE,EAAA,iBAAC8J,EAAmBlO,OAAAiI,UAAKhI,ICjCtB,MAAMqO,EAAmBpJ,EAAA,KAAOC,IAAGqI,YAAAC,YAAA,mBAAAC,YAAA;;EAQ1C,MAAMc,EAAqBxO,OAAAkF,EAAA,KAAAlF,CAA4B,OAAMwN,YAAAC,YAAA,qBAAAC,YAAA;cAC/C,EAAEe,eAAeA;;;;;EAY/B,MAAMC,EAAyB1O,OAAAkF,EAAA,KAAAlF,CAA6B,OAAMwN,YAAAC,YAAA,yBAAAC,YAAA;;cAEpDzN,GAAS2E,KAAK+J,MAAM1O,EAAM2O,QAAU3O,EAAMwO,UAAY;;QAYvDI,UAAqBzK,EAAA,aAG9BrD,SACI,OACIqD,EAAA,iBAACkK,EAAgB,KACblK,EAAA,iBAAC0K,EAAA,MACGC,UAAU,MACVC,gBAAc,EACdC,UAAW,EACXC,UAAW,EACXC,OAAQ,GACRC,iBAAkB,IAAMlO,KAAKmO,MAC7BhI,QAASnG,KAAKjB,MAAMqP,SAEpBlL,EAAA,iBAACmL,EAAA,MAAK7F,GAAIxI,KAAKjB,MAAMuP,MACjBpL,EAAA,iBAACoK,GAAmBC,UAAWvN,KAAKjB,MAAMwO,WACtCrK,EAAA,iBAACsK,GAAuBE,QAAS1N,KAAKjB,MAAMe,MAAOyN,UAAWvN,KAAKjB,MAAMwO,WACrErK,EAAA,iBAACmK,GAAgBJ,OAAQjN,KAAKjB,MAAMkO,OAAQsB,SAAUC,GAAOxO,KAAKmO,MAAQK,UCrC1G,MAAMC,EAAe3P,OAAAkF,EAAA,KAAAlF,CAAmC,OAAMwN,YAAAC,YAAA,eAAAC,YAAA;;;cAGhD,EAAEkC,YAAYA;;;;QAMfC,UAA4BzL,EAAA,aAE7BrD,cACJ,OAAOG,KAAKjB,MAAM6P,KAAKC,OAAO,CAACC,EAAKC,IAAarL,KAAKiF,IAAImG,EAAMC,EAASjP,MAAYiP,EAASjP,MAAb,GAAqB,GAG1GD,SACI,IAAImP,EAAWhP,KAAKiP,cACpB,OACI/L,EAAA,iBAACuL,GAAaC,OAAQ1O,KAAKjB,MAAM2P,OAAQH,SAAW/E,IAC5CxJ,KAAKjB,MAAMwP,UAAYvO,KAAKjB,MAAMwP,SAAS/E,KAG/CxJ,KAAKjB,MAAM6P,KAAKM,IAAI,CAAC9Q,EAAGkL,IAAMpG,EAAA,iBAACyK,GAE3BwB,IAAK/Q,EAAE+Q,IACPrP,MAAO1B,EAAE0B,MAAQ4D,KAAKmB,MAAMzG,EAAE0B,MAAQkP,EAAW,KAAO,EACxDzB,UAAWvN,KAAKjB,MAAM2P,OACtBJ,KAAMtO,KAAKjB,MAAMqQ,UAAYpP,KAAKjB,MAAMqQ,UAAUhR,GAAK,GACvDgQ,QAASpO,KAAKjB,MAAMsQ,aAAerP,KAAKjB,MAAMsQ,aAAajR,GAAK,KAChE6O,SAAQjN,KAAKjB,MAAMuQ,aAActP,KAAKjB,MAAMuQ,YAAYlR,wDCpC5E,MAAMmR,EAAyB,GAc/B,IAAaC,QAAAC,UAA2BvM,EAAA,aADxCrD,kCAOYG,KAAA0P,eAwEA1P,KAAA2P,aAAe,MACnB,GAAI3P,KAAK4P,eAAgB,CACrB5P,KAAK6P,oBAAsB7P,KAAK4P,eAAeE,YAC/C,IAAIC,EAAgBC,iBAAiBhQ,KAAK4P,gBAC1C,IAAIK,EAAiBC,SAASH,EAAcI,iBAAiB,gBAAiB,IAC1ED,SAASH,EAAcI,iBAAiB,iBAAkB,IAC9D,MAAMC,EAAsBpQ,KAAK6P,oBAC7BnM,KAAKmB,OAAO7E,KAAK6P,oBAAsBI,GAAkB,IACzD,GACJjQ,KAAKqQ,iBAAmB3M,KAAK+E,IAAI2H,EArGd,IAwGvBpQ,KAAKsQ,sBA9ETC,sBACI,OAAQvQ,KAAKjB,MAAMyR,gBAAgBC,aAAe/H,MAAa1I,KAAKqQ,iBAAmB,GAG3FxQ,SACI,OACIqD,EAAA,iBAACyL,GACGJ,SAAW/E,IACPxJ,KAAK4P,eAAiBpG,EAClBA,IACAxJ,KAAK6P,oBAAsBrG,EAAEsG,cAGrCpB,OAAQ,GACRE,KAAM5O,KAAK0P,YAAYR,IAAI,CAACN,EAAM8B,KAC9B,IAAIC,EACJ,OACIxB,IAFcnP,KAAKuQ,gBAAkBG,EAGrC5Q,MAAO8O,EAAOA,EAAKgC,sBAAmB,EACtChC,UAGRS,aAAejR,GAAM8E,EAAA,wBAAKkD,OAAQyK,QAAS,EAAGxK,QAAS,SACnDnD,EAAA,iBAAC4N,EAAA,MAAe7K,QAAQ,QAAQ8K,QAAM,GAAE3S,EAAE+Q,UAC5B,IAAZ/Q,EAAE0B,MACJoD,EAAA,iBAAC8N,EAAA,MAAW/K,QAAQ,SACfjG,KAAKjB,MAAM+M,YAAYxB,IAAI,4CACvBvH,QAAQ,KAAM,GAAK3E,EAAE0B,QAE5B,MAENsP,UAAYhR,GAAM4B,KAAKiR,WAAWC,SAAS9S,EAAE+Q,OAKzDtP,oBACIG,KAAKiR,WAAa,IAAIE,EAAA,KACtBC,OAAOC,iBAAiB,SAAUrR,KAAK2P,cACvC3P,KAAK2P,eACL3P,KAAKsR,wBAGTzR,uBACIuR,OAAOG,oBAAoB,SAAUvR,KAAK2P,cAC1C3P,KAAKwR,0BAGD3R,wBACJG,KAAKwR,0BAELxR,KAAKyR,iBAAmB3S,OAAA6H,EAAA,KAAA7H,CACpB,IAAMkB,KAAKjB,MAAMyR,gBAAgBC,YACjC,KACIzQ,KAAKsQ,sBAKTzQ,0BACJ,GAAIG,KAAKyR,iBAAkB,CACvBzR,KAAKyR,mBACLzR,KAAKyR,sBAAmB,GAmBxB5R,oBACAG,KAAK0R,eACL1R,KAAK0R,cAAcC,SAEvB3R,KAAK0R,cAAgB,IAAIE,EAAA,KAAMC,GAAgB7R,KAAK8R,UAAUD,GACzDE,MAAM3O,IACH,KAAMA,aAAa4O,EAAA,MACf,MAAM5O,KAGlBpD,KAAK0R,cAAc7I,QACdkJ,MAAM3O,GAAKpD,KAAKjB,MAAMkT,OAAOC,MAAM9O,IAG9BvD,UAAUgS,wDACpB,IAAIM,EAAgBnS,KAAKuQ,gBAAkBvQ,KAAKqQ,iBAEhD,IAAIX,QAAoB1P,KAAKjB,MAAMqT,gBAC9BC,MAAMrS,KAAKuQ,gBAAiB4B,GAMjC,GAAIN,EAAYS,cACZ,OAGJtS,KAAK0P,YAAcA,MArHvBhJ,EAAA,eADCC,EAAA,6CAGDD,EAAA,eADCC,EAAA,KAAW4L,2CAOZ7L,EAAA,eADCC,EAAA,0CAXQ6I,EAAkB9I,EAAA,eAD9BE,EAAA,MACY4I,mJCRb,IAAagD,QAAAC,UAAqBvP,EAAA,aADlCrD,kCAgCYG,KAAA0S,iBAAmB,EACvBC,EACAzK,EACA0K,EACA9S,KAEA,GAAIoI,EAAS,CACTlI,KAAKjB,MAAM8T,OAAOC,iBAAiBhT,EAAOE,KAAKjB,MAAMgU,iBACrD,IAAIC,EAAkBhT,KAAKjB,MAAM8T,OAAOI,mBACxCjT,KAAKjB,MAAMmU,UAAUC,cACjBpL,KAAMiL,EAAgBzT,MACtB6T,IAAKJ,EAAgBlT,OAG7BE,KAAKqT,iBA1CTxT,SACI,OACIqD,EAAA,iBAACoQ,EAAA,MAAUrU,SAAUe,KAAKjB,MAAME,SAAUgP,QAAUsF,MAAO,GAAIC,KAAM,IAAMC,OAAQ,EAAGJ,mBAClFrT,KAAKqT,aAAeA,EACpB,OACInQ,EAAA,iBAAC0D,EAAA,KAAQ,KACJ,IAAM5G,KAAKjB,MAAM8T,OAAOa,YAAYxE,IAAKyE,GAElCzQ,EAAA,iBAAC0E,EAAA,MACGK,GAAI,aAAe0L,EAAExE,IACrBA,IAAKwE,EAAExE,IACPrP,MAAO6T,EAAExE,IACTpH,KAAK,YACLG,QAASlI,KAAKjB,MAAM8T,OAAOI,mBAAmB9D,MAAQwE,EAAExE,IACxDtH,SAAU7H,KAAK0S,kBACjBiB,EAAEpU,WAMpB2D,EAAA,iBAACkJ,EAAA,MAAmBnN,SAAUe,KAAKjB,MAAME,UACpCe,KAAKjB,MAAM8T,OAAOI,mBAAmB1T,UAzB7CiT,EAAY9L,EAAA,eADxBE,EAAA,MACY4L,kDCqBb,MAAMoB,EAAQ5P,EAAA,KAAO6P,GAAEvH,YAAAC,YAAA,QAAAC,YAAA;;;;;;;;EAUvB,MAAMsH,EAAW9P,EAAA,KAAO+P,GAAEzH,YAAAC,YAAA,WAAAC,YAAA;;;;;;;;EAU1B,MAAMwH,EAAiBhQ,EAAA,KAAOC,IAAGqI,YAAAC,YAAA,iBAAAC,YAAA;;;;;EAOjC,MAAMyH,EAAajQ,EAAA,KAAOgI,EAACM,YAAAC,YAAA,aAAAC,YAAA;;;;;;;;;;;;;EAgB3B,IAAa0H,QAAAC,UAAyBjR,EAAA,aAClCrD,SACI,IAAMiM,YAAasI,EAAE5N,UAAEA,GAAcxG,KAAKjB,MAC1C,IAAIgB,EAASC,KAAKjB,MAAMsV,UAAUC,YAElC,OAAOpR,EAAA,iBAAC6J,EAAsB,KAC1B7J,EAAA,iBAAC0Q,EAAK,KAAGQ,EAAG9J,IAAI,wBAChBpH,EAAA,iBAAC4Q,EAAQ,KAAEM,EAAG9J,IAAI,0BACdpH,EAAA,iBAAC+Q,GAAWM,KAAK,kCACbC,OAAO,UAENJ,EAAG9J,IAAI,0BAGhBpH,EAAA,iBAACuR,EAAA,KAAmB,KAChBvR,EAAA,iBAACwR,EAAA,MACG5I,YAAasI,EAAIO,OAAQ3U,KAAKjB,MAAM4V,OAAQC,kBAAmB5U,KAAKjB,MAAM6V,qBAGlF1R,EAAA,iBAAC8Q,EAAc,KACX9Q,EAAA,iBAAC5E,EAAA,KAAK,KAAG8V,EAAG9J,IAAI,+CAEpBpH,EAAA,iBAACsM,GACGgB,gBAAiBxQ,KAAKjB,MAAMyR,gBAC5B4B,gBAAiBpS,KAAKjB,MAAMqT,gBAC5BtG,YAAa9L,KAAKjB,MAAM+M,YACxBmG,OAAQjS,KAAKjB,MAAMkT,SAEvB/O,EAAA,wBAAKkD,OAAQC,QAAS,OAAQwO,eAAgB,SAAUC,SAAU,SAC9D5R,EAAA,iBAAC6R,EAAA,KAAa,KACV7R,EAAA,iBAACsP,GAAaU,UAAWlT,KAAKjB,MAAMmU,UAAWL,OAAQ7S,KAAKjB,MAAMiW,kBAClEjC,gBAAiB/S,KAAKjB,MAAMgU,gBAC5BjH,YAAasI,EAAIC,UAAWrU,KAAKjB,MAAMsV,aAE3CnR,EAAA,iBAAC6R,EAAA,KAAa,KACV7R,EAAA,iBAAC5E,EAAA,KAAK,KAAG8V,EAAG9J,IAAI,wCAChBpH,EAAA,iBAAC4N,EAAA,KAAc,KAAG9Q,KAAKjB,MAAMkW,UAAUhN,KAEzCjI,KAAKjB,MAAMkW,UAAUC,aACvBhS,EAAA,iBAAC6R,EAAA,KAAa,KACV7R,EAAA,iBAAC5E,EAAA,KAAK,KAAE8V,EAAG9J,IAAI,8CACfpH,EAAA,iBAACmB,EAAA,MAAec,UAAWnF,KAAKjB,MAAMkW,UAAUC,aAC5CpJ,YAAasI,EACb3N,cAAY,EACZ1G,OAAQA,EACRyG,UAAWA,KAEjB,KACFtD,EAAA,iBAAC6R,EAAA,KAAa,KACV7R,EAAA,iBAAC5E,EAAA,KAAK,KAAE8V,EAAG9J,IAAI,yCACfpH,EAAA,iBAAC8N,EAAA,KAAU,KAAGhR,KAAKjB,MAAMkW,UAAUE,aAAavS,SAEpDM,EAAA,iBAAC6R,EAAA,KAAa,KACV7R,EAAA,iBAAC5E,EAAA,KAAK,KAAE8V,EAAG9J,IAAI,mCACfpH,EAAA,iBAACkI,EAAA,MAAerL,OAAQA,GAASC,KAAKjB,MAAMkW,UAAUG,OAAOxS,aAtDpEsR,EAAgBxN,EAAA,eAD5BE,EAAA,MACYsN,4KC/EAmB,UAAuBnS,EAAA,aAChCrD,SACI,OACIqD,EAAA,iBAAC4D,EAAA,KAAOhI,OAAAiI,UAAK/G,KAAKjB,OACdmE,EAAA,sBAAG8D,OAAO,OAAOC,YAAY,IAAIC,KAAK,OAAOC,SAAS,WAClDjE,EAAA,4BAASkE,OAAO,wBAChBlE,EAAA,4BAASgE,KAAK,eAAeC,SAAS,UAElCC,OAAO,+OCN/B,MAAMkO,EAActR,EAAA,KAAOC;;;aAGd,EAAE/E,WAAWA,EAAMC,OAAOoW;EAEvC,MAAMC,EAAwBxR,EAAA,KAAOC;;;wBAGblF,GAASA,EAAMG,MAAMC,OAAOsW;;;QAKvCC,UAAuBxS,EAAA,aAChCrD,SACI,OACIqD,EAAA,iBAACsS,EAAqB,KAClBtS,EAAA,wBAAKkD,OAAQyK,QAAS,QAClB3N,EAAA,iBAACoS,GAAYzR,QAAS7D,KAAKjB,MAAM4W,SAC7BzS,EAAA,iBAACmS,EAAc,QAGrBrV,KAAKjB,MAAMH,2CCX7B,MAAMgX,EAAU5R,EAAA,KAAOC;;;;;;EASvB,IAAa4R,QAAAvC,UAAkBpQ,EAAA,aAD/BrD,kCAIYG,KAAA8V,UAAW,EAoDX9V,KAAA+V,cAAgB,MACpB/V,KAAK8V,UAAW,IAGZ9V,KAAAgW,eAAiB,MACrBhW,KAAK8V,UAAW,IAvDpBjW,SACI,IAAIZ,SAAEA,GAAae,KAAKjB,MAExB,OACImE,EAAA,iBAAC+S,EAAA,KAAO,KACJ/S,EAAA,iBAAC+S,EAAA,KAAS,KACL,EAAEzH,SACCtL,EAAA,wBAAKsL,IAAKA,EAAK3K,QAAU5E,OAAgC,EAArBe,KAAK+V,cAAwB3P,OAC7D8P,OAASjX,EAAuB,UAAZ,YAElBe,KAAKjB,MAAMH,WAIxBoB,KAAK8V,SACNK,EAAA,gBACIjT,EAAA,iBAAAA,EAAA,iBACIA,EAAA,iBAAC0S,GAAQ/R,QAAS7D,KAAKgW,iBACvB9S,EAAA,iBAAC+S,EAAA,MAAOG,WACJnI,QACIA,OAAQjO,KAAKjB,MAAMkP,OACfjO,KAAKjB,MAAMkP,OAAOsF,KAAO,OAASvT,KAAKjB,MAAMkP,OAAOuF,IAAM,KAC1D,QAER6C,MACIC,SAAS,GAEbC,iBACID,SAAS,GAEbE,MACIF,SAAS,IAEdzI,UAAU,gBACR,EAAEW,MAAKX,YAAWzH,WACflD,EAAA,wBAAKsL,IAAKA,EAAGiI,iBAAkB5I,EAAWzH,MAAOA,GAC7ClD,EAAA,iBAACwS,GAAeC,QAAS3V,KAAKgW,gBACxBhW,KAAKjB,MAAM0U,QAAQJ,aAAcrT,KAAKgW,qBAM5DU,SAASC,MAEX,QA/CdjQ,EAAA,eADCC,EAAA,qCAFQkP,EAASnP,EAAA,eADrBE,EAAA,MACYiP,sECpBb,MAAMe,EAAgE,EAAGhY,WAAUC,eAC/EqE,EAAA,wBAAKrE,UAAWA,GAAYD,GAEzB,MAAMiY,EAAgB/X,OAAAkF,EAAA,KAAAlF,CAAO8X;;;;cAItB,EAAEE,aAAYC,gBAAgBD,EAAa,OAAUC,EAAaA,EAAa,KAAO;;;YAGxF,EAAED,gBAAgBA,EAAa,MAAQ;aACtC/X,GAAUA,EAAMiY,mBAAqBjY,EAAMkY,UAAY,QAAU;uBACvDlY,GACfA,EAAM8V,eAAiB9V,EAAM8V,eAAkB9V,EAAMiY,iBAAmB,WAAa;;aAGhFjY,GAASA,EAAMG,MAAMgY,aAAaC,YAAYC;;qBAEtCrY,GAAUA,EAAMiY,mBAAqBjY,EAAMkY,UAAY,QAAU;;;aAGzElY,GAASA,EAAMG,MAAMgY,aAAaC,YAAYE;;qBAEtCtY,GAAUA,EAAMiY,mBAAqBjY,EAAMkY,UAAY,OAAS;;kBC/BrF9Y,EAAAC,EAAAC,EAAA,sBAAAiZ,IAUA,MAAMC,EAA8E,EAChF3Y,WACAC,eAEAqE,EAAA,wBAAKrE,UAAWA,GAAYD,GAGhC,MAAM4Y,EAAuB1Y,OAAAkF,EAAA,KAAAlF,CAAOyY;;YAExBxY,GAASA,EAAM0Y,QAAU,MAAQ;EAO7C,MAAMC,EAAwE,EAC1E9Y,WACAC,eAEAqE,EAAA,wBAAKrE,UAAWA,GAAYD,GAEhC,MAAM+Y,EAAoB7Y,OAAAkF,EAAA,KAAAlF,CAAO4Y;;YAErB,EAAED,aAAaA,EAAU,MAAQ;;QAchCH,UAAsBpU,EAAA,iBAE/BrD,SACI,MAAM+X,EAAgB1U,EAAA,YAAe2U,QAAQ7X,KAAKjB,MAAMH,UACnDiQ,OAAO,CAACiJ,EAAQC,KACTC,EAAA,cAAmBD,GACnBD,EAAOG,QAAQ/U,EAAA,YAAegM,IAAK6I,EAAMhZ,MAA0BH,SAAUsZ,IACzE,IAAKF,EAAA,aAAkBE,GAAI,CAEvBC,QAAQjG,MACJ,iFAAkFgG,GACtF,OAAOA,EAEX,OAAOhV,EAAA,gBAAmBgV,SAG9BJ,EAAOG,KAAKF,GAEhB,OAAOD,OAGf,MAAMM,EAAeR,EAAcS,QACnC,OACInV,EAAA,iBAACsU,GAAqBC,QAASzX,KAAKjB,MAAM0Y,SACpCzX,KAAKjB,MAAMuZ,iBAAmB,KAC5BpV,EAAA,iBAAC2T,GAAcG,iBAAkBhX,KAAKjB,MAAMiY,iBAAkBD,WAAY/W,KAAKjB,MAAMgY,WACjFE,UAAWjX,KAAKjB,MAAMkY,WACpBmB,GAGiB,IAAzBR,EAAchV,OACZ5C,KAAKuY,oBAAoBX,GACzB1U,EAAA,iBAACyU,GAAkBF,QAASzX,KAAKjB,MAAM0Y,SACjCzX,KAAKuY,oBAAoBX,KAOvC/X,oBAAoBjB,GACxB,OAAOA,EAASsQ,IAAI,CAACgJ,EAAGxH,IAEhBxN,EAAA,iBAAC2T,GAAcE,WAAY/W,KAAKjB,MAAMgY,WAAYD,WAAY9W,KAAKjB,MAAM+X,WACrEG,UAAWjX,KAAKjB,MAAMkY,UAAW9H,IAAKuB,GAEpCwH,KA7CXZ,EAAAkB,OAAS","file":"js/3bb62971f4d0794ce56c.bundle.js","sourcesContent":["import styled, { css } from \"../styled-components\";\nimport * as React from \"react\";\n\nexport interface ILabelProps {\n    arrow?: boolean;\n    disabled?: boolean;\n    className?: string;\n}\n\nconst $Label: React.StatelessComponent<ILabelProps> = ({ children, className }) => (\n    <div className={className}>{children}</div>\n);\n\nexport const Label = styled($Label)`\n    font-size: 12px;\n    line-height: 12px;\n    height: 12px;\n    text-transform: uppercase;\n    background-color: ${props => (\n        props.arrow ?\n        (\n            props.disabled ?\n            props.theme.colors.arrowLabelBgDisabled :\n            props.theme.colors.arrowLabelBg\n        ) :\n        \"transparent\"\n    )};\n    font-weight: 600;\n    letter-spacing: .5px;\n    padding: 4px 8px;\n    margin-right: ${props => props.arrow ? \"10px\" : \"0\"};\n    color: ${props => (\n        props.arrow ?\n        props.theme.colors.arrowLabel :\n        props.theme.colors.label\n    )};\n\n    /**\n     * When is the first label in a row the width of the container (LayoutRowItemWrapper) is 200px + 2*8px padding,\n     * and the display: flex along with justify-content: flex-end ensures that the label is right aligned.\n     * However, if the label is long enough (bigger than 200px) to wrap, the Label div will occupy all the container\n     * width, and the text will be aligned to right thanks to the rule below.\n     */\n    text-align: right;\n\n    ${props => props.arrow ? css`\n    position: relative;\n    &::before {\n        content: \"\";\n        position: absolute;\n        top: 0;\n        right: -10px;\n        border-top: 10px solid transparent;\n        border-bottom: 10px solid transparent;\n        border-left: 10px solid ${props.disabled ?\n            props.theme.colors.arrowLabelBgDisabled :\n            props.theme.colors.arrowLabelBg\n        };\n        transform: scaleX(.8);\n        transform-origin: center left;\n    }\n    ` : \"\"}\n`;\n","import * as React from \"react\";\nimport { NumberFormatter } from \"../util/internal/locale/NumberFormatter\";\nimport { BigNumber } from \"../util/BigNumber\";\nimport { BigNumberFormatter } from \"../util/internal/locale/BigNumberFormatter\";\n\nexport interface INumberProps {\n    value: number | BigNumber;\n    locale: string;\n}\n\nexport class Number extends React.Component<INumberProps> {\n    render() {\n        let { value, locale } = this.props;\n        return typeof value !== \"number\" ?\n            new BigNumberFormatter().format(value, locale) :\n            new NumberFormatter().format(value, locale);\n    }\n}\n","/** @internal */\nexport class NumberFormatter {\n    format(value: number, locale: string) {\n        return value.toLocaleString(locale);\n    }\n}\n","import * as datetimeDifference from \"datetime-difference\";\n\ntype TimeUnit = \"years\" | \"months\" | \"days\" | \"hours\" | \"minutes\" | \"seconds\";\ntype RelativeTimeKey = \"s\" | \"ss\" | \"m\" | \"mm\" | \"h\" | \"hh\" | \"d\" | \"dd\" | \"M\" | \"MM\" | \"y\" | \"yy\";\n\nexport type IRelativeTimeTranslations = Record<RelativeTimeKey | \"future\" | \"past\", string>;\n\nconst defaultTranslations: IRelativeTimeTranslations = {\n    future: \"in %s\",\n    past: \"%s ago\",\n    s: \"1 second\",\n    ss: \"%d seconds\",\n    m: \"1 minute\",\n    mm: \"%d minutes\",\n    h: \"1 hour\",\n    hh: \"%d hours\",\n    d: \"1 day\",\n    dd: \"%d days\",\n    M: \"1 month\",\n    MM: \"%d months\",\n    y: \"1 year\",\n    yy: \"%d years\"\n};\n\n/** Maps time units used by datetime-difference to time unit codes for relative time localized strings  */\nlet unitCodes: Record<TimeUnit, RelativeTimeKey> = {\n    years: \"y\",\n    months: \"M\",\n    days: \"d\",\n    hours: \"h\",\n    minutes: \"m\",\n    seconds: \"s\"\n};\n\nexport class RelativeTimeFormatter {\n    constructor(private translations: IRelativeTimeTranslations = defaultTranslations) {\n    }\n\n    /**\n     * Computes the date/time difference d1 - d2 and returns a formatted localized string\n     * e.g. \"5 days 6 hours ago\", if d1 > d2\n     *  or \"in 5 days 6 hours\", if d2 > d1\n     *\n     * @param d1 unix timestamp (millis)\n     * @param d2 unix timestamp (millis)\n     */\n    formatDiff(d1: number, d2: number) {\n        let formatted = this.format(d1, d2);\n        return this.formatRelativeTime(formatted, d1 < d2);\n    }\n\n    /**\n     * Formats an interval given in miliseconds to a human readable localized string\n     * Computes the date/time difference d1 - d2 and returns a formatted localized string\n     * e.g. \"5 days 6 hours\"\n     *\n     * @param intv number (millis)\n     */\n    formatInterval(intv: number) {\n        let present = new Date().getTime();\n        let before = present - intv;\n\n        return this.format(present, before);\n    }\n\n    private format(d1: number, d2: number) {\n        let diff = datetimeDifference(new Date(d1), new Date(d2));\n        let units: TimeUnit[] = [\"years\", \"months\", \"days\", \"hours\", \"minutes\", \"seconds\"];\n        let firstSignificantIdx = units.findIndex(unit => diff[unit] !== 0);\n        if (firstSignificantIdx === -1) {\n            // Time difference is 0\n            return this.humanizeDiffUnit(0, \"seconds\");\n        } else {\n            let formatted = \"\";\n            let firstUnit = units[firstSignificantIdx];\n            formatted += this.humanizeDiffUnit(diff[firstUnit], firstUnit);\n\n            // We don't show the 2nd time unit if 1st time unit is minutes or seconds\n            if (firstSignificantIdx + 2 < units.length) {\n                let secondUnit = units[firstSignificantIdx + 1];\n                if (diff[secondUnit] !== 0) {\n                    formatted += \" \" + this.humanizeDiffUnit(diff[secondUnit], secondUnit);\n                }\n            }\n\n            return formatted;\n        }\n    }\n\n    /**\n     * Outputs a human readable text for a given time value + unit, with proper pluralization\n     *\n     * @param value uint\n     * @param unit\n     */\n    private humanizeDiffUnit(value: number, unit: TimeUnit) {\n        let unitCode = value === 1 ?\n            unitCodes[unit] :\n            unitCodes[unit] + unitCodes[unit] as RelativeTimeKey;\n\n        return this.translations[unitCode].replace(/%d/i, \"\" + value);\n    }\n\n    /**\n     * Format a human-readable time duration (e.g. \"2 minutes\") as past or future time\n     * (e.g. \"2 minutes ago\" or \"in 2 minutes\")\n     */\n    private formatRelativeTime(value: string, future: boolean) {\n        return this.translations[future ? \"future\" : \"past\"].replace(/%s/i, value);\n    }\n}\n","import * as React from \"react\";\n\nconst DEFAULT_THRESHOLD = 5;\n\nexport interface IClickThresholdProps {\n    threshold?: number;\n    onClick(): void;\n}\n\n/**\n * Component that allows clicks within a given threshold.\n *\n * React click events trigger even if the mouse was moved significantly between mouse down and mouse up events\n * (e.g. dragging or text selection)\n */\nexport class ClickThreshold extends React.Component<IClickThresholdProps> {\n    static defaultProps: Partial<IClickThresholdProps> = {\n        threshold: DEFAULT_THRESHOLD\n    };\n\n    private mouseDownCoords: {x: number; y: number};\n\n    private get threshold() {\n        return this.props.threshold!;\n    }\n\n    render() {\n        return (\n            <div onMouseDown={this.onMouseDown} onMouseUp={this.onMouseUp}>\n                {this.props.children}\n            </div>\n        );\n    }\n\n    private onMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {\n        this.mouseDownCoords = {\n            x: e.clientX,\n            y: e.clientY\n        };\n    }\n\n    private onMouseUp = (e: React.MouseEvent<HTMLDivElement>) => {\n        if (Math.abs(e.clientX - this.mouseDownCoords.x) <= this.threshold &&\n            Math.abs(e.clientY - this.mouseDownCoords.y) <= this.threshold\n        ) {\n            this.props.onClick();\n        }\n    }\n}\n","import * as React from \"react\";\nimport { observable } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport { ValueBox, IValueBoxProps } from \"../../layout/content/box/ValueBox\";\nimport { RelativeTimeFormatter, IRelativeTimeTranslations } from \"../../util/time/RelativeTimeFormatter\";\nimport { TooltipRegular } from \"../../overlay/tooltip/TooltipRegular\";\nimport { ClickThreshold } from \"../../util/react/ClickThreshold\";\nimport styled from \"../../styled-components\";\nimport { CopyValueButton } from \"../../control/button/CopyValueButton\";\nimport { IClipboard } from \"../IClipboard\";\n\nconst TimeElapsedContentRoot = styled.div`\n    user-select: none;\n    cursor: pointer;\n`;\n\nconst CopyValueButtonWrapper = styled.div`\n    margin: 0 0 0 16px;\n`;\n\nenum DisplayMode {\n    AbsoluteTime,\n    RelativeTime\n}\n\nexport { IRelativeTimeTranslations } from \"../../util/time/RelativeTimeFormatter\";\n\nexport interface ITimeElapsedBoxProps {\n    /** Unix timestamp of event for which the elapsed time is calculated */\n    timestamp: number;\n    nonclickable?: boolean;\n    locale: string | undefined;\n    /**\n     * Translations: 'future' and 'past' use %s, all others use %d for replacements.\n     * If undefined, uses default English translations\n     *\n     * Example: { future: \"in %s\", past: \"%s ago\", s: \"1 second\", ss: \"%d seconds\", ... }\n     */\n    translations: IRelativeTimeTranslations | undefined;\n    clipboard: IClipboard;\n    variant?: IValueBoxProps[\"variant\"];\n}\n\n@observer\nexport class TimeElapsedBox extends React.Component<ITimeElapsedBoxProps> {\n    @observable\n    private currentTime: number;\n    @observable\n    private displayMode = DisplayMode.RelativeTime;\n    private timeoutId: number;\n\n    componentDidMount() {\n        this.updateCurrentTime();\n    }\n\n    componentDidUpdate(prevProps: ITimeElapsedBoxProps) {\n        if (this.props.timestamp !== prevProps.timestamp) {\n            if (this.timeoutId) {\n                clearTimeout(this.timeoutId);\n            }\n            this.updateCurrentTime();\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.timeoutId) {\n            clearTimeout(this.timeoutId);\n        }\n    }\n\n    render() {\n        let value: string;\n        if (this.displayMode === DisplayMode.RelativeTime) {\n            value = new RelativeTimeFormatter(this.props.translations).formatDiff(\n                this.currentTime * 1000, this.props.timestamp * 1000\n            );\n        } else if (this.displayMode === DisplayMode.AbsoluteTime) {\n            value = new Date(this.props.timestamp * 1000).toLocaleDateString(this.props.locale, {\n                timeZone: \"UTC\",\n                timeZoneName: \"short\",\n                year: \"numeric\", month: \"long\", day: \"numeric\", hour: \"numeric\", minute: \"numeric\", second: \"numeric\"\n            });\n        } else {\n            throw new Error(`Unsupported display mode \"${DisplayMode[this.displayMode]}\"`);\n        }\n        let box = (\n            <ValueBox variant={this.props.variant}>\n                <TimeElapsedContentRoot>\n                    {value}\n                </TimeElapsedContentRoot>\n            </ValueBox>\n        );\n        return (\n            <TooltipRegular content={\n                <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                    <div>{this.props.timestamp}</div>\n                    <CopyValueButtonWrapper>\n                        <CopyValueButton value={\"\" + this.props.timestamp} clipboard={this.props.clipboard}/>\n                    </CopyValueButtonWrapper>\n                </div>\n            }>\n                { this.props.nonclickable ? box :\n                <ClickThreshold onClick={this.cycleDisplayMode}>\n                    { box }\n                </ClickThreshold>\n                }\n            </TooltipRegular>\n        );\n    }\n\n    private cycleDisplayMode = () => {\n        if (this.displayMode === DisplayMode.RelativeTime) {\n            this.displayMode = DisplayMode.AbsoluteTime;\n        } else if (this.displayMode === DisplayMode.AbsoluteTime) {\n            this.displayMode = DisplayMode.RelativeTime;\n        } else {\n            throw new Error(`Unknown display mode \"${this.displayMode}`);\n        }\n    }\n\n    private updateCurrentTime = () => {\n        this.currentTime = Math.floor(Date.now() / 1000);\n        this.timeoutId = setTimeout(this.updateCurrentTime, this.computeRefreshInterval());\n    }\n\n    private computeRefreshInterval() {\n        // Refresh every second if interval is under a minute, or every minute otherwise\n        return this.currentTime - this.props.timestamp > 60 ? 60000 : 1000;\n    }\n}\n","import * as React from \"react\";\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\n\nexport interface IRadioOnIconProps extends ISvgIconProps {\n\n}\n\nexport class RadioOnIcon extends React.Component<IRadioOnIconProps> {\n    render() {\n        return (\n            <SvgIcon {...this.props}>\n                <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n                    <polygon points=\"0 0 24 0 24 24 0 24\"></polygon>\n                    <path d={\n                        // tslint:disable-next-line:max-line-length\n                        \"M12,20 C7.581722,20 4,16.418278 4,12 C4,7.581722 7.581722,4 12,4 C16.418278,4 20,7.581722 20,12 C20,16.418278 16.418278,20 12,20 Z M12,18 C15.3137085,18 18,15.3137085 18,12 C18,8.6862915 15.3137085,6 12,6 C8.6862915,6 6,8.6862915 6,12 C6,15.3137085 8.6862915,18 12,18 Z M12,16 C9.790861,16 8,14.209139 8,12 C8,9.790861 9.790861,8 12,8 C14.209139,8 16,9.790861 16,12 C16,14.209139 14.209139,16 12,16 Z\"\n                    } fill=\"currentColor\"></path>\n                </g>\n            </SvgIcon>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\n\nexport interface IRadioOffIconProps extends ISvgIconProps {\n\n}\n\nexport class RadioOffIcon extends React.Component<IRadioOffIconProps> {\n    render() {\n        return (\n            <SvgIcon {...this.props}>\n                <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n                    <polygon points=\"0 0 24 0 24 24 0 24\"></polygon>\n                    <path d={\n                        // tslint:disable-next-line:max-line-length\n                        \"M12,20 C7.581722,20 4,16.418278 4,12 C4,7.581722 7.581722,4 12,4 C16.418278,4 20,7.581722 20,12 C20,16.418278 16.418278,20 12,20 Z M12,18 C15.3137085,18 18,15.3137085 18,12 C18,8.6862915 15.3137085,6 12,6 C8.6862915,6 6,8.6862915 6,12 C6,15.3137085 8.6862915,18 12,18 Z\"\n                    } fill=\"currentColor\"></path>\n                </g>\n            </SvgIcon>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { observer } from \"mobx-react\";\nimport styled from \"../styled-components\";\nimport { RadioOnIcon } from \"../icon/RadioOnIcon\";\nimport { RadioOffIcon } from \"../icon/RadioOffIcon\";\n\nconst RadioWrapper = styled.div`\n    padding: 8px 8px 8px 32px;\n    position: relative;\n`;\nconst RadioLabel = styled.label`\n    text-transform: uppercase;\n    display: block;\n    font-size: 12px;\n    line-height: 16px;\n    font-weight: 600;\n    color: ${({theme}) => theme.colors.checkboxLabel};\n`;\nconst RadioIconWrapper = styled.div`\n    position: absolute;\n    top: 4px;\n    left: 4px;\n    color: ${({theme}) => theme.colors.checkboxIcon};\n`;\n\ninterface IRadioProps {\n    id: string;\n    name: string;\n    value?: string | number;\n    checked?: boolean;\n    onChange?(\n        event: React.ChangeEvent<HTMLInputElement>,\n        checked: boolean,\n        name: string,\n        value?: string | number\n    ): void;\n}\n\n@observer\nexport class Radio extends React.Component<IRadioProps> {\n    render() {\n        return (\n            <RadioWrapper>\n                <input\n                    type=\"radio\"\n                    id={this.props.id}\n                    name={\"radio_\" + this.props.name}\n                    value={this.props.value}\n                    checked={this.props.checked || false}\n                    onChange={this.onChange}\n                    style={{display: \"none\"}}\n                />\n                <RadioLabel htmlFor={this.props.id}>\n                    <RadioIconWrapper>\n                        { this.props.checked ? <RadioOnIcon /> : <RadioOffIcon />}\n                    </RadioIconWrapper>\n                    {this.props.children}\n                </RadioLabel>\n            </RadioWrapper>\n        );\n    }\n\n    private onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (this.props.onChange) {\n            this.props.onChange(event, true, this.props.name, this.props.value);\n        }\n    }\n}\n","\"use strict\";\n\nmodule.exports = function datetimeDiff (from, to) {\n\n    const min = [-Infinity, 1, 1, 0, 0, 0, 0];\n    const max = [Infinity, 12, null, 24, 60, 60, 1000];\n\n    if (to < from) {\n        const temp = to;\n        to = from;\n        from = temp;\n    }\n\n    let start = [from.getUTCFullYear(), from.getUTCMonth() + 1, from.getUTCDate(), from.getUTCHours(),\n            from.getUTCMinutes(), from.getUTCSeconds(), from.getUTCMilliseconds()],\n        end = [to.getUTCFullYear(), to.getUTCMonth() + 1, to.getUTCDate(), to.getUTCHours(), to.getUTCMinutes(),\n            to.getUTCSeconds(), to.getUTCMilliseconds()],\n        i = 7;\n\n    const dec = (i) => {\n        --end[i];\n        while (end[i] < min[i]) {\n            const r = dec(i - 1);\n            end[i] += max[i] === null\n                ? r\n                : max[i];\n        }\n        return i === 1 ? new Date(Date.UTC(end[0], end[1], 0)).getUTCDate() : max[i + 1];\n    };\n\n    while (i > 0) {\n        --i;\n        let diff = end[i] - start[i];\n        while (diff < 0) {\n            end[i] += dec(i - 1);\n            diff = end[i] - start[i];\n        }\n        end[i] = diff;\n    }\n\n    return {\n        years: end[0],\n        months: end[1],\n        days: end[2],\n        hours: end[3],\n        minutes: end[4],\n        seconds: end[5],\n        milliseconds: end[6]\n    };\n\n};\n","/**\n * Returns the thousands (group) or decimal number separators for the given locale\n *\n * NB: Relies on Intl.NumberFormat and fallsback to simple detection with Number.prototype.toLocaleString()\n *\n * @internal\n */\nexport function getNumberSeparator(locale: string, separatorType: \"decimal\" | \"group\") {\n    let numberFormat: any = Intl.NumberFormat(locale);\n\n    if (numberFormat.formatToParts) {\n        return numberFormat\n            .formatToParts(1000.1)\n            .find((part: any) => part.type === separatorType)\n            .value as string;\n    }\n\n    if (separatorType === \"group\") {\n        return (1000).toLocaleString().replace(/[0-9]/g, \"\");\n    } else {\n        return 1.1.toLocaleString().replace(/[0-9]/g, \"\");\n    }\n}\n","import { BigNumber, Format } from \"../../BigNumber\";\nimport { getNumberSeparator } from \"./numberFormat\";\n\ninterface IFormatterOptions {\n    minimumFractionDigits?: number;\n    maximumFractionDigits?: number;\n}\n\n/**\n * Outputs a formatted, localized string representation of a BigNumber,\n * in the same fashion as Number.prototype.toLocaleString\n *\n * @internal\n */\nexport class BigNumberFormatter {\n    // HACK: We keep a static property of BigNumber Format objects and do lazy locale detection\n    // to avoid having to pass this class with DI through the entire app.\n    private static formats = new Map<string, Format>();\n\n    private static getBnFormat(locale: string) {\n        let fmt = this.formats.get(locale);\n        if (!fmt) {\n            fmt = {\n                decimalSeparator: getNumberSeparator(locale, \"decimal\"),\n                groupSeparator: getNumberSeparator(locale, \"group\"),\n                groupSize: 3\n            };\n            this.formats.set(locale, fmt);\n        }\n        return fmt;\n    }\n\n    format(num: BigNumber, locale: string, options: IFormatterOptions = {}) {\n        let fmt = BigNumberFormatter.getBnFormat(locale);\n        num = num.decimalPlaces(options.maximumFractionDigits !== void 0 ? options.maximumFractionDigits : 3);\n\n        if (options.minimumFractionDigits !== void 0) {\n            let fractionDigits = num.decimalPlaces();\n            if (fractionDigits < options.minimumFractionDigits) {\n                return num.toFormat(options.minimumFractionDigits, fmt);\n            }\n        }\n        return num.toFormat(fmt);\n    }\n}\n","import * as React from \"react\";\nimport { ValueBox, IValueBoxProps } from \"ethstats-ui/lib/layout/content/box/ValueBox\";\nimport { Number } from \"ethstats-ui/lib/data/Number\";\nimport { ITheme } from \"app/theme\";\n\nexport interface IUnclesCountBoxProps {\n    children: number;\n    locale: string;\n    variant?: IValueBoxProps[\"variant\"];\n}\n\nexport class UnclesCountBox extends React.Component<IUnclesCountBoxProps> {\n    render() {\n        return (\n            <ValueBox\n                colors={(theme: ITheme) => ({\n                    background: theme.colors.unclesBoxBg,\n                    text: theme.colors.unclesBoxText,\n                    border: theme.colors.unclesBoxBorder\n                })}\n                variant={this.props.variant}\n            >\n                <Number locale={this.props.locale} value={this.props.children} />\n            </ValueBox>\n        );\n    }\n}\n","import { Translation } from \"app/Translation\";\n\nexport function getRelativeTimeTranslations(translation: Translation) {\n    return {\n        future: translation.get(\"general.relativeTime.future\"),\n        past: translation.get(\"general.relativeTime.past\"),\n        s: translation.get(\"general.relativeTime.s\"),\n        ss: translation.get(\"general.relativeTime.ss\"),\n        m: translation.get(\"general.relativeTime.m\"),\n        mm: translation.get(\"general.relativeTime.mm\"),\n        h: translation.get(\"general.relativeTime.h\"),\n        hh: translation.get(\"general.relativeTime.hh\"),\n        d: translation.get(\"general.relativeTime.d\"),\n        dd: translation.get(\"general.relativeTime.dd\"),\n        M: translation.get(\"general.relativeTime.M\"),\n        MM: translation.get(\"general.relativeTime.MM\"),\n        y: translation.get(\"general.relativeTime.y\"),\n        yy: translation.get(\"general.relativeTime.yy\")\n    };\n}\n","import {\n    TimeElapsedBox as TimeElapsedBoxBase,\n    ITimeElapsedBoxProps as ITimeElapsedBoxPropsBase } from \"ethstats-ui/lib/data/box/TimeElapsedBox\";\nimport { Translation } from \"app/Translation\";\nimport React from \"react\";\nimport { getRelativeTimeTranslations } from \"app/helpers/getRelativeTimeTranslations\";\n\nexport interface ITimeElapsedBoxProps\n    extends Pick<ITimeElapsedBoxPropsBase, Exclude<keyof ITimeElapsedBoxPropsBase, \"translations\">> {\n    translation: Translation;\n}\n\nexport class TimeElapsedBox extends React.Component<ITimeElapsedBoxProps> {\n    render() {\n        return <TimeElapsedBoxBase {...this.props}\n            translations={getRelativeTimeTranslations(this.props.translation)} />;\n    }\n}\n","import styled from \"app/styled-components\";\n\ninterface IHighlightSelectBoxProps {\n    disabled?: boolean;\n}\n\nexport const HighlightSelectBox = styled<IHighlightSelectBoxProps, \"div\">(\"div\")`\n    font-size: 12px;\n    height: 28px;\n    text-transform: uppercase;\n    font-weight: bold;\n    padding: 0px 32px 0px 24px;\n    box-sizing: border-box;\n    border: 1px solid ${props => props.theme.colors.selectBoxBorder};\n    border-radius: 4px;\n    background-color: ${props => props.theme.colors.selectBoxBg};\n    vertical-align: middle;\n    line-height: 24px;\n    color: ${props => !props.disabled ? props.theme.colors.selectBoxText : props.theme.colors.selectBoxTextDisabled};\n    cursor: ${props => props.disabled ? \"default\" : \"pointer\"};\n\n    position: relative;\n    &:before {\n        content: \"\";\n        position: absolute;\n\n        border-radius: 50%;\n        background-color: ${props => !props.disabled ?\n            props.theme.colors.selectBoxBubble :\n            props.theme.colors.selectBoxTextDisabled};\n        width: 8px;\n        height: 8px;\n        top: 9px;\n        left: 8px;\n    }\n    &:after {\n        content: \"\";\n        position: absolute;\n\n        top: 10px;\n        right: 11px;\n        border-top: 5px solid ${props => props.theme.colors.selectBoxArrow};\n        border-left: 5px solid transparent;\n        border-right: 5px solid transparent;\n    }\n`;\n","import styled from \"app/styled-components\";\n\nexport const DashboardContentCenter = styled.div`\n    margin: 0 auto;\n    width: 900px;\n    max-width: 100%;\n    text-align: center;\n`;\n","import * as React from \"react\";\nimport styled, { css } from \"app/styled-components\";\nimport { BarChartItemRoot } from \"./BarChartItem\";\n\ninterface IBarChartItemBarProps {\n    active?: boolean;\n    disabled?: boolean;\n    innerRef?(instance: HTMLDivElement): void;\n}\n\n/**\n * TODO: pass color scheme using props\n */\nconst BarChartItemBarRoot = styled<IBarChartItemBarProps, \"div\">(\"div\")`\n    height: 100%;\n    box-sizing: border-box;\n    border: 2px solid ${props => (\n        props.active ?\n        props.theme.colors.blockColorCode :\n        props.theme.colors.blockListItem\n    )};\n    background-color: ${props => (\n        props.active ?\n        props.theme.colors.blockColorCode :\n        props.theme.colors.blockListItem\n    )};\n\n    ${props => !props.disabled && !props.active ? css`\n    ${BarChartItemRoot}:hover & {\n        border: 2px solid ${props.theme.colors.blockColorCode};\n        background-color: transparent;\n    }\n    ` : ``}\n    ${props => props.disabled ? css`\n    opacity: .5;\n    ` : ``}\n`;\n\nexport const BarChartItemBar: React.StatelessComponent<IBarChartItemBarProps> = (props) => (\n    <BarChartItemBarRoot {...props}></BarChartItemBarRoot>\n);\n","import * as React from \"react\";\nimport styled from \"app/styled-components\";\nimport { Tooltip } from \"ethstats-ui/lib/overlay/tooltip/Tooltip\";\nimport { Link } from \"app/components/Link\";\nimport { BarChartItemBar } from \"./BarChartItemBar\";\n\nexport const BarChartItemRoot = styled.div`\n    cursor: pointer;\n`;\n\ninterface IHitBoxProps {\n    maxHeight: number;\n}\n\nconst BarChartItemHitBox = styled<IHitBoxProps, \"div\">(\"div\")`\n    height: ${({maxHeight}) => maxHeight}px;\n    padding-left: 4px;\n    padding-right: 4px;\n    display: flex;\n    align-items: flex-end;\n`;\n\ninterface IWrapperProps {\n    percent: number;\n    maxHeight: number;\n}\n\nconst BarChartItemBarWrapper = styled<IWrapperProps, \"div\">(\"div\")`\n    width: 8px;\n    height: ${props => Math.round(props.percent * props.maxHeight / 100)}px;\n    min-height: 8px;\n`;\n\ninterface IBarChartItemProps {\n    value: number;\n    maxHeight: number;\n    link: string;\n    tooltip: React.ReactNode;\n    active?: boolean;\n}\n\nexport class BarChartItem extends React.Component<IBarChartItemProps> {\n    private barEl: HTMLElement;\n\n    render() {\n        return (\n            <BarChartItemRoot>\n                <Tooltip\n                    placement=\"top\"\n                    nonInteractive\n                    showDelay={0}\n                    hideDelay={0}\n                    offset={10}\n                    referenceElement={() => this.barEl}\n                    content={this.props.tooltip}\n                >\n                    <Link to={this.props.link}>\n                        <BarChartItemHitBox maxHeight={this.props.maxHeight}>\n                            <BarChartItemBarWrapper percent={this.props.value} maxHeight={this.props.maxHeight}>\n                                <BarChartItemBar active={this.props.active} innerRef={ref => this.barEl = ref!} />\n                            </BarChartItemBarWrapper>\n                        </BarChartItemHitBox>\n                    </Link>\n                </Tooltip>\n            </BarChartItemRoot>\n        );\n    }\n}\n","import * as React from \"react\";\nimport styled from \"app/styled-components\";\nimport { BarChartItem } from \"./BarChartItem\";\n\ninterface IBarChartStyleProps {\n    height: number;\n}\n\ninterface IBarChartDataItem<TDataItem> {\n    key: string | number;\n    value?: number;\n    data: TDataItem;\n}\n\ninterface IBarChartProps<TDataItem> extends IBarChartStyleProps {\n    data: IBarChartDataItem<TDataItem>[];\n    tooltipThunk?(d: IBarChartDataItem<TDataItem>): React.ReactNode;\n    linkThunk?(d: IBarChartDataItem<TDataItem>): string;\n    activeThunk?(d: IBarChartDataItem<TDataItem>): boolean;\n    innerRef?(r: any): void;\n}\n\nconst BarChartRoot = styled<IBarChartStyleProps, \"div\">(\"div\")`\n    display: flex;\n    overflow: hidden;\n    height: ${({height}) => height}px;\n    align-items: flex-end;\n    justify-content: center;\n    padding: 16px 8px 20px 8px;\n`;\n\nexport class BarChart<TDataItem> extends React.Component<IBarChartProps<TDataItem>> {\n\n    private getMaxValue() {\n        return this.props.data.reduce((acc, dataItem) => Math.max(acc, !dataItem.value ? 0 : dataItem.value), 0);\n    }\n\n    render() {\n        let maxValue = this.getMaxValue();\n        return (\n            <BarChartRoot height={this.props.height} innerRef={(r) => {\n                if (this.props.innerRef) { this.props.innerRef(r); }\n            }}>\n            {\n                this.props.data.map((d, i) => <BarChartItem\n                    // Make sure each block has a different div, so that tooltips are changed correctly\n                    key={d.key}\n                    value={d.value ? Math.floor(d.value / maxValue * 100) : 0}\n                    maxHeight={this.props.height}\n                    link={this.props.linkThunk ? this.props.linkThunk(d) : \"\"}\n                    tooltip={this.props.tooltipThunk ? this.props.tooltipThunk(d) : null}\n                    active={this.props.activeThunk ? this.props.activeThunk(d) : false}\n                />)\n            }\n            </BarChartRoot>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { CancellationToken, OperationCanceledError } from \"@puzzl/core/lib/async/cancellation\";\nimport { ILogger } from \"app/util/log/ILogger\";\nimport { Translation } from \"app/Translation\";\nimport { IReactionDisposer, reaction, computed, observable } from \"mobx\";\nimport { Task } from \"@puzzl/core/lib/async/Task\";\nimport { BlockValueStore } from \"app/data/block/value/BlockValueStore\";\nimport { IBlockValue } from \"app/data/block/value/IBlockValue\";\nimport { BarChart } from \"app/page/dashboard/barChart/BarChart\";\nimport { BlockNumberBox } from \"app/components/content/box/block/BlockNumberBox\";\nimport { TxCountBox } from \"app/components/content/box/block/TxCountBox\";\nimport { UrlBuilder } from \"app/helpers/UrlBuilder\";\nimport { BlockStateStore } from \"app/data/block/BlockStateStore\";\n\nconst MAX_BLOCKS_SHOWN_COUNT = 50;\n\ninterface IBlockListDashboardProps {\n    blockValueStore: BlockValueStore;\n    blockStateStore: BlockStateStore;\n    translation: Translation;\n    logger: ILogger;\n}\n\n/**\n * TODO: Deduplication: This file is almost identical with AvgTimeInPoolChart.tsx\n * If posible, export and share logic between those two and BlockListAside.tsx\n */\n@observer\nexport class BlockListDashboard extends React.Component<IBlockListDashboardProps> {\n    private wrapperElement: HTMLDivElement | null;\n    private wrapperElementWidth: number;\n    @observable\n    private blocksShownCount: number;\n    @observable.shallow\n    private blockValues: (IBlockValue | undefined)[] = [];\n    private latestValueWatch: IReactionDisposer | undefined;\n    private dataFetchTask: Task<void> | undefined;\n    private urlBuilder: UrlBuilder;\n\n    @computed\n    private get blockRangeStart() {\n        return (this.props.blockStateStore.getLatest() || Infinity) - (this.blocksShownCount - 1);\n    }\n\n    render() {\n        return (\n            <BarChart\n                innerRef={(r) => {\n                    this.wrapperElement = r;\n                    if (r) {\n                        this.wrapperElementWidth = r.clientWidth;\n                    }\n                }}\n                height={80}\n                data={this.blockValues.map((data, idx) => {\n                    let blockNumber = this.blockRangeStart + idx;\n                    return {\n                        key: blockNumber,\n                        value: data ? data.transactionCount : void 0,\n                        data\n                    };\n                })}\n                tooltipThunk={(d) => <div style={{padding: 8, display: \"flex\"}}>\n                    <BlockNumberBox variant=\"small\" noLink>{d.key as number}</BlockNumberBox>\n                    { d.value !== void 0 ?\n                    <TxCountBox variant=\"small\">\n                        {this.props.translation.get(\"blockView.content.blockSummary.txs.label\")\n                            .replace(/%d/, \"\" + d.value)}\n                    </TxCountBox>\n                    : null }\n                </div>}\n                linkThunk={(d) => this.urlBuilder.getBlock(d.key as number)}\n            />\n        );\n    }\n\n    componentDidMount() {\n        this.urlBuilder = new UrlBuilder();\n        window.addEventListener(\"resize\", this.handleResize);\n        this.handleResize();\n        this.setupLatestValueWatch();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.handleResize);\n        this.destroyLatestValueWatch();\n    }\n\n    private setupLatestValueWatch() {\n        this.destroyLatestValueWatch();\n\n        this.latestValueWatch = reaction(\n            () => this.props.blockStateStore.getLatest(),\n            () => {\n                this.handleRangeChange();\n            }\n        );\n    }\n\n    private destroyLatestValueWatch() {\n        if (this.latestValueWatch) {\n            this.latestValueWatch();\n            this.latestValueWatch = void 0;\n        }\n    }\n\n    private handleResize = () => {\n        if (this.wrapperElement) {\n            this.wrapperElementWidth = this.wrapperElement.clientWidth;\n            let computedStyle = getComputedStyle(this.wrapperElement);\n            let lateralSpacing = parseInt(computedStyle.getPropertyValue(\"padding-left\"), 10) +\n                parseInt(computedStyle.getPropertyValue(\"padding-right\"), 10);\n            const maxNumberOfElements = this.wrapperElementWidth ?\n                Math.floor((this.wrapperElementWidth - lateralSpacing) / 16) :\n                12;\n            this.blocksShownCount = Math.min(maxNumberOfElements, MAX_BLOCKS_SHOWN_COUNT);\n        }\n\n        this.handleRangeChange();\n    }\n\n    private handleRangeChange() {\n        if (this.dataFetchTask) {\n            this.dataFetchTask.cancel();\n        }\n        this.dataFetchTask = new Task((cancelToken) => this.fetchData(cancelToken)\n            .catch(e => {\n                if (!(e instanceof OperationCanceledError)) {\n                    throw e;\n                }\n            }));\n        this.dataFetchTask.start()\n            .catch(e => this.props.logger.error(e));\n    }\n\n    private async fetchData(cancelToken: CancellationToken) {\n        let blockRangeEnd = this.blockRangeStart + this.blocksShownCount;\n\n        let blockValues = await this.props.blockValueStore\n            .fetch(this.blockRangeStart, blockRangeEnd);\n\n        /**\n         * If we received a cancellation request, we don't need to cancel the http request,\n         * we just return and don't update the data for rending.\n         */\n        if (cancelToken.isCancelled()) {\n            return;\n        }\n\n        this.blockValues = blockValues;\n    }\n}\n","import * as React from \"react\";\nimport { SelectBox } from \"ethstats-ui/lib/control/SelectBox\";\nimport { HighlightSelectBox } from \"app/page/block/txHighlight/HighlightSelectBox\";\nimport { Radio } from \"ethstats-ui/lib/control/Radio\";\nimport { observer, Observer } from \"mobx-react\";\nimport { Translation } from \"app/Translation\";\nimport { NodeFields } from \"app/page/dashboard/nodeDropdown/NodeFields\";\nimport { NodeStore } from \"app/data/web3/NodeStore\";\nimport { AppConfig } from \"app/AppConfig\";\nimport { UserPreferences } from \"app/UserPreferences\";\n\ninterface INodeSelectorProps {\n    fields: NodeFields;\n    translation: Translation;\n    disabled?: boolean;\n    nodeStore: NodeStore;\n    appConfig: AppConfig;\n    userPreferences: UserPreferences;\n}\n\n@observer\nexport class NodeSelector extends React.Component<INodeSelectorProps> {\n    private requestClose: () => void;\n\n    render() {\n        return (\n            <SelectBox disabled={this.props.disabled} offset={{ left: -20, top: -47 }} render={({ requestClose }) => {\n                this.requestClose = requestClose;\n                return (\n                    <Observer>\n                        {() => this.props.fields.getFields().map((f) => {\n                            return (\n                                <Radio\n                                    id={\"highlight_\" + f.key}\n                                    key={f.key}\n                                    value={f.key}\n                                    name=\"highlight\"\n                                    checked={this.props.fields.getSelectedField().key === f.key}\n                                    onChange={this.onCheckboxChange}\n                                >{f.label}</Radio>\n                            );\n                        })}\n                    </Observer>\n                );\n            }}>\n                <HighlightSelectBox disabled={this.props.disabled}>\n                    {this.props.fields.getSelectedField().label}\n                </HighlightSelectBox>\n            </SelectBox>\n        );\n    }\n\n    private onCheckboxChange = (\n        _e: React.ChangeEvent<HTMLInputElement>,\n        checked: boolean,\n        _name: string,\n        value: string\n    ) => {\n        if (checked) {\n            this.props.fields.setSelectedField(value, this.props.userPreferences);\n            let newSelectedNode = this.props.fields.getSelectedField();\n            this.props.nodeStore.selectedNode = {\n                name: newSelectedNode.label,\n                url: newSelectedNode.value\n            };\n        }\n        this.requestClose();\n    }\n}\n","import * as React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Translation } from \"app/Translation\";\nimport { DashboardContentCenter } from \"app/page/dashboard/DashboardContentCenter\";\nimport styled from \"app/styled-components\";\nimport { BlockListDashboard } from \"app/page/dashboard/BlockListDashboard\";\nimport { ILogger } from \"app/util/log/ILogger\";\nimport { BlockValueStore } from \"app/data/block/value/BlockValueStore\";\nimport { Label } from \"ethstats-ui/lib/data/Label\";\nimport { LayoutRowItem } from \"ethstats-ui/lib/layout/content/LayoutRowItem\";\nimport { BlockNumberBox } from \"app/components/content/box/block/BlockNumberBox\";\nimport { TimeElapsedBox } from \"app/components/content/box/TimeElapsedBox\";\nimport { Clipboard } from \"app/helpers/Clipboard\";\nimport { AppConfig } from \"app/AppConfig\";\nimport { TxCountBox } from \"app/components/content/box/block/TxCountBox\";\nimport { UnclesCountBox } from \"app/components/content/box/block/UnclesCountBox\";\nimport { IBlockDetails } from \"app/data/block/details/IBlockDetails\";\nimport { SearchInline } from \"app/components/toolbar/search/SearchInline\";\nimport { Search } from \"app/data/search/Search\";\nimport { SearchInlineStore } from \"app/data/search/SearchInlineStore\";\nimport { BlockStateStore } from \"app/data/block/BlockStateStore\";\nimport { SearchInlineWrapper } from \"app/components/toolbar/search/SearchInlineWrapper\";\nimport { NodeSelector } from \"app/page/dashboard/nodeDropdown/NodeSelector\";\nimport { NodeFields } from \"app/page/dashboard/nodeDropdown/NodeFields\";\nimport { NodeStore } from \"app/data/web3/NodeStore\";\nimport { UserPreferences } from \"app/UserPreferences\";\n\ninterface IDashboardContentProps {\n    search: Search;\n    searchInlineStore: SearchInlineStore;\n    lastBlock: IBlockDetails;\n    blockValueStore: BlockValueStore;\n    blockStateStore: BlockStateStore;\n    appConfig: AppConfig;\n    translation: Translation;\n    clipboard: Clipboard;\n    logger: ILogger;\n    nodeDropdownItems: NodeFields;\n    nodeStore: NodeStore;\n    userPreferences: UserPreferences;\n}\n\nconst Title = styled.h1`\n    text-align: center;\n\tcolor: #357CFF;\n\tfont-size: 36px;\n\tletter-spacing: 0.23px;\n\tline-height: 43px;\n    font-weight: 300;\n    margin: 14px 0 7px 0;\n`;\n\nconst SubTitle = styled.h2`\n    text-align: center;\n\tcolor: #273656;\n\tfont-size: 16px;\n\tfont-weight: 300;\n\tletter-spacing: 0.2px;\n\tline-height: 19px;\n    margin: 7px 0 14px 0;\n`;\n\nconst DashboardLabel = styled.div`\n    display: flex;\n    height: 48px;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst GithubLink = styled.a`\n\tcolor: #357CFF;\n    opacity: 1;\n    transition: opacity linear 100ms;\n    text-decoration: none;\n\n    &:hover {\n        opacity: 0.8;\n    }\n\n    &:visited {\n        color: #357CFF;\n    }\n`;\n\n@observer\nexport class DashboardContent extends React.Component<IDashboardContentProps> {\n    render() {\n        let { translation: tr, clipboard } = this.props;\n        let locale = this.props.appConfig.getLocale();\n\n        return <DashboardContentCenter>\n            <Title>{ tr.get(\"dashboardView.title\") }</Title>\n            <SubTitle>{tr.get(\"dashboardView.subTitle\")}\n                <GithubLink href=\"https://nepalblockchain.network\"\n                    target=\"_blank\"\n                >\n                    {tr.get(\"dashboardView.github\")}\n                </GithubLink>\n            </SubTitle>\n            <SearchInlineWrapper>\n                <SearchInline\n                    translation={tr} search={this.props.search} searchInlineStore={this.props.searchInlineStore}\n                />\n            </SearchInlineWrapper>\n            <DashboardLabel>\n                <Label>{ tr.get(\"dashboardView.lastBlocksChart.title.label\") }</Label>\n            </DashboardLabel>\n            <BlockListDashboard\n                blockStateStore={this.props.blockStateStore}\n                blockValueStore={this.props.blockValueStore}\n                translation={this.props.translation}\n                logger={this.props.logger}\n            />\n            <div style={{display: \"flex\", justifyContent: \"center\", flexWrap: \"wrap\"}}>\n                <LayoutRowItem>\n                    <NodeSelector nodeStore={this.props.nodeStore} fields={this.props.nodeDropdownItems}\n                    userPreferences={this.props.userPreferences}\n                    translation={tr} appConfig={this.props.appConfig}/>\n                </LayoutRowItem>\n                <LayoutRowItem>\n                    <Label>{ tr.get(\"chainView.content.latestBlock.label\") }</Label>\n                    <BlockNumberBox>{ this.props.lastBlock.id }</BlockNumberBox>\n                </LayoutRowItem>\n                { this.props.lastBlock.creationTime ?\n                <LayoutRowItem>\n                    <Label>{tr.get(\"blockView.content.blockCreationTime.label\")}</Label>\n                    <TimeElapsedBox timestamp={this.props.lastBlock.creationTime}\n                        translation={tr}\n                        nonclickable\n                        locale={locale}\n                        clipboard={clipboard} />\n                </LayoutRowItem>\n                : null }\n                <LayoutRowItem>\n                    <Label>{tr.get(\"blockView.content.transactions.label\")}</Label>\n                    <TxCountBox>{ this.props.lastBlock.transactions.length }</TxCountBox>\n                </LayoutRowItem>\n                <LayoutRowItem>\n                    <Label>{tr.get(\"blockView.content.uncles.label\")}</Label>\n                    <UnclesCountBox locale={locale}>{this.props.lastBlock.uncles.length}</UnclesCountBox>\n                </LayoutRowItem>\n            </div>\n        </DashboardContentCenter>;\n    }\n}\n","import * as React from \"react\";\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\n\nexport interface ICloseSmallIconProps extends ISvgIconProps {\n}\n\nexport class CloseSmallIcon extends React.Component<ICloseSmallIconProps> {\n    render() {\n        return (\n            <SvgIcon {...this.props}>\n                <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n                    <polygon points=\"0 0 24 0 24 24 0 24\"></polygon>\n                    <polygon fill=\"currentColor\" fillRule=\"nonzero\"\n                        // tslint:disable-next-line:max-line-length\n                        points=\"14.8284271 16.2426407 12 13.4142136 9.17157288 16.2426407 7.75735931 14.8284271 10.5857864 12 7.75735931 9.17157288 9.17157288 7.75735931 12 10.5857864 14.8284271 7.75735931 16.2426407 9.17157288 13.4142136 12 16.2426407 14.8284271\"\n                    ></polygon>\n                </g>\n            </SvgIcon>\n        );\n    }\n}\n","import * as React from \"react\";\nimport styled from \"../styled-components\";\nimport { CloseSmallIcon } from \"../icon/CloseSmallIcon\";\n\ninterface IModalSelectBox {\n    onClose(): void;\n}\n\nconst CloseButton = styled.div`\n    cursor: pointer;\n    line-height: 1;\n    color: ${({theme}) => theme.colors.closeBtn};\n`;\nconst ModalSelectBoxWrapper = styled.div`\n    padding: 16px;\n    border-radius: 8px;\n    background-color: ${props => props.theme.colors.overlayBg};\n    border: 1px solid #D0DEF2;\n    box-shadow: 0 2px 4px 0 rgba(51,69,100,0.07), 0 6px 16px 0 rgba(51,69,100,0.08);\n`;\n\nexport class ModalSelectBox extends React.Component<IModalSelectBox> {\n    render() {\n        return (\n            <ModalSelectBoxWrapper>\n                <div style={{padding: \"4px\"}}>\n                    <CloseButton onClick={this.props.onClose}>\n                        <CloseSmallIcon />\n                    </CloseButton>\n                </div>\n                { this.props.children }\n            </ModalSelectBoxWrapper>\n        );\n    }\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport styled from \"../styled-components\";\nimport { Manager, Reference, Popper} from \"react-popper\";\nimport { observer } from \"mobx-react\";\nimport { observable } from \"mobx\";\nimport { ModalSelectBox } from \"./ModalSelectBox\";\n\nexport interface ISelectBoxOffset {\n    left: number;\n    top: number;\n}\n\ninterface ISelectBoxProps {\n    disabled?: boolean;\n    // string in format \"left, top\"\n    offset?: ISelectBoxOffset;\n    render(args: {requestClose(): void}): React.ReactNode;\n}\nconst Overlay = styled.div`\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n`;\n\n@observer\nexport class SelectBox extends React.Component<ISelectBoxProps> {\n\n    @observable\n    private isOpened = false;\n\n    render() {\n        let { disabled } = this.props;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ref}) =>\n                        <div ref={ref} onClick={!disabled ? this.openSelectBox : void 0} style={{\n                            cursor: !disabled ? \"pointer\" : \"default\"\n                        }}>\n                            { this.props.children }\n                        </div>\n                    }\n                </Reference>\n                {this.isOpened ?\n                ReactDOM.createPortal(\n                    <>\n                        <Overlay onClick={this.closeSelectBox} />\n                        <Popper modifiers={{\n                            offset: {\n                                offset: this.props.offset ?\n                                    this.props.offset.left + \"px, \" + this.props.offset.top + \"px\" :\n                                    \"auto\"\n                            },\n                            flip: {\n                                enabled: false\n                            },\n                            preventOverflow: {\n                                enabled: true\n                            },\n                            hide: {\n                                enabled: false\n                            }\n                        }} placement=\"bottom-start\">\n                            {({ref, placement, style}) => (\n                                <div ref={ref} data-placement={placement} style={style}>\n                                    <ModalSelectBox onClose={this.closeSelectBox}>\n                                        { this.props.render({requestClose: this.closeSelectBox}) }\n                                    </ModalSelectBox>\n                                </div>\n                            )}\n                        </Popper>\n                    </>,\n                    document.body\n                )\n                : null }\n            </Manager>\n        );\n    }\n\n    private openSelectBox = () => {\n        this.isOpened = true;\n    }\n\n    private closeSelectBox = () => {\n        this.isOpened = false;\n    }\n}\n","import * as React from \"react\";\nimport styled from \"../../styled-components\";\nimport { ILayoutRowItemProps } from \"./LayoutRowItem\";\n\ninterface ILayoutBoxItemProps extends ILayoutRowItemProps {\n    className?: string;\n}\n\nconst $LayoutBoxItem: React.StatelessComponent<ILayoutBoxItemProps> = ({ children, className }) => (\n    <div className={className}>{children}</div>\n);\nexport const LayoutBoxItem = styled($LayoutBoxItem)`\n    display: flex;\n    align-items: center;\n    /* put this to auto for tx alignment */\n    height: ${({autoHeight, baseHeight}) => autoHeight ? \"auto\" : (baseHeight ? baseHeight + \"px\" : \"48px\")};\n    padding: 0 8px;\n    /* flex: 0 0 auto; put this to 1 1 for tx wrapping */\n    flex: ${({autoHeight}) => autoHeight ? \"1 1\" : \"0 0\"} auto;\n    width: ${props => (props.isBeginningOfRow && !props.autoWidth ? \"200px\" : \"auto\")};\n    justify-content: ${props => (\n        props.justifyContent ? props.justifyContent : (props.isBeginningOfRow ? \"flex-end\" : \"inherit\")\n    )};\n\n    @media ${props => props.theme.mediaQueries.breakPoints.smallerThanFullView} {\n        width: auto;\n        min-width: ${props => (props.isBeginningOfRow && !props.autoWidth ? \"125px\" : \"auto\")};\n    }\n\n    @media ${props => props.theme.mediaQueries.breakPoints.lessThan620px} {\n        width: auto;\n        min-width: ${props => (props.isBeginningOfRow && !props.autoWidth ? \"95px\" : \"auto\")};\n    }\n`;\n","import * as React from \"react\";\nimport styled from \"../../styled-components\";\nimport { LayoutBoxItem } from \"./LayoutBoxItem\";\nimport * as ReactIs from \"react-is\";\n\ninterface ILayoutRowItemWrapperProps {\n    fullRow?: boolean;\n    className?: string;\n}\n\nconst $LayoutRowItemWrapper: React.StatelessComponent<ILayoutRowItemWrapperProps> = ({\n    children,\n    className\n}) => (\n    <div className={className}>{children}</div>\n);\n\nconst LayoutRowItemWrapper = styled($LayoutRowItemWrapper)`\n    display: flex;\n    flex: ${props => props.fullRow ? \"1 1\" : \"0 0\"} auto;\n`;\n\ninterface ILayoutInfoBoxItemProps {\n    fullRow?: boolean;\n    className?: string;\n}\nconst $LayoutInfoBoxItem: React.StatelessComponent<ILayoutInfoBoxItemProps> = ({\n    children,\n    className\n}) => (\n    <div className={className}>{children}</div>\n);\nconst LayoutInfoBoxItem = styled($LayoutInfoBoxItem)`\n    display: flex;\n    flex: ${({fullRow}) => fullRow ? \"1 1\" : \"0 1\"} auto;\n    flex-wrap: wrap;\n`;\n\nexport interface ILayoutRowItemProps {\n    isBeginningOfRow?: boolean;\n    ignoreFirstLabel?: boolean;\n    fullRow?: boolean;\n    baseHeight?: number;\n    autoHeight?: boolean;\n    autoWidth?: boolean;\n    justifyContent?: string;\n}\n\nexport class LayoutRowItem extends React.PureComponent<ILayoutRowItemProps> {\n    static _brand = \"layoutRowItem\";\n    render() {\n        const childrenArray = React.Children.toArray(this.props.children)\n            .reduce((outArr, child) => {\n                if (ReactIs.isFragment(child)) {\n                    outArr.push(...React.Children.map((child.props as React.Props<{}>).children, c => {\n                        if (!ReactIs.isElement(c)) {\n                            // tslint:disable-next-line:no-console\n                            console.error(\n                                `Fragment passed to LayoutRowItem contains a child that is not a React.Element.`, c);\n                            return c;\n                        }\n                        return React.cloneElement(c, {});\n                    }));\n                } else {\n                    outArr.push(child);\n                }\n                return outArr;\n            }, [] as React.ReactChild[]);\n\n        const labelElement = childrenArray.shift();\n        return (\n            <LayoutRowItemWrapper fullRow={this.props.fullRow}>\n                { this.props.ignoreFirstLabel ? null :\n                    <LayoutBoxItem isBeginningOfRow={this.props.isBeginningOfRow} baseHeight={this.props.baseHeight}\n                        autoWidth={this.props.autoWidth}>\n                        { labelElement }\n                    </LayoutBoxItem>\n                }\n                { childrenArray.length === 1 ?\n                    this.childrenArrayRender(childrenArray) :\n                    <LayoutInfoBoxItem fullRow={this.props.fullRow}>\n                        { this.childrenArrayRender(childrenArray) }\n                    </LayoutInfoBoxItem>\n                }\n            </LayoutRowItemWrapper>\n        );\n    }\n\n    private childrenArrayRender(children: React.ReactChild[]) {\n        return children.map((c, idx) => {\n            return (\n                <LayoutBoxItem baseHeight={this.props.baseHeight} autoHeight={this.props.autoHeight}\n                    autoWidth={this.props.autoWidth} key={idx}\n                >\n                    { c }\n                </LayoutBoxItem>\n            );\n        });\n    }\n}\n"],"sourceRoot":""}