{"version":3,"sources":["webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/monaco-editor/esm/vs/language/json/workerManager.js","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/monaco-editor/esm/vs/language/json/languageFeatures.js","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/format.js","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/parser.js","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/edit.js","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/monaco-editor/esm/vs/language/json/tokenization.js","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/monaco-editor/esm/vs/language/json/jsonMode.js"],"names":["STOP_WHEN_IDLE_FOR","WorkerManager","defaults","_this","this","_defaults","_worker","_idleCheckInterval","setInterval","_checkIfIdle","_lastUsedTime","_configChangeListener","onDidChange","_stopWorker","prototype","dispose","_client","clearInterval","timePassedSinceLastUsed","Date","now","_getClient","monaco","editor","createWebWorker","moduleId","label","languageId","createData","languageSettings","diagnosticsOptions","enableSchemaRequest","getProxy","getLanguageServiceWorker","resources","_i","arguments","length","then","client","_","withSyncedResources","Position","create","line","character","is","value","candidate","Is","objectLiteral","number","Range","one","two","three","four","start","end","Error","Location","uri","range","defined","string","undefined","LocationLink","targetUri","targetRange","targetSelectionRange","originSelectionRange","Color","red","green","blue","alpha","ColorInformation","color","ColorPresentation","textEdit","additionalTextEdits","TextEdit","typedArray","FoldingRangeKind","FoldingRange","startLine","endLine","startCharacter","endCharacter","kind","result","DiagnosticRelatedInformation","location","message","DiagnosticSeverity","Warning","Information","Hint","Diagnostic","severity","code","source","relatedInformation","Command","title","command","args","replace","newText","insert","position","del","TextDocumentEdit","textDocument","edits","VersionedTextDocumentIdentifier","Array","isArray","CreateFile","options","overwrite","ignoreIfExists","boolean","RenameFile","oldUri","newUri","DeleteFile","recursive","ignoreIfNotExists","WorkspaceEdit","changes","documentChanges","every","change","TextEditChangeImpl","push","delete","add","edit","all","clear","splice","WorkspaceChange","workspaceEdit","_textEditChanges","Object","_workspaceEdit","forEach","textEditChange","keys","key","defineProperty","get","enumerable","configurable","getTextEditChange","textDocumentEdit","createFile","checkDocumentChanges","renameFile","deleteFile","TextDocumentIdentifier","version","TextDocumentItem","text","MarkupKind","PlainText","Markdown","MarkupContent","CompletionItemKind","Text","Method","Function","Constructor","Field","Variable","Class","Interface","Module","Property","Unit","Value","Enum","Keyword","Snippet","File","Reference","Folder","EnumMember","Constant","Struct","Event","Operator","TypeParameter","InsertTextFormat","CompletionItem","CompletionList","items","isIncomplete","MarkedString","fromPlainText","plainText","language","Hover","contents","ParameterInformation","documentation","SignatureInformation","parameters","DocumentHighlightKind","Read","Write","DocumentHighlight","SymbolKind","Namespace","Package","String","Number","Boolean","Key","Null","SymbolInformation","name","containerName","DocumentSymbol","detail","selectionRange","children","deprecated","CodeActionKind","QuickFix","Refactor","RefactorExtract","RefactorInline","RefactorRewrite","Source","SourceOrganizeImports","CodeActionContext","diagnostics","only","CodeAction","commandOrEdit","CodeLens","data","FormattingOptions","tabSize","insertSpaces","DocumentLink","target","EOL","TextDocument","content","FullTextDocument","lineCount","func","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","mergeSort","a","b","diff","lastModifiedOffset","i","e","startOffset","endOffset","substring","compare","p","left","slice","right","leftIdx","rightIdx","ret","TextDocumentSaveReason","Manual","AfterDelay","FocusOut","_uri","_languageId","_version","_content","_lineOffsets","update","event","getLineOffsets","lineOffsets","isLineStart","ch","charAt","offset","Math","max","min","low","high","mid","floor","lineOffset","nextLineOffset","toString","call","check","Uri","languageFeatures_Range","DiagnosticsAdapter","_disposables","_listener","onModelAdd","model","modeId","getModeId","handle","onDidChangeContent","clearTimeout","setTimeout","_doValidate","onModelRemoved","setModelMarkers","uriStr","listener","onDidCreateModel","onWillDisposeModel","_resetSchema","onDidChangeModelLanguage","getModels","d","resource","worker","resetSchema","doValidation","markers","map","toDiagnostics","getModel","err","console","error","toSeverity","lsSeverity","MarkerSeverity","Info","diag","startLineNumber","startColumn","endLineNumber","endColumn","fromPosition","column","lineNumber","fromRange","toRange","toCompletionItemKind","mItemKind","languages","fromCompletionItemKind","toTextEdit","languageFeatures_CompletionAdapter","CompletionAdapter","provideCompletionItems","context","token","doComplete","info","wordInfo","getWordUntilPosition","wordRange","entry","item","insertText","sortText","filterText","insertTextFormat","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","suggestions","isMarkupContent","thing","toMarkdownString","toMarkedStringArray","HoverAdapter","provideHover","doHover","toLocation","parse","toSymbolKind","mKind","DocumentSymbolAdapter","provideDocumentSymbols","findDocumentSymbols","fromFormattingOptions","DocumentFormattingEditProvider","provideDocumentFormattingEdits","format","DocumentRangeFormattingEditProvider","provideDocumentRangeFormattingEdits","DocumentColorAdapter","provideDocumentColors","findDocumentColors","infos","provideColorPresentations","getColorPresentations","presentations","presentation","FoldingRangeAdapter","provideFoldingRanges","ranges","toFoldingRangeKind","Comment","Imports","Region","createScanner","ignoreTrivia","pos","len","tokenOffset","scanError","scanHexDigits","count","exact","digits","charCodeAt","setPosition","newPosition","scanNumber","isDigit","scanString","ch_1","fromCharCode","isLineBreak","scanNext","isWhiteSpace","safeLength","commentClosed","isUnknownContentCharacter","scanNextNonTrivia","getPosition","scan","getToken","getTokenValue","getTokenOffset","getTokenLength","getTokenError","documentText","initialIndentLevel","formatText","formatTextStart","rangeStart","rangeEnd","isEOL","computeIndentLevel","eol","getEOL","lineBreak","indentLevel","indentValue","repeat","scanner","hasError","newLineAndIndent","editOperations","addEdit","firstToken","firstTokenStart","initialIndent","firstTokenEnd","secondToken","replaceContent","commentTokenStart","secondTokenStart","s","nChars","indexOf","ParseOptions","DEFAULT","allowTrailingComma","getLocation","segments","earlyReturnException","previousNode","previousNodeInst","type","parent","isAtPropertyKey","setPreviousNode","colonOffset","visit","onObjectBegin","onObjectProperty","onObjectEnd","pop","onArrayBegin","onArrayEnd","onLiteralValue","getLiteralNodeType","onSeparator","sep","last","path","matches","pattern","k","errors","currentProperty","currentParent","previousParents","onValue","visitor","object","array","onError","parseTree","ensurePropertyComplete","valueNode","findNodeAtLocation","root","node","path_1","segment","found","_a","_b","propertyNode","index","getNodePath","getNodeValue","obj","prop","contains","includeRightBound","findNodeAtOffset","_scanner","toNoArgVisit","visitFunction","toOneArgVisit","arg","onComment","disallowComments","handleError","skipUntilAfter","skipUntil","parseString","isValue","parseLiteral","JSON","parseProperty","parseValue","parseObject","needsComma","parseArray","stripComments","replaceCh","parts","join","removeProperty","formattingOptions","setProperty","originalPath","getInsertionIndex","lastSegment","existing","propertyIndex","removeBegin","removeEnd","previous","next","withFormatting","stringify","newProperty","insertIndex","removalIndex","toRemove","parentEndOffset","applyEdit","begin","edit_1","editLength","isWS","main_createScanner","main_getLocation","main_parse","main_parseTree","main_findNodeAtLocation","main_findNodeAtOffset","main_getNodePath","main_getNodeValue","main_visit","main_stripComments","printParseErrorCode","main_format","modify","createTokenizationSupport","supportComments","getInitialState","JSONState","tokenize","state","offsetDelta","stopAtOffset","TOKEN_DELIM_OBJECT","TOKEN_DELIM_ARRAY","TOKEN_DELIM_COLON","TOKEN_DELIM_COMMA","TOKEN_VALUE_BOOLEAN","TOKEN_VALUE_NULL","TOKEN_VALUE_STRING","TOKEN_VALUE_NUMBER","TOKEN_PROPERTY_NAME","TOKEN_COMMENT_BLOCK","TOKEN_COMMENT_LINE","lastWasColon","_state","clone","equals","other","getStateData","setStateData","comments","numberOfInsertedCharacters","adjustOffset","tokens","endState","substr","startIndex","scopes","__webpack_require__","__webpack_exports__","setupMode","disposables","uris","apply","registerCompletionItemProvider","registerHoverProvider","registerDocumentSymbolProvider","registerDocumentFormattingEditProvider","registerDocumentRangeFormattingEditProvider","setTokensProvider","setLanguageConfiguration","richEditConfiguration","registerColorProvider","registerFoldingRangeProvider","wordPattern","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn"],"mappings":"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","file":"js/875e69f93c586f92fe32.bundle.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nvar STOP_WHEN_IDLE_FOR = 2 * 60 * 1000; // 2min\nvar WorkerManager = /** @class */ (function () {\n    function WorkerManager(defaults) {\n        var _this = this;\n        this._defaults = defaults;\n        this._worker = null;\n        this._idleCheckInterval = setInterval(function () { return _this._checkIfIdle(); }, 30 * 1000);\n        this._lastUsedTime = 0;\n        this._configChangeListener = this._defaults.onDidChange(function () { return _this._stopWorker(); });\n    }\n    WorkerManager.prototype._stopWorker = function () {\n        if (this._worker) {\n            this._worker.dispose();\n            this._worker = null;\n        }\n        this._client = null;\n    };\n    WorkerManager.prototype.dispose = function () {\n        clearInterval(this._idleCheckInterval);\n        this._configChangeListener.dispose();\n        this._stopWorker();\n    };\n    WorkerManager.prototype._checkIfIdle = function () {\n        if (!this._worker) {\n            return;\n        }\n        var timePassedSinceLastUsed = Date.now() - this._lastUsedTime;\n        if (timePassedSinceLastUsed > STOP_WHEN_IDLE_FOR) {\n            this._stopWorker();\n        }\n    };\n    WorkerManager.prototype._getClient = function () {\n        this._lastUsedTime = Date.now();\n        if (!this._client) {\n            this._worker = monaco.editor.createWebWorker({\n                // module that exports the create() method and returns a `JSONWorker` instance\n                moduleId: 'vs/language/json/jsonWorker',\n                label: this._defaults.languageId,\n                // passed in to the create() method\n                createData: {\n                    languageSettings: this._defaults.diagnosticsOptions,\n                    languageId: this._defaults.languageId,\n                    enableSchemaRequest: this._defaults.diagnosticsOptions.enableSchemaRequest\n                }\n            });\n            this._client = this._worker.getProxy();\n        }\n        return this._client;\n    };\n    WorkerManager.prototype.getLanguageServiceWorker = function () {\n        var _this = this;\n        var resources = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            resources[_i] = arguments[_i];\n        }\n        var _client;\n        return this._getClient().then(function (client) {\n            _client = client;\n        }).then(function (_) {\n            return _this._worker.withSyncedResources(resources);\n        }).then(function (_) { return _client; });\n    };\n    return WorkerManager;\n}());\nexport { WorkerManager };\n","/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n'use strict';\r\n/**\r\n * The Position namespace provides helper functions to work with\r\n * [Position](#Position) literals.\r\n */\r\nexport var Position;\r\n(function (Position) {\r\n    /**\r\n     * Creates a new Position literal from the given line and character.\r\n     * @param line The position's line.\r\n     * @param character The position's character.\r\n     */\r\n    function create(line, character) {\r\n        return { line: line, character: character };\r\n    }\r\n    Position.create = create;\r\n    /**\r\n     * Checks whether the given liternal conforms to the [Position](#Position) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(candidate) && Is.number(candidate.line) && Is.number(candidate.character);\r\n    }\r\n    Position.is = is;\r\n})(Position || (Position = {}));\r\n/**\r\n * The Range namespace provides helper functions to work with\r\n * [Range](#Range) literals.\r\n */\r\nexport var Range;\r\n(function (Range) {\r\n    function create(one, two, three, four) {\r\n        if (Is.number(one) && Is.number(two) && Is.number(three) && Is.number(four)) {\r\n            return { start: Position.create(one, two), end: Position.create(three, four) };\r\n        }\r\n        else if (Position.is(one) && Position.is(two)) {\r\n            return { start: one, end: two };\r\n        }\r\n        else {\r\n            throw new Error(\"Range#create called with invalid arguments[\" + one + \", \" + two + \", \" + three + \", \" + four + \"]\");\r\n        }\r\n    }\r\n    Range.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Range](#Range) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\r\n    }\r\n    Range.is = is;\r\n})(Range || (Range = {}));\r\n/**\r\n * The Location namespace provides helper functions to work with\r\n * [Location](#Location) literals.\r\n */\r\nexport var Location;\r\n(function (Location) {\r\n    /**\r\n     * Creates a Location literal.\r\n     * @param uri The location's uri.\r\n     * @param range The location's range.\r\n     */\r\n    function create(uri, range) {\r\n        return { uri: uri, range: range };\r\n    }\r\n    Location.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Location](#Location) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\r\n    }\r\n    Location.is = is;\r\n})(Location || (Location = {}));\r\n/**\r\n * The LocationLink namespace provides helper functions to work with\r\n * [LocationLink](#LocationLink) literals.\r\n */\r\nexport var LocationLink;\r\n(function (LocationLink) {\r\n    /**\r\n     * Creates a LocationLink literal.\r\n     * @param targetUri The definition's uri.\r\n     * @param targetRange The full range of the definition.\r\n     * @param targetSelectionRange The span of the symbol definition at the target.\r\n     * @param originSelectionRange The span of the symbol being defined in the originating source file.\r\n     */\r\n    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {\r\n        return { targetUri: targetUri, targetRange: targetRange, targetSelectionRange: targetSelectionRange, originSelectionRange: originSelectionRange };\r\n    }\r\n    LocationLink.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [LocationLink](#LocationLink) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)\r\n            && (Range.is(candidate.targetSelectionRange) || Is.undefined(candidate.targetSelectionRange))\r\n            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));\r\n    }\r\n    LocationLink.is = is;\r\n})(LocationLink || (LocationLink = {}));\r\n/**\r\n * The Color namespace provides helper functions to work with\r\n * [Color](#Color) literals.\r\n */\r\nexport var Color;\r\n(function (Color) {\r\n    /**\r\n     * Creates a new Color literal.\r\n     */\r\n    function create(red, green, blue, alpha) {\r\n        return {\r\n            red: red,\r\n            green: green,\r\n            blue: blue,\r\n            alpha: alpha,\r\n        };\r\n    }\r\n    Color.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Color](#Color) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.number(candidate.red)\r\n            && Is.number(candidate.green)\r\n            && Is.number(candidate.blue)\r\n            && Is.number(candidate.alpha);\r\n    }\r\n    Color.is = is;\r\n})(Color || (Color = {}));\r\n/**\r\n * The ColorInformation namespace provides helper functions to work with\r\n * [ColorInformation](#ColorInformation) literals.\r\n */\r\nexport var ColorInformation;\r\n(function (ColorInformation) {\r\n    /**\r\n     * Creates a new ColorInformation literal.\r\n     */\r\n    function create(range, color) {\r\n        return {\r\n            range: range,\r\n            color: color,\r\n        };\r\n    }\r\n    ColorInformation.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Range.is(candidate.range) && Color.is(candidate.color);\r\n    }\r\n    ColorInformation.is = is;\r\n})(ColorInformation || (ColorInformation = {}));\r\n/**\r\n * The Color namespace provides helper functions to work with\r\n * [ColorPresentation](#ColorPresentation) literals.\r\n */\r\nexport var ColorPresentation;\r\n(function (ColorPresentation) {\r\n    /**\r\n     * Creates a new ColorInformation literal.\r\n     */\r\n    function create(label, textEdit, additionalTextEdits) {\r\n        return {\r\n            label: label,\r\n            textEdit: textEdit,\r\n            additionalTextEdits: additionalTextEdits,\r\n        };\r\n    }\r\n    ColorPresentation.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.string(candidate.label)\r\n            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))\r\n            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\r\n    }\r\n    ColorPresentation.is = is;\r\n})(ColorPresentation || (ColorPresentation = {}));\r\n/**\r\n * Enum of known range kinds\r\n */\r\nexport var FoldingRangeKind;\r\n(function (FoldingRangeKind) {\r\n    /**\r\n     * Folding range for a comment\r\n     */\r\n    FoldingRangeKind[\"Comment\"] = \"comment\";\r\n    /**\r\n     * Folding range for a imports or includes\r\n     */\r\n    FoldingRangeKind[\"Imports\"] = \"imports\";\r\n    /**\r\n     * Folding range for a region (e.g. `#region`)\r\n     */\r\n    FoldingRangeKind[\"Region\"] = \"region\";\r\n})(FoldingRangeKind || (FoldingRangeKind = {}));\r\n/**\r\n * The folding range namespace provides helper functions to work with\r\n * [FoldingRange](#FoldingRange) literals.\r\n */\r\nexport var FoldingRange;\r\n(function (FoldingRange) {\r\n    /**\r\n     * Creates a new FoldingRange literal.\r\n     */\r\n    function create(startLine, endLine, startCharacter, endCharacter, kind) {\r\n        var result = {\r\n            startLine: startLine,\r\n            endLine: endLine\r\n        };\r\n        if (Is.defined(startCharacter)) {\r\n            result.startCharacter = startCharacter;\r\n        }\r\n        if (Is.defined(endCharacter)) {\r\n            result.endCharacter = endCharacter;\r\n        }\r\n        if (Is.defined(kind)) {\r\n            result.kind = kind;\r\n        }\r\n        return result;\r\n    }\r\n    FoldingRange.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [FoldingRange](#FoldingRange) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.number(candidate.startLine) && Is.number(candidate.startLine)\r\n            && (Is.undefined(candidate.startCharacter) || Is.number(candidate.startCharacter))\r\n            && (Is.undefined(candidate.endCharacter) || Is.number(candidate.endCharacter))\r\n            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\r\n    }\r\n    FoldingRange.is = is;\r\n})(FoldingRange || (FoldingRange = {}));\r\n/**\r\n * The DiagnosticRelatedInformation namespace provides helper functions to work with\r\n * [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) literals.\r\n */\r\nexport var DiagnosticRelatedInformation;\r\n(function (DiagnosticRelatedInformation) {\r\n    /**\r\n     * Creates a new DiagnosticRelatedInformation literal.\r\n     */\r\n    function create(location, message) {\r\n        return {\r\n            location: location,\r\n            message: message\r\n        };\r\n    }\r\n    DiagnosticRelatedInformation.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\r\n    }\r\n    DiagnosticRelatedInformation.is = is;\r\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\r\n/**\r\n * The diagnostic's severity.\r\n */\r\nexport var DiagnosticSeverity;\r\n(function (DiagnosticSeverity) {\r\n    /**\r\n     * Reports an error.\r\n     */\r\n    DiagnosticSeverity.Error = 1;\r\n    /**\r\n     * Reports a warning.\r\n     */\r\n    DiagnosticSeverity.Warning = 2;\r\n    /**\r\n     * Reports an information.\r\n     */\r\n    DiagnosticSeverity.Information = 3;\r\n    /**\r\n     * Reports a hint.\r\n     */\r\n    DiagnosticSeverity.Hint = 4;\r\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\r\n/**\r\n * The Diagnostic namespace provides helper functions to work with\r\n * [Diagnostic](#Diagnostic) literals.\r\n */\r\nexport var Diagnostic;\r\n(function (Diagnostic) {\r\n    /**\r\n     * Creates a new Diagnostic literal.\r\n     */\r\n    function create(range, message, severity, code, source, relatedInformation) {\r\n        var result = { range: range, message: message };\r\n        if (Is.defined(severity)) {\r\n            result.severity = severity;\r\n        }\r\n        if (Is.defined(code)) {\r\n            result.code = code;\r\n        }\r\n        if (Is.defined(source)) {\r\n            result.source = source;\r\n        }\r\n        if (Is.defined(relatedInformation)) {\r\n            result.relatedInformation = relatedInformation;\r\n        }\r\n        return result;\r\n    }\r\n    Diagnostic.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Diagnostic](#Diagnostic) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate)\r\n            && Range.is(candidate.range)\r\n            && Is.string(candidate.message)\r\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\r\n            && (Is.number(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\r\n            && (Is.string(candidate.source) || Is.undefined(candidate.source))\r\n            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\r\n    }\r\n    Diagnostic.is = is;\r\n})(Diagnostic || (Diagnostic = {}));\r\n/**\r\n * The Command namespace provides helper functions to work with\r\n * [Command](#Command) literals.\r\n */\r\nexport var Command;\r\n(function (Command) {\r\n    /**\r\n     * Creates a new Command literal.\r\n     */\r\n    function create(title, command) {\r\n        var args = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            args[_i - 2] = arguments[_i];\r\n        }\r\n        var result = { title: title, command: command };\r\n        if (Is.defined(args) && args.length > 0) {\r\n            result.arguments = args;\r\n        }\r\n        return result;\r\n    }\r\n    Command.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Command](#Command) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\r\n    }\r\n    Command.is = is;\r\n})(Command || (Command = {}));\r\n/**\r\n * The TextEdit namespace provides helper function to create replace,\r\n * insert and delete edits more easily.\r\n */\r\nexport var TextEdit;\r\n(function (TextEdit) {\r\n    /**\r\n     * Creates a replace text edit.\r\n     * @param range The range of text to be replaced.\r\n     * @param newText The new text.\r\n     */\r\n    function replace(range, newText) {\r\n        return { range: range, newText: newText };\r\n    }\r\n    TextEdit.replace = replace;\r\n    /**\r\n     * Creates a insert text edit.\r\n     * @param position The position to insert the text at.\r\n     * @param newText The text to be inserted.\r\n     */\r\n    function insert(position, newText) {\r\n        return { range: { start: position, end: position }, newText: newText };\r\n    }\r\n    TextEdit.insert = insert;\r\n    /**\r\n     * Creates a delete text edit.\r\n     * @param range The range of text to be deleted.\r\n     */\r\n    function del(range) {\r\n        return { range: range, newText: '' };\r\n    }\r\n    TextEdit.del = del;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(candidate)\r\n            && Is.string(candidate.newText)\r\n            && Range.is(candidate.range);\r\n    }\r\n    TextEdit.is = is;\r\n})(TextEdit || (TextEdit = {}));\r\n/**\r\n * The TextDocumentEdit namespace provides helper function to create\r\n * an edit that manipulates a text document.\r\n */\r\nexport var TextDocumentEdit;\r\n(function (TextDocumentEdit) {\r\n    /**\r\n     * Creates a new `TextDocumentEdit`\r\n     */\r\n    function create(textDocument, edits) {\r\n        return { textDocument: textDocument, edits: edits };\r\n    }\r\n    TextDocumentEdit.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate)\r\n            && VersionedTextDocumentIdentifier.is(candidate.textDocument)\r\n            && Array.isArray(candidate.edits);\r\n    }\r\n    TextDocumentEdit.is = is;\r\n})(TextDocumentEdit || (TextDocumentEdit = {}));\r\nexport var CreateFile;\r\n(function (CreateFile) {\r\n    function create(uri, options) {\r\n        var result = {\r\n            kind: 'create',\r\n            uri: uri\r\n        };\r\n        if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {\r\n            result.options = options;\r\n        }\r\n        return result;\r\n    }\r\n    CreateFile.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) &&\r\n            (candidate.options === void 0 ||\r\n                ((candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))));\r\n    }\r\n    CreateFile.is = is;\r\n})(CreateFile || (CreateFile = {}));\r\nexport var RenameFile;\r\n(function (RenameFile) {\r\n    function create(oldUri, newUri, options) {\r\n        var result = {\r\n            kind: 'rename',\r\n            oldUri: oldUri,\r\n            newUri: newUri\r\n        };\r\n        if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {\r\n            result.options = options;\r\n        }\r\n        return result;\r\n    }\r\n    RenameFile.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) &&\r\n            (candidate.options === void 0 ||\r\n                ((candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))));\r\n    }\r\n    RenameFile.is = is;\r\n})(RenameFile || (RenameFile = {}));\r\nexport var DeleteFile;\r\n(function (DeleteFile) {\r\n    function create(uri, options) {\r\n        var result = {\r\n            kind: 'delete',\r\n            uri: uri\r\n        };\r\n        if (options !== void 0 && (options.recursive !== void 0 || options.ignoreIfNotExists !== void 0)) {\r\n            result.options = options;\r\n        }\r\n        return result;\r\n    }\r\n    DeleteFile.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) &&\r\n            (candidate.options === void 0 ||\r\n                ((candidate.options.recursive === void 0 || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === void 0 || Is.boolean(candidate.options.ignoreIfNotExists))));\r\n    }\r\n    DeleteFile.is = is;\r\n})(DeleteFile || (DeleteFile = {}));\r\nexport var WorkspaceEdit;\r\n(function (WorkspaceEdit) {\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate &&\r\n            (candidate.changes !== void 0 || candidate.documentChanges !== void 0) &&\r\n            (candidate.documentChanges === void 0 || candidate.documentChanges.every(function (change) {\r\n                if (Is.string(change.kind)) {\r\n                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);\r\n                }\r\n                else {\r\n                    return TextDocumentEdit.is(change);\r\n                }\r\n            }));\r\n    }\r\n    WorkspaceEdit.is = is;\r\n})(WorkspaceEdit || (WorkspaceEdit = {}));\r\nvar TextEditChangeImpl = /** @class */ (function () {\r\n    function TextEditChangeImpl(edits) {\r\n        this.edits = edits;\r\n    }\r\n    TextEditChangeImpl.prototype.insert = function (position, newText) {\r\n        this.edits.push(TextEdit.insert(position, newText));\r\n    };\r\n    TextEditChangeImpl.prototype.replace = function (range, newText) {\r\n        this.edits.push(TextEdit.replace(range, newText));\r\n    };\r\n    TextEditChangeImpl.prototype.delete = function (range) {\r\n        this.edits.push(TextEdit.del(range));\r\n    };\r\n    TextEditChangeImpl.prototype.add = function (edit) {\r\n        this.edits.push(edit);\r\n    };\r\n    TextEditChangeImpl.prototype.all = function () {\r\n        return this.edits;\r\n    };\r\n    TextEditChangeImpl.prototype.clear = function () {\r\n        this.edits.splice(0, this.edits.length);\r\n    };\r\n    return TextEditChangeImpl;\r\n}());\r\n/**\r\n * A workspace change helps constructing changes to a workspace.\r\n */\r\nvar WorkspaceChange = /** @class */ (function () {\r\n    function WorkspaceChange(workspaceEdit) {\r\n        var _this = this;\r\n        this._textEditChanges = Object.create(null);\r\n        if (workspaceEdit) {\r\n            this._workspaceEdit = workspaceEdit;\r\n            if (workspaceEdit.documentChanges) {\r\n                workspaceEdit.documentChanges.forEach(function (change) {\r\n                    if (TextDocumentEdit.is(change)) {\r\n                        var textEditChange = new TextEditChangeImpl(change.edits);\r\n                        _this._textEditChanges[change.textDocument.uri] = textEditChange;\r\n                    }\r\n                });\r\n            }\r\n            else if (workspaceEdit.changes) {\r\n                Object.keys(workspaceEdit.changes).forEach(function (key) {\r\n                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\r\n                    _this._textEditChanges[key] = textEditChange;\r\n                });\r\n            }\r\n        }\r\n    }\r\n    Object.defineProperty(WorkspaceChange.prototype, \"edit\", {\r\n        /**\r\n         * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal\r\n         * use to be returned from a workspace edit operation like rename.\r\n         */\r\n        get: function () {\r\n            return this._workspaceEdit;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    WorkspaceChange.prototype.getTextEditChange = function (key) {\r\n        if (VersionedTextDocumentIdentifier.is(key)) {\r\n            if (!this._workspaceEdit) {\r\n                this._workspaceEdit = {\r\n                    documentChanges: []\r\n                };\r\n            }\r\n            if (!this._workspaceEdit.documentChanges) {\r\n                throw new Error('Workspace edit is not configured for document changes.');\r\n            }\r\n            var textDocument = key;\r\n            var result = this._textEditChanges[textDocument.uri];\r\n            if (!result) {\r\n                var edits = [];\r\n                var textDocumentEdit = {\r\n                    textDocument: textDocument,\r\n                    edits: edits\r\n                };\r\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\r\n                result = new TextEditChangeImpl(edits);\r\n                this._textEditChanges[textDocument.uri] = result;\r\n            }\r\n            return result;\r\n        }\r\n        else {\r\n            if (!this._workspaceEdit) {\r\n                this._workspaceEdit = {\r\n                    changes: Object.create(null)\r\n                };\r\n            }\r\n            if (!this._workspaceEdit.changes) {\r\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\r\n            }\r\n            var result = this._textEditChanges[key];\r\n            if (!result) {\r\n                var edits = [];\r\n                this._workspaceEdit.changes[key] = edits;\r\n                result = new TextEditChangeImpl(edits);\r\n                this._textEditChanges[key] = result;\r\n            }\r\n            return result;\r\n        }\r\n    };\r\n    WorkspaceChange.prototype.createFile = function (uri, options) {\r\n        this.checkDocumentChanges();\r\n        this._workspaceEdit.documentChanges.push(CreateFile.create(uri, options));\r\n    };\r\n    WorkspaceChange.prototype.renameFile = function (oldUri, newUri, options) {\r\n        this.checkDocumentChanges();\r\n        this._workspaceEdit.documentChanges.push(RenameFile.create(oldUri, newUri, options));\r\n    };\r\n    WorkspaceChange.prototype.deleteFile = function (uri, options) {\r\n        this.checkDocumentChanges();\r\n        this._workspaceEdit.documentChanges.push(DeleteFile.create(uri, options));\r\n    };\r\n    WorkspaceChange.prototype.checkDocumentChanges = function () {\r\n        if (!this._workspaceEdit || !this._workspaceEdit.documentChanges) {\r\n            throw new Error('Workspace edit is not configured for document changes.');\r\n        }\r\n    };\r\n    return WorkspaceChange;\r\n}());\r\nexport { WorkspaceChange };\r\n/**\r\n * The TextDocumentIdentifier namespace provides helper functions to work with\r\n * [TextDocumentIdentifier](#TextDocumentIdentifier) literals.\r\n */\r\nexport var TextDocumentIdentifier;\r\n(function (TextDocumentIdentifier) {\r\n    /**\r\n     * Creates a new TextDocumentIdentifier literal.\r\n     * @param uri The document's uri.\r\n     */\r\n    function create(uri) {\r\n        return { uri: uri };\r\n    }\r\n    TextDocumentIdentifier.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [TextDocumentIdentifier](#TextDocumentIdentifier) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri);\r\n    }\r\n    TextDocumentIdentifier.is = is;\r\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\r\n/**\r\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\r\n * [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.\r\n */\r\nexport var VersionedTextDocumentIdentifier;\r\n(function (VersionedTextDocumentIdentifier) {\r\n    /**\r\n     * Creates a new VersionedTextDocumentIdentifier literal.\r\n     * @param uri The document's uri.\r\n     * @param uri The document's text.\r\n     */\r\n    function create(uri, version) {\r\n        return { uri: uri, version: version };\r\n    }\r\n    VersionedTextDocumentIdentifier.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.number(candidate.version));\r\n    }\r\n    VersionedTextDocumentIdentifier.is = is;\r\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\r\n/**\r\n * The TextDocumentItem namespace provides helper functions to work with\r\n * [TextDocumentItem](#TextDocumentItem) literals.\r\n */\r\nexport var TextDocumentItem;\r\n(function (TextDocumentItem) {\r\n    /**\r\n     * Creates a new TextDocumentItem literal.\r\n     * @param uri The document's uri.\r\n     * @param languageId The document's language identifier.\r\n     * @param version The document's version number.\r\n     * @param text The document's text.\r\n     */\r\n    function create(uri, languageId, version, text) {\r\n        return { uri: uri, languageId: languageId, version: version, text: text };\r\n    }\r\n    TextDocumentItem.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [TextDocumentItem](#TextDocumentItem) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.number(candidate.version) && Is.string(candidate.text);\r\n    }\r\n    TextDocumentItem.is = is;\r\n})(TextDocumentItem || (TextDocumentItem = {}));\r\n/**\r\n * Describes the content type that a client supports in various\r\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\r\n *\r\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\r\n * are reserved for internal usage.\r\n */\r\nexport var MarkupKind;\r\n(function (MarkupKind) {\r\n    /**\r\n     * Plain text is supported as a content format\r\n     */\r\n    MarkupKind.PlainText = 'plaintext';\r\n    /**\r\n     * Markdown is supported as a content format\r\n     */\r\n    MarkupKind.Markdown = 'markdown';\r\n})(MarkupKind || (MarkupKind = {}));\r\n(function (MarkupKind) {\r\n    /**\r\n     * Checks whether the given value is a value of the [MarkupKind](#MarkupKind) type.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;\r\n    }\r\n    MarkupKind.is = is;\r\n})(MarkupKind || (MarkupKind = {}));\r\nexport var MarkupContent;\r\n(function (MarkupContent) {\r\n    /**\r\n     * Checks whether the given value conforms to the [MarkupContent](#MarkupContent) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\r\n    }\r\n    MarkupContent.is = is;\r\n})(MarkupContent || (MarkupContent = {}));\r\n/**\r\n * The kind of a completion entry.\r\n */\r\nexport var CompletionItemKind;\r\n(function (CompletionItemKind) {\r\n    CompletionItemKind.Text = 1;\r\n    CompletionItemKind.Method = 2;\r\n    CompletionItemKind.Function = 3;\r\n    CompletionItemKind.Constructor = 4;\r\n    CompletionItemKind.Field = 5;\r\n    CompletionItemKind.Variable = 6;\r\n    CompletionItemKind.Class = 7;\r\n    CompletionItemKind.Interface = 8;\r\n    CompletionItemKind.Module = 9;\r\n    CompletionItemKind.Property = 10;\r\n    CompletionItemKind.Unit = 11;\r\n    CompletionItemKind.Value = 12;\r\n    CompletionItemKind.Enum = 13;\r\n    CompletionItemKind.Keyword = 14;\r\n    CompletionItemKind.Snippet = 15;\r\n    CompletionItemKind.Color = 16;\r\n    CompletionItemKind.File = 17;\r\n    CompletionItemKind.Reference = 18;\r\n    CompletionItemKind.Folder = 19;\r\n    CompletionItemKind.EnumMember = 20;\r\n    CompletionItemKind.Constant = 21;\r\n    CompletionItemKind.Struct = 22;\r\n    CompletionItemKind.Event = 23;\r\n    CompletionItemKind.Operator = 24;\r\n    CompletionItemKind.TypeParameter = 25;\r\n})(CompletionItemKind || (CompletionItemKind = {}));\r\n/**\r\n * Defines whether the insert text in a completion item should be interpreted as\r\n * plain text or a snippet.\r\n */\r\nexport var InsertTextFormat;\r\n(function (InsertTextFormat) {\r\n    /**\r\n     * The primary text to be inserted is treated as a plain string.\r\n     */\r\n    InsertTextFormat.PlainText = 1;\r\n    /**\r\n     * The primary text to be inserted is treated as a snippet.\r\n     *\r\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\r\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\r\n     * the end of the snippet. Placeholders with equal identifiers are linked,\r\n     * that is typing in one will update others too.\r\n     *\r\n     * See also: https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/snippet/common/snippet.md\r\n     */\r\n    InsertTextFormat.Snippet = 2;\r\n})(InsertTextFormat || (InsertTextFormat = {}));\r\n/**\r\n * The CompletionItem namespace provides functions to deal with\r\n * completion items.\r\n */\r\nexport var CompletionItem;\r\n(function (CompletionItem) {\r\n    /**\r\n     * Create a completion item and seed it with a label.\r\n     * @param label The completion item's label\r\n     */\r\n    function create(label) {\r\n        return { label: label };\r\n    }\r\n    CompletionItem.create = create;\r\n})(CompletionItem || (CompletionItem = {}));\r\n/**\r\n * The CompletionList namespace provides functions to deal with\r\n * completion lists.\r\n */\r\nexport var CompletionList;\r\n(function (CompletionList) {\r\n    /**\r\n     * Creates a new completion list.\r\n     *\r\n     * @param items The completion items.\r\n     * @param isIncomplete The list is not complete.\r\n     */\r\n    function create(items, isIncomplete) {\r\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\r\n    }\r\n    CompletionList.create = create;\r\n})(CompletionList || (CompletionList = {}));\r\nexport var MarkedString;\r\n(function (MarkedString) {\r\n    /**\r\n     * Creates a marked string from plain text.\r\n     *\r\n     * @param plainText The plain text.\r\n     */\r\n    function fromPlainText(plainText) {\r\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \"\\\\$&\"); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\r\n    }\r\n    MarkedString.fromPlainText = fromPlainText;\r\n    /**\r\n     * Checks whether the given value conforms to the [MarkedString](#MarkedString) type.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));\r\n    }\r\n    MarkedString.is = is;\r\n})(MarkedString || (MarkedString = {}));\r\nexport var Hover;\r\n(function (Hover) {\r\n    /**\r\n     * Checks whether the given value conforms to the [Hover](#Hover) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||\r\n            MarkedString.is(candidate.contents) ||\r\n            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === void 0 || Range.is(value.range));\r\n    }\r\n    Hover.is = is;\r\n})(Hover || (Hover = {}));\r\n/**\r\n * The ParameterInformation namespace provides helper functions to work with\r\n * [ParameterInformation](#ParameterInformation) literals.\r\n */\r\nexport var ParameterInformation;\r\n(function (ParameterInformation) {\r\n    /**\r\n     * Creates a new parameter information literal.\r\n     *\r\n     * @param label A label string.\r\n     * @param documentation A doc string.\r\n     */\r\n    function create(label, documentation) {\r\n        return documentation ? { label: label, documentation: documentation } : { label: label };\r\n    }\r\n    ParameterInformation.create = create;\r\n    ;\r\n})(ParameterInformation || (ParameterInformation = {}));\r\n/**\r\n * The SignatureInformation namespace provides helper functions to work with\r\n * [SignatureInformation](#SignatureInformation) literals.\r\n */\r\nexport var SignatureInformation;\r\n(function (SignatureInformation) {\r\n    function create(label, documentation) {\r\n        var parameters = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            parameters[_i - 2] = arguments[_i];\r\n        }\r\n        var result = { label: label };\r\n        if (Is.defined(documentation)) {\r\n            result.documentation = documentation;\r\n        }\r\n        if (Is.defined(parameters)) {\r\n            result.parameters = parameters;\r\n        }\r\n        else {\r\n            result.parameters = [];\r\n        }\r\n        return result;\r\n    }\r\n    SignatureInformation.create = create;\r\n})(SignatureInformation || (SignatureInformation = {}));\r\n/**\r\n * A document highlight kind.\r\n */\r\nexport var DocumentHighlightKind;\r\n(function (DocumentHighlightKind) {\r\n    /**\r\n     * A textual occurrence.\r\n     */\r\n    DocumentHighlightKind.Text = 1;\r\n    /**\r\n     * Read-access of a symbol, like reading a variable.\r\n     */\r\n    DocumentHighlightKind.Read = 2;\r\n    /**\r\n     * Write-access of a symbol, like writing to a variable.\r\n     */\r\n    DocumentHighlightKind.Write = 3;\r\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\r\n/**\r\n * DocumentHighlight namespace to provide helper functions to work with\r\n * [DocumentHighlight](#DocumentHighlight) literals.\r\n */\r\nexport var DocumentHighlight;\r\n(function (DocumentHighlight) {\r\n    /**\r\n     * Create a DocumentHighlight object.\r\n     * @param range The range the highlight applies to.\r\n     */\r\n    function create(range, kind) {\r\n        var result = { range: range };\r\n        if (Is.number(kind)) {\r\n            result.kind = kind;\r\n        }\r\n        return result;\r\n    }\r\n    DocumentHighlight.create = create;\r\n})(DocumentHighlight || (DocumentHighlight = {}));\r\n/**\r\n * A symbol kind.\r\n */\r\nexport var SymbolKind;\r\n(function (SymbolKind) {\r\n    SymbolKind.File = 1;\r\n    SymbolKind.Module = 2;\r\n    SymbolKind.Namespace = 3;\r\n    SymbolKind.Package = 4;\r\n    SymbolKind.Class = 5;\r\n    SymbolKind.Method = 6;\r\n    SymbolKind.Property = 7;\r\n    SymbolKind.Field = 8;\r\n    SymbolKind.Constructor = 9;\r\n    SymbolKind.Enum = 10;\r\n    SymbolKind.Interface = 11;\r\n    SymbolKind.Function = 12;\r\n    SymbolKind.Variable = 13;\r\n    SymbolKind.Constant = 14;\r\n    SymbolKind.String = 15;\r\n    SymbolKind.Number = 16;\r\n    SymbolKind.Boolean = 17;\r\n    SymbolKind.Array = 18;\r\n    SymbolKind.Object = 19;\r\n    SymbolKind.Key = 20;\r\n    SymbolKind.Null = 21;\r\n    SymbolKind.EnumMember = 22;\r\n    SymbolKind.Struct = 23;\r\n    SymbolKind.Event = 24;\r\n    SymbolKind.Operator = 25;\r\n    SymbolKind.TypeParameter = 26;\r\n})(SymbolKind || (SymbolKind = {}));\r\nexport var SymbolInformation;\r\n(function (SymbolInformation) {\r\n    /**\r\n     * Creates a new symbol information literal.\r\n     *\r\n     * @param name The name of the symbol.\r\n     * @param kind The kind of the symbol.\r\n     * @param range The range of the location of the symbol.\r\n     * @param uri The resource of the location of symbol, defaults to the current document.\r\n     * @param containerName The name of the symbol containing the symbol.\r\n     */\r\n    function create(name, kind, range, uri, containerName) {\r\n        var result = {\r\n            name: name,\r\n            kind: kind,\r\n            location: { uri: uri, range: range }\r\n        };\r\n        if (containerName) {\r\n            result.containerName = containerName;\r\n        }\r\n        return result;\r\n    }\r\n    SymbolInformation.create = create;\r\n})(SymbolInformation || (SymbolInformation = {}));\r\n/**\r\n * Represents programming constructs like variables, classes, interfaces etc.\r\n * that appear in a document. Document symbols can be hierarchical and they\r\n * have two ranges: one that encloses its definition and one that points to\r\n * its most interesting range, e.g. the range of an identifier.\r\n */\r\nvar DocumentSymbol = /** @class */ (function () {\r\n    function DocumentSymbol() {\r\n    }\r\n    return DocumentSymbol;\r\n}());\r\nexport { DocumentSymbol };\r\n(function (DocumentSymbol) {\r\n    /**\r\n     * Creates a new symbol information literal.\r\n     *\r\n     * @param name The name of the symbol.\r\n     * @param detail The detail of the symbol.\r\n     * @param kind The kind of the symbol.\r\n     * @param range The range of the symbol.\r\n     * @param selectionRange The selectionRange of the symbol.\r\n     * @param children Children of the symbol.\r\n     */\r\n    function create(name, detail, kind, range, selectionRange, children) {\r\n        var result = {\r\n            name: name,\r\n            detail: detail,\r\n            kind: kind,\r\n            range: range,\r\n            selectionRange: selectionRange\r\n        };\r\n        if (children !== void 0) {\r\n            result.children = children;\r\n        }\r\n        return result;\r\n    }\r\n    DocumentSymbol.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [DocumentSymbol](#DocumentSymbol) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate &&\r\n            Is.string(candidate.name) && Is.number(candidate.kind) &&\r\n            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&\r\n            (candidate.detail === void 0 || Is.string(candidate.detail)) &&\r\n            (candidate.deprecated === void 0 || Is.boolean(candidate.deprecated)) &&\r\n            (candidate.children === void 0 || Array.isArray(candidate.children));\r\n    }\r\n    DocumentSymbol.is = is;\r\n})(DocumentSymbol || (DocumentSymbol = {}));\r\n/**\r\n * A set of predefined code action kinds\r\n */\r\nexport var CodeActionKind;\r\n(function (CodeActionKind) {\r\n    /**\r\n     * Base kind for quickfix actions: 'quickfix'\r\n     */\r\n    CodeActionKind.QuickFix = 'quickfix';\r\n    /**\r\n     * Base kind for refactoring actions: 'refactor'\r\n     */\r\n    CodeActionKind.Refactor = 'refactor';\r\n    /**\r\n     * Base kind for refactoring extraction actions: 'refactor.extract'\r\n     *\r\n     * Example extract actions:\r\n     *\r\n     * - Extract method\r\n     * - Extract function\r\n     * - Extract variable\r\n     * - Extract interface from class\r\n     * - ...\r\n     */\r\n    CodeActionKind.RefactorExtract = 'refactor.extract';\r\n    /**\r\n     * Base kind for refactoring inline actions: 'refactor.inline'\r\n     *\r\n     * Example inline actions:\r\n     *\r\n     * - Inline function\r\n     * - Inline variable\r\n     * - Inline constant\r\n     * - ...\r\n     */\r\n    CodeActionKind.RefactorInline = 'refactor.inline';\r\n    /**\r\n     * Base kind for refactoring rewrite actions: 'refactor.rewrite'\r\n     *\r\n     * Example rewrite actions:\r\n     *\r\n     * - Convert JavaScript function to class\r\n     * - Add or remove parameter\r\n     * - Encapsulate field\r\n     * - Make method static\r\n     * - Move method to base class\r\n     * - ...\r\n     */\r\n    CodeActionKind.RefactorRewrite = 'refactor.rewrite';\r\n    /**\r\n     * Base kind for source actions: `source`\r\n     *\r\n     * Source code actions apply to the entire file.\r\n     */\r\n    CodeActionKind.Source = 'source';\r\n    /**\r\n     * Base kind for an organize imports source action: `source.organizeImports`\r\n     */\r\n    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';\r\n})(CodeActionKind || (CodeActionKind = {}));\r\n/**\r\n * The CodeActionContext namespace provides helper functions to work with\r\n * [CodeActionContext](#CodeActionContext) literals.\r\n */\r\nexport var CodeActionContext;\r\n(function (CodeActionContext) {\r\n    /**\r\n     * Creates a new CodeActionContext literal.\r\n     */\r\n    function create(diagnostics, only) {\r\n        var result = { diagnostics: diagnostics };\r\n        if (only !== void 0 && only !== null) {\r\n            result.only = only;\r\n        }\r\n        return result;\r\n    }\r\n    CodeActionContext.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [CodeActionContext](#CodeActionContext) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === void 0 || Is.typedArray(candidate.only, Is.string));\r\n    }\r\n    CodeActionContext.is = is;\r\n})(CodeActionContext || (CodeActionContext = {}));\r\nexport var CodeAction;\r\n(function (CodeAction) {\r\n    function create(title, commandOrEdit, kind) {\r\n        var result = { title: title };\r\n        if (Command.is(commandOrEdit)) {\r\n            result.command = commandOrEdit;\r\n        }\r\n        else {\r\n            result.edit = commandOrEdit;\r\n        }\r\n        if (kind !== void null) {\r\n            result.kind = kind;\r\n        }\r\n        return result;\r\n    }\r\n    CodeAction.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && Is.string(candidate.title) &&\r\n            (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&\r\n            (candidate.kind === void 0 || Is.string(candidate.kind)) &&\r\n            (candidate.edit !== void 0 || candidate.command !== void 0) &&\r\n            (candidate.command === void 0 || Command.is(candidate.command)) &&\r\n            (candidate.edit === void 0 || WorkspaceEdit.is(candidate.edit));\r\n    }\r\n    CodeAction.is = is;\r\n})(CodeAction || (CodeAction = {}));\r\n/**\r\n * The CodeLens namespace provides helper functions to work with\r\n * [CodeLens](#CodeLens) literals.\r\n */\r\nexport var CodeLens;\r\n(function (CodeLens) {\r\n    /**\r\n     * Creates a new CodeLens literal.\r\n     */\r\n    function create(range, data) {\r\n        var result = { range: range };\r\n        if (Is.defined(data))\r\n            result.data = data;\r\n        return result;\r\n    }\r\n    CodeLens.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [CodeLens](#CodeLens) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\r\n    }\r\n    CodeLens.is = is;\r\n})(CodeLens || (CodeLens = {}));\r\n/**\r\n * The FormattingOptions namespace provides helper functions to work with\r\n * [FormattingOptions](#FormattingOptions) literals.\r\n */\r\nexport var FormattingOptions;\r\n(function (FormattingOptions) {\r\n    /**\r\n     * Creates a new FormattingOptions literal.\r\n     */\r\n    function create(tabSize, insertSpaces) {\r\n        return { tabSize: tabSize, insertSpaces: insertSpaces };\r\n    }\r\n    FormattingOptions.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [FormattingOptions](#FormattingOptions) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.number(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\r\n    }\r\n    FormattingOptions.is = is;\r\n})(FormattingOptions || (FormattingOptions = {}));\r\n/**\r\n * A document link is a range in a text document that links to an internal or external resource, like another\r\n * text document or a web site.\r\n */\r\nvar DocumentLink = /** @class */ (function () {\r\n    function DocumentLink() {\r\n    }\r\n    return DocumentLink;\r\n}());\r\nexport { DocumentLink };\r\n/**\r\n * The DocumentLink namespace provides helper functions to work with\r\n * [DocumentLink](#DocumentLink) literals.\r\n */\r\n(function (DocumentLink) {\r\n    /**\r\n     * Creates a new DocumentLink literal.\r\n     */\r\n    function create(range, target, data) {\r\n        return { range: range, target: target, data: data };\r\n    }\r\n    DocumentLink.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [DocumentLink](#DocumentLink) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\r\n    }\r\n    DocumentLink.is = is;\r\n})(DocumentLink || (DocumentLink = {}));\r\nexport var EOL = ['\\n', '\\r\\n', '\\r'];\r\nexport var TextDocument;\r\n(function (TextDocument) {\r\n    /**\r\n     * Creates a new ITextDocument literal from the given uri and content.\r\n     * @param uri The document's uri.\r\n     * @param languageId  The document's language Id.\r\n     * @param content The document's content.\r\n     */\r\n    function create(uri, languageId, version, content) {\r\n        return new FullTextDocument(uri, languageId, version, content);\r\n    }\r\n    TextDocument.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [ITextDocument](#ITextDocument) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.number(candidate.lineCount)\r\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\r\n    }\r\n    TextDocument.is = is;\r\n    function applyEdits(document, edits) {\r\n        var text = document.getText();\r\n        var sortedEdits = mergeSort(edits, function (a, b) {\r\n            var diff = a.range.start.line - b.range.start.line;\r\n            if (diff === 0) {\r\n                return a.range.start.character - b.range.start.character;\r\n            }\r\n            return diff;\r\n        });\r\n        var lastModifiedOffset = text.length;\r\n        for (var i = sortedEdits.length - 1; i >= 0; i--) {\r\n            var e = sortedEdits[i];\r\n            var startOffset = document.offsetAt(e.range.start);\r\n            var endOffset = document.offsetAt(e.range.end);\r\n            if (endOffset <= lastModifiedOffset) {\r\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\r\n            }\r\n            else {\r\n                throw new Error('Overlapping edit');\r\n            }\r\n            lastModifiedOffset = startOffset;\r\n        }\r\n        return text;\r\n    }\r\n    TextDocument.applyEdits = applyEdits;\r\n    function mergeSort(data, compare) {\r\n        if (data.length <= 1) {\r\n            // sorted\r\n            return data;\r\n        }\r\n        var p = (data.length / 2) | 0;\r\n        var left = data.slice(0, p);\r\n        var right = data.slice(p);\r\n        mergeSort(left, compare);\r\n        mergeSort(right, compare);\r\n        var leftIdx = 0;\r\n        var rightIdx = 0;\r\n        var i = 0;\r\n        while (leftIdx < left.length && rightIdx < right.length) {\r\n            var ret = compare(left[leftIdx], right[rightIdx]);\r\n            if (ret <= 0) {\r\n                // smaller_equal -> take left to preserve order\r\n                data[i++] = left[leftIdx++];\r\n            }\r\n            else {\r\n                // greater -> take right\r\n                data[i++] = right[rightIdx++];\r\n            }\r\n        }\r\n        while (leftIdx < left.length) {\r\n            data[i++] = left[leftIdx++];\r\n        }\r\n        while (rightIdx < right.length) {\r\n            data[i++] = right[rightIdx++];\r\n        }\r\n        return data;\r\n    }\r\n})(TextDocument || (TextDocument = {}));\r\n/**\r\n * Represents reasons why a text document is saved.\r\n */\r\nexport var TextDocumentSaveReason;\r\n(function (TextDocumentSaveReason) {\r\n    /**\r\n     * Manually triggered, e.g. by the user pressing save, by starting debugging,\r\n     * or by an API call.\r\n     */\r\n    TextDocumentSaveReason.Manual = 1;\r\n    /**\r\n     * Automatic after a delay.\r\n     */\r\n    TextDocumentSaveReason.AfterDelay = 2;\r\n    /**\r\n     * When the editor lost focus.\r\n     */\r\n    TextDocumentSaveReason.FocusOut = 3;\r\n})(TextDocumentSaveReason || (TextDocumentSaveReason = {}));\r\nvar FullTextDocument = /** @class */ (function () {\r\n    function FullTextDocument(uri, languageId, version, content) {\r\n        this._uri = uri;\r\n        this._languageId = languageId;\r\n        this._version = version;\r\n        this._content = content;\r\n        this._lineOffsets = null;\r\n    }\r\n    Object.defineProperty(FullTextDocument.prototype, \"uri\", {\r\n        get: function () {\r\n            return this._uri;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FullTextDocument.prototype, \"languageId\", {\r\n        get: function () {\r\n            return this._languageId;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FullTextDocument.prototype, \"version\", {\r\n        get: function () {\r\n            return this._version;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    FullTextDocument.prototype.getText = function (range) {\r\n        if (range) {\r\n            var start = this.offsetAt(range.start);\r\n            var end = this.offsetAt(range.end);\r\n            return this._content.substring(start, end);\r\n        }\r\n        return this._content;\r\n    };\r\n    FullTextDocument.prototype.update = function (event, version) {\r\n        this._content = event.text;\r\n        this._version = version;\r\n        this._lineOffsets = null;\r\n    };\r\n    FullTextDocument.prototype.getLineOffsets = function () {\r\n        if (this._lineOffsets === null) {\r\n            var lineOffsets = [];\r\n            var text = this._content;\r\n            var isLineStart = true;\r\n            for (var i = 0; i < text.length; i++) {\r\n                if (isLineStart) {\r\n                    lineOffsets.push(i);\r\n                    isLineStart = false;\r\n                }\r\n                var ch = text.charAt(i);\r\n                isLineStart = (ch === '\\r' || ch === '\\n');\r\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\r\n                    i++;\r\n                }\r\n            }\r\n            if (isLineStart && text.length > 0) {\r\n                lineOffsets.push(text.length);\r\n            }\r\n            this._lineOffsets = lineOffsets;\r\n        }\r\n        return this._lineOffsets;\r\n    };\r\n    FullTextDocument.prototype.positionAt = function (offset) {\r\n        offset = Math.max(Math.min(offset, this._content.length), 0);\r\n        var lineOffsets = this.getLineOffsets();\r\n        var low = 0, high = lineOffsets.length;\r\n        if (high === 0) {\r\n            return Position.create(0, offset);\r\n        }\r\n        while (low < high) {\r\n            var mid = Math.floor((low + high) / 2);\r\n            if (lineOffsets[mid] > offset) {\r\n                high = mid;\r\n            }\r\n            else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n        // low is the least x for which the line offset is larger than the current offset\r\n        // or array.length if no line offset is larger than the current offset\r\n        var line = low - 1;\r\n        return Position.create(line, offset - lineOffsets[line]);\r\n    };\r\n    FullTextDocument.prototype.offsetAt = function (position) {\r\n        var lineOffsets = this.getLineOffsets();\r\n        if (position.line >= lineOffsets.length) {\r\n            return this._content.length;\r\n        }\r\n        else if (position.line < 0) {\r\n            return 0;\r\n        }\r\n        var lineOffset = lineOffsets[position.line];\r\n        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\r\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\r\n    };\r\n    Object.defineProperty(FullTextDocument.prototype, \"lineCount\", {\r\n        get: function () {\r\n            return this.getLineOffsets().length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FullTextDocument;\r\n}());\r\nvar Is;\r\n(function (Is) {\r\n    var toString = Object.prototype.toString;\r\n    function defined(value) {\r\n        return typeof value !== 'undefined';\r\n    }\r\n    Is.defined = defined;\r\n    function undefined(value) {\r\n        return typeof value === 'undefined';\r\n    }\r\n    Is.undefined = undefined;\r\n    function boolean(value) {\r\n        return value === true || value === false;\r\n    }\r\n    Is.boolean = boolean;\r\n    function string(value) {\r\n        return toString.call(value) === '[object String]';\r\n    }\r\n    Is.string = string;\r\n    function number(value) {\r\n        return toString.call(value) === '[object Number]';\r\n    }\r\n    Is.number = number;\r\n    function func(value) {\r\n        return toString.call(value) === '[object Function]';\r\n    }\r\n    Is.func = func;\r\n    function objectLiteral(value) {\r\n        // Strictly speaking class instances pass this check as well. Since the LSP\r\n        // doesn't use classes we ignore this for now. If we do we need to add something\r\n        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\r\n        return value !== null && typeof value === 'object';\r\n    }\r\n    Is.objectLiteral = objectLiteral;\r\n    function typedArray(value, check) {\r\n        return Array.isArray(value) && value.every(check);\r\n    }\r\n    Is.typedArray = typedArray;\r\n})(Is || (Is = {}));\r\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as ls from './_deps/vscode-languageserver-types/main.js';\nvar Uri = monaco.Uri;\nvar Range = monaco.Range;\n// --- diagnostics --- ---\nvar DiagnosticsAdapter = /** @class */ (function () {\n    function DiagnosticsAdapter(_languageId, _worker, defaults) {\n        var _this = this;\n        this._languageId = _languageId;\n        this._worker = _worker;\n        this._disposables = [];\n        this._listener = Object.create(null);\n        var onModelAdd = function (model) {\n            var modeId = model.getModeId();\n            if (modeId !== _this._languageId) {\n                return;\n            }\n            var handle;\n            _this._listener[model.uri.toString()] = model.onDidChangeContent(function () {\n                clearTimeout(handle);\n                handle = setTimeout(function () { return _this._doValidate(model.uri, modeId); }, 500);\n            });\n            _this._doValidate(model.uri, modeId);\n        };\n        var onModelRemoved = function (model) {\n            monaco.editor.setModelMarkers(model, _this._languageId, []);\n            var uriStr = model.uri.toString();\n            var listener = _this._listener[uriStr];\n            if (listener) {\n                listener.dispose();\n                delete _this._listener[uriStr];\n            }\n        };\n        this._disposables.push(monaco.editor.onDidCreateModel(onModelAdd));\n        this._disposables.push(monaco.editor.onWillDisposeModel(function (model) {\n            onModelRemoved(model);\n            _this._resetSchema(model.uri);\n        }));\n        this._disposables.push(monaco.editor.onDidChangeModelLanguage(function (event) {\n            onModelRemoved(event.model);\n            onModelAdd(event.model);\n            _this._resetSchema(event.model.uri);\n        }));\n        this._disposables.push(defaults.onDidChange(function (_) {\n            monaco.editor.getModels().forEach(function (model) {\n                if (model.getModeId() === _this._languageId) {\n                    onModelRemoved(model);\n                    onModelAdd(model);\n                }\n            });\n        }));\n        this._disposables.push({\n            dispose: function () {\n                monaco.editor.getModels().forEach(onModelRemoved);\n                for (var key in _this._listener) {\n                    _this._listener[key].dispose();\n                }\n            }\n        });\n        monaco.editor.getModels().forEach(onModelAdd);\n    }\n    DiagnosticsAdapter.prototype.dispose = function () {\n        this._disposables.forEach(function (d) { return d && d.dispose(); });\n        this._disposables = [];\n    };\n    DiagnosticsAdapter.prototype._resetSchema = function (resource) {\n        this._worker().then(function (worker) {\n            worker.resetSchema(resource.toString());\n        });\n    };\n    DiagnosticsAdapter.prototype._doValidate = function (resource, languageId) {\n        this._worker(resource).then(function (worker) {\n            return worker.doValidation(resource.toString()).then(function (diagnostics) {\n                var markers = diagnostics.map(function (d) { return toDiagnostics(resource, d); });\n                var model = monaco.editor.getModel(resource);\n                if (model && model.getModeId() === languageId) {\n                    monaco.editor.setModelMarkers(model, languageId, markers);\n                }\n            });\n        }).then(undefined, function (err) {\n            console.error(err);\n        });\n    };\n    return DiagnosticsAdapter;\n}());\nexport { DiagnosticsAdapter };\nfunction toSeverity(lsSeverity) {\n    switch (lsSeverity) {\n        case ls.DiagnosticSeverity.Error: return monaco.MarkerSeverity.Error;\n        case ls.DiagnosticSeverity.Warning: return monaco.MarkerSeverity.Warning;\n        case ls.DiagnosticSeverity.Information: return monaco.MarkerSeverity.Info;\n        case ls.DiagnosticSeverity.Hint: return monaco.MarkerSeverity.Hint;\n        default:\n            return monaco.MarkerSeverity.Info;\n    }\n}\nfunction toDiagnostics(resource, diag) {\n    var code = typeof diag.code === 'number' ? String(diag.code) : diag.code;\n    return {\n        severity: toSeverity(diag.severity),\n        startLineNumber: diag.range.start.line + 1,\n        startColumn: diag.range.start.character + 1,\n        endLineNumber: diag.range.end.line + 1,\n        endColumn: diag.range.end.character + 1,\n        message: diag.message,\n        code: code,\n        source: diag.source\n    };\n}\n// --- completion ------\nfunction fromPosition(position) {\n    if (!position) {\n        return void 0;\n    }\n    return { character: position.column - 1, line: position.lineNumber - 1 };\n}\nfunction fromRange(range) {\n    if (!range) {\n        return void 0;\n    }\n    return { start: { line: range.startLineNumber - 1, character: range.startColumn - 1 }, end: { line: range.endLineNumber - 1, character: range.endColumn - 1 } };\n}\nfunction toRange(range) {\n    if (!range) {\n        return void 0;\n    }\n    return new Range(range.start.line + 1, range.start.character + 1, range.end.line + 1, range.end.character + 1);\n}\nfunction toCompletionItemKind(kind) {\n    var mItemKind = monaco.languages.CompletionItemKind;\n    switch (kind) {\n        case ls.CompletionItemKind.Text: return mItemKind.Text;\n        case ls.CompletionItemKind.Method: return mItemKind.Method;\n        case ls.CompletionItemKind.Function: return mItemKind.Function;\n        case ls.CompletionItemKind.Constructor: return mItemKind.Constructor;\n        case ls.CompletionItemKind.Field: return mItemKind.Field;\n        case ls.CompletionItemKind.Variable: return mItemKind.Variable;\n        case ls.CompletionItemKind.Class: return mItemKind.Class;\n        case ls.CompletionItemKind.Interface: return mItemKind.Interface;\n        case ls.CompletionItemKind.Module: return mItemKind.Module;\n        case ls.CompletionItemKind.Property: return mItemKind.Property;\n        case ls.CompletionItemKind.Unit: return mItemKind.Unit;\n        case ls.CompletionItemKind.Value: return mItemKind.Value;\n        case ls.CompletionItemKind.Enum: return mItemKind.Enum;\n        case ls.CompletionItemKind.Keyword: return mItemKind.Keyword;\n        case ls.CompletionItemKind.Snippet: return mItemKind.Snippet;\n        case ls.CompletionItemKind.Color: return mItemKind.Color;\n        case ls.CompletionItemKind.File: return mItemKind.File;\n        case ls.CompletionItemKind.Reference: return mItemKind.Reference;\n    }\n    return mItemKind.Property;\n}\nfunction fromCompletionItemKind(kind) {\n    var mItemKind = monaco.languages.CompletionItemKind;\n    switch (kind) {\n        case mItemKind.Text: return ls.CompletionItemKind.Text;\n        case mItemKind.Method: return ls.CompletionItemKind.Method;\n        case mItemKind.Function: return ls.CompletionItemKind.Function;\n        case mItemKind.Constructor: return ls.CompletionItemKind.Constructor;\n        case mItemKind.Field: return ls.CompletionItemKind.Field;\n        case mItemKind.Variable: return ls.CompletionItemKind.Variable;\n        case mItemKind.Class: return ls.CompletionItemKind.Class;\n        case mItemKind.Interface: return ls.CompletionItemKind.Interface;\n        case mItemKind.Module: return ls.CompletionItemKind.Module;\n        case mItemKind.Property: return ls.CompletionItemKind.Property;\n        case mItemKind.Unit: return ls.CompletionItemKind.Unit;\n        case mItemKind.Value: return ls.CompletionItemKind.Value;\n        case mItemKind.Enum: return ls.CompletionItemKind.Enum;\n        case mItemKind.Keyword: return ls.CompletionItemKind.Keyword;\n        case mItemKind.Snippet: return ls.CompletionItemKind.Snippet;\n        case mItemKind.Color: return ls.CompletionItemKind.Color;\n        case mItemKind.File: return ls.CompletionItemKind.File;\n        case mItemKind.Reference: return ls.CompletionItemKind.Reference;\n    }\n    return ls.CompletionItemKind.Property;\n}\nfunction toTextEdit(textEdit) {\n    if (!textEdit) {\n        return void 0;\n    }\n    return {\n        range: toRange(textEdit.range),\n        text: textEdit.newText\n    };\n}\nvar CompletionAdapter = /** @class */ (function () {\n    function CompletionAdapter(_worker) {\n        this._worker = _worker;\n    }\n    Object.defineProperty(CompletionAdapter.prototype, \"triggerCharacters\", {\n        get: function () {\n            return [' ', ':'];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CompletionAdapter.prototype.provideCompletionItems = function (model, position, context, token) {\n        var resource = model.uri;\n        return this._worker(resource).then(function (worker) {\n            return worker.doComplete(resource.toString(), fromPosition(position));\n        }).then(function (info) {\n            if (!info) {\n                return;\n            }\n            var wordInfo = model.getWordUntilPosition(position);\n            var wordRange = new Range(position.lineNumber, wordInfo.startColumn, position.lineNumber, wordInfo.endColumn);\n            var items = info.items.map(function (entry) {\n                var item = {\n                    label: entry.label,\n                    insertText: entry.insertText || entry.label,\n                    sortText: entry.sortText,\n                    filterText: entry.filterText,\n                    documentation: entry.documentation,\n                    detail: entry.detail,\n                    range: wordRange,\n                    kind: toCompletionItemKind(entry.kind),\n                };\n                if (entry.textEdit) {\n                    item.range = toRange(entry.textEdit.range);\n                    item.insertText = entry.textEdit.newText;\n                }\n                if (entry.additionalTextEdits) {\n                    item.additionalTextEdits = entry.additionalTextEdits.map(toTextEdit);\n                }\n                if (entry.insertTextFormat === ls.InsertTextFormat.Snippet) {\n                    item.insertTextRules = monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet;\n                }\n                return item;\n            });\n            return {\n                isIncomplete: info.isIncomplete,\n                suggestions: items\n            };\n        });\n    };\n    return CompletionAdapter;\n}());\nexport { CompletionAdapter };\nfunction isMarkupContent(thing) {\n    return thing && typeof thing === 'object' && typeof thing.kind === 'string';\n}\nfunction toMarkdownString(entry) {\n    if (typeof entry === 'string') {\n        return {\n            value: entry\n        };\n    }\n    if (isMarkupContent(entry)) {\n        if (entry.kind === 'plaintext') {\n            return {\n                value: entry.value.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&')\n            };\n        }\n        return {\n            value: entry.value\n        };\n    }\n    return { value: '```' + entry.language + '\\n' + entry.value + '\\n```\\n' };\n}\nfunction toMarkedStringArray(contents) {\n    if (!contents) {\n        return void 0;\n    }\n    if (Array.isArray(contents)) {\n        return contents.map(toMarkdownString);\n    }\n    return [toMarkdownString(contents)];\n}\n// --- hover ------\nvar HoverAdapter = /** @class */ (function () {\n    function HoverAdapter(_worker) {\n        this._worker = _worker;\n    }\n    HoverAdapter.prototype.provideHover = function (model, position, token) {\n        var resource = model.uri;\n        return this._worker(resource).then(function (worker) {\n            return worker.doHover(resource.toString(), fromPosition(position));\n        }).then(function (info) {\n            if (!info) {\n                return;\n            }\n            return {\n                range: toRange(info.range),\n                contents: toMarkedStringArray(info.contents)\n            };\n        });\n    };\n    return HoverAdapter;\n}());\nexport { HoverAdapter };\n// --- definition ------\nfunction toLocation(location) {\n    return {\n        uri: Uri.parse(location.uri),\n        range: toRange(location.range)\n    };\n}\n// --- document symbols ------\nfunction toSymbolKind(kind) {\n    var mKind = monaco.languages.SymbolKind;\n    switch (kind) {\n        case ls.SymbolKind.File: return mKind.Array;\n        case ls.SymbolKind.Module: return mKind.Module;\n        case ls.SymbolKind.Namespace: return mKind.Namespace;\n        case ls.SymbolKind.Package: return mKind.Package;\n        case ls.SymbolKind.Class: return mKind.Class;\n        case ls.SymbolKind.Method: return mKind.Method;\n        case ls.SymbolKind.Property: return mKind.Property;\n        case ls.SymbolKind.Field: return mKind.Field;\n        case ls.SymbolKind.Constructor: return mKind.Constructor;\n        case ls.SymbolKind.Enum: return mKind.Enum;\n        case ls.SymbolKind.Interface: return mKind.Interface;\n        case ls.SymbolKind.Function: return mKind.Function;\n        case ls.SymbolKind.Variable: return mKind.Variable;\n        case ls.SymbolKind.Constant: return mKind.Constant;\n        case ls.SymbolKind.String: return mKind.String;\n        case ls.SymbolKind.Number: return mKind.Number;\n        case ls.SymbolKind.Boolean: return mKind.Boolean;\n        case ls.SymbolKind.Array: return mKind.Array;\n    }\n    return mKind.Function;\n}\nvar DocumentSymbolAdapter = /** @class */ (function () {\n    function DocumentSymbolAdapter(_worker) {\n        this._worker = _worker;\n    }\n    DocumentSymbolAdapter.prototype.provideDocumentSymbols = function (model, token) {\n        var resource = model.uri;\n        return this._worker(resource).then(function (worker) { return worker.findDocumentSymbols(resource.toString()); }).then(function (items) {\n            if (!items) {\n                return;\n            }\n            return items.map(function (item) { return ({\n                name: item.name,\n                detail: '',\n                containerName: item.containerName,\n                kind: toSymbolKind(item.kind),\n                range: toRange(item.location.range),\n                selectionRange: toRange(item.location.range)\n            }); });\n        });\n    };\n    return DocumentSymbolAdapter;\n}());\nexport { DocumentSymbolAdapter };\nfunction fromFormattingOptions(options) {\n    return {\n        tabSize: options.tabSize,\n        insertSpaces: options.insertSpaces\n    };\n}\nvar DocumentFormattingEditProvider = /** @class */ (function () {\n    function DocumentFormattingEditProvider(_worker) {\n        this._worker = _worker;\n    }\n    DocumentFormattingEditProvider.prototype.provideDocumentFormattingEdits = function (model, options, token) {\n        var resource = model.uri;\n        return this._worker(resource).then(function (worker) {\n            return worker.format(resource.toString(), null, fromFormattingOptions(options)).then(function (edits) {\n                if (!edits || edits.length === 0) {\n                    return;\n                }\n                return edits.map(toTextEdit);\n            });\n        });\n    };\n    return DocumentFormattingEditProvider;\n}());\nexport { DocumentFormattingEditProvider };\nvar DocumentRangeFormattingEditProvider = /** @class */ (function () {\n    function DocumentRangeFormattingEditProvider(_worker) {\n        this._worker = _worker;\n    }\n    DocumentRangeFormattingEditProvider.prototype.provideDocumentRangeFormattingEdits = function (model, range, options, token) {\n        var resource = model.uri;\n        return this._worker(resource).then(function (worker) {\n            return worker.format(resource.toString(), fromRange(range), fromFormattingOptions(options)).then(function (edits) {\n                if (!edits || edits.length === 0) {\n                    return;\n                }\n                return edits.map(toTextEdit);\n            });\n        });\n    };\n    return DocumentRangeFormattingEditProvider;\n}());\nexport { DocumentRangeFormattingEditProvider };\nvar DocumentColorAdapter = /** @class */ (function () {\n    function DocumentColorAdapter(_worker) {\n        this._worker = _worker;\n    }\n    DocumentColorAdapter.prototype.provideDocumentColors = function (model, token) {\n        var resource = model.uri;\n        return this._worker(resource).then(function (worker) { return worker.findDocumentColors(resource.toString()); }).then(function (infos) {\n            if (!infos) {\n                return;\n            }\n            return infos.map(function (item) { return ({\n                color: item.color,\n                range: toRange(item.range)\n            }); });\n        });\n    };\n    DocumentColorAdapter.prototype.provideColorPresentations = function (model, info, token) {\n        var resource = model.uri;\n        return this._worker(resource).then(function (worker) { return worker.getColorPresentations(resource.toString(), info.color, fromRange(info.range)); }).then(function (presentations) {\n            if (!presentations) {\n                return;\n            }\n            return presentations.map(function (presentation) {\n                var item = {\n                    label: presentation.label,\n                };\n                if (presentation.textEdit) {\n                    item.textEdit = toTextEdit(presentation.textEdit);\n                }\n                if (presentation.additionalTextEdits) {\n                    item.additionalTextEdits = presentation.additionalTextEdits.map(toTextEdit);\n                }\n                return item;\n            });\n        });\n    };\n    return DocumentColorAdapter;\n}());\nexport { DocumentColorAdapter };\nvar FoldingRangeAdapter = /** @class */ (function () {\n    function FoldingRangeAdapter(_worker) {\n        this._worker = _worker;\n    }\n    FoldingRangeAdapter.prototype.provideFoldingRanges = function (model, context, token) {\n        var resource = model.uri;\n        return this._worker(resource).then(function (worker) { return worker.provideFoldingRanges(resource.toString(), context); }).then(function (ranges) {\n            if (!ranges) {\n                return;\n            }\n            return ranges.map(function (range) {\n                var result = {\n                    start: range.startLine + 1,\n                    end: range.endLine + 1\n                };\n                if (typeof range.kind !== 'undefined') {\n                    result.kind = toFoldingRangeKind(range.kind);\n                }\n                return result;\n            });\n        });\n    };\n    return FoldingRangeAdapter;\n}());\nexport { FoldingRangeAdapter };\nfunction toFoldingRangeKind(kind) {\n    switch (kind) {\n        case ls.FoldingRangeKind.Comment: return monaco.languages.FoldingRangeKind.Comment;\n        case ls.FoldingRangeKind.Imports: return monaco.languages.FoldingRangeKind.Imports;\n        case ls.FoldingRangeKind.Region: return monaco.languages.FoldingRangeKind.Region;\n    }\n    return void 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text, ignoreTrivia) {\n    if (ignoreTrivia === void 0) { ignoreTrivia = false; }\n    var pos = 0, len = text.length, value = '', tokenOffset = 0, token = 16 /* Unknown */, scanError = 0 /* None */;\n    function scanHexDigits(count, exact) {\n        var digits = 0;\n        var value = 0;\n        while (digits < count || !exact) {\n            var ch = text.charCodeAt(pos);\n            if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {\n                value = value * 16 + ch - 48 /* _0 */;\n            }\n            else if (ch >= 65 /* A */ && ch <= 70 /* F */) {\n                value = value * 16 + ch - 65 /* A */ + 10;\n            }\n            else if (ch >= 97 /* a */ && ch <= 102 /* f */) {\n                value = value * 16 + ch - 97 /* a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* Unknown */;\n        scanError = 0 /* None */;\n    }\n    function scanNumber() {\n        var start = pos;\n        if (text.charCodeAt(pos) === 48 /* _0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        var end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        var result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* UnexpectedEndOfString */;\n                break;\n            }\n            var ch = text.charCodeAt(pos);\n            if (ch === 34 /* doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                ch = text.charCodeAt(pos++);\n                switch (ch) {\n                    case 34 /* doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* slash */:\n                        result += '/';\n                        break;\n                    case 98 /* b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* u */:\n                        var ch_1 = scanHexDigits(4, true);\n                        if (ch_1 >= 0) {\n                            result += String.fromCharCode(ch_1);\n                        }\n                        else {\n                            scanError = 4 /* InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* None */;\n        tokenOffset = pos;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* EOF */;\n        }\n        var code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            return token = 14 /* LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* openBrace */:\n                pos++;\n                return token = 1 /* OpenBraceToken */;\n            case 125 /* closeBrace */:\n                pos++;\n                return token = 2 /* CloseBraceToken */;\n            case 91 /* openBracket */:\n                pos++;\n                return token = 3 /* OpenBracketToken */;\n            case 93 /* closeBracket */:\n                pos++;\n                return token = 4 /* CloseBracketToken */;\n            case 58 /* colon */:\n                pos++;\n                return token = 6 /* ColonToken */;\n            case 44 /* comma */:\n                pos++;\n                return token = 5 /* CommaToken */;\n            // strings\n            case 34 /* doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* StringLiteral */;\n            // comments\n            case 47 /* slash */:\n                var start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {\n                    pos += 2;\n                    var safeLength = len - 1; // For lookahead.\n                    var commentClosed = false;\n                    while (pos < safeLength) {\n                        var ch = text.charCodeAt(pos);\n                        if (ch === 42 /* asterisk */ && text.charCodeAt(pos + 1) === 47 /* slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n            // numbers\n            case 45 /* minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* _0 */:\n            case 49 /* _1 */:\n            case 50 /* _2 */:\n            case 51 /* _3 */:\n            case 52 /* _4 */:\n            case 53 /* _5 */:\n            case 54 /* _6 */:\n            case 55 /* _7 */:\n            case 56 /* _8 */:\n            case 57 /* _9 */:\n                value += scanNumber();\n                return token = 11 /* NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* TrueKeyword */;\n                        case 'false': return token = 9 /* FalseKeyword */;\n                        case 'null': return token = 7 /* NullKeyword */;\n                    }\n                    return token = 16 /* Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* closeBrace */:\n            case 93 /* closeBracket */:\n            case 123 /* openBrace */:\n            case 91 /* openBracket */:\n            case 34 /* doubleQuote */:\n            case 58 /* colon */:\n            case 44 /* comma */:\n            case 47 /* slash */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        var result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* LineCommentTrivia */ && result <= 15 /* Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: function () { return pos; },\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: function () { return token; },\n        getTokenValue: function () { return value; },\n        getTokenOffset: function () { return tokenOffset; },\n        getTokenLength: function () { return pos - tokenOffset; },\n        getTokenError: function () { return scanError; }\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ ||\n        ch === 160 /* nonBreakingSpace */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ ||\n        ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;\n}\n//# sourceMappingURL=scanner.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner.js';\nexport function format(documentText, range, options) {\n    var initialIndentLevel;\n    var formatText;\n    var formatTextStart;\n    var rangeStart;\n    var rangeEnd;\n    if (range) {\n        rangeStart = range.offset;\n        rangeEnd = rangeStart + range.length;\n        formatTextStart = rangeStart;\n        while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n            formatTextStart--;\n        }\n        var endOffset = rangeEnd;\n        while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n            endOffset++;\n        }\n        formatText = documentText.substring(formatTextStart, endOffset);\n        initialIndentLevel = computeIndentLevel(formatText, options);\n    }\n    else {\n        formatText = documentText;\n        initialIndentLevel = 0;\n        formatTextStart = 0;\n        rangeStart = 0;\n        rangeEnd = documentText.length;\n    }\n    var eol = getEOL(options, documentText);\n    var lineBreak = false;\n    var indentLevel = 0;\n    var indentValue;\n    if (options.insertSpaces) {\n        indentValue = repeat(' ', options.tabSize || 4);\n    }\n    else {\n        indentValue = '\\t';\n    }\n    var scanner = createScanner(formatText, false);\n    var hasError = false;\n    function newLineAndIndent() {\n        return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n    }\n    function scanNext() {\n        var token = scanner.scan();\n        lineBreak = false;\n        while (token === 15 /* Trivia */ || token === 14 /* LineBreakTrivia */) {\n            lineBreak = lineBreak || (token === 14 /* LineBreakTrivia */);\n            token = scanner.scan();\n        }\n        hasError = token === 16 /* Unknown */ || scanner.getTokenError() !== 0 /* None */;\n        return token;\n    }\n    var editOperations = [];\n    function addEdit(text, startOffset, endOffset) {\n        if (!hasError && startOffset < rangeEnd && endOffset > rangeStart && documentText.substring(startOffset, endOffset) !== text) {\n            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n        }\n    }\n    var firstToken = scanNext();\n    if (firstToken !== 17 /* EOF */) {\n        var firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n        var initialIndent = repeat(indentValue, initialIndentLevel);\n        addEdit(initialIndent, formatTextStart, firstTokenStart);\n    }\n    while (firstToken !== 17 /* EOF */) {\n        var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n        var secondToken = scanNext();\n        var replaceContent = '';\n        while (!lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n            // comments on the same line: keep them on the same line, but ignore them otherwise\n            var commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n            addEdit(' ', firstTokenEnd, commentTokenStart);\n            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n            replaceContent = secondToken === 12 /* LineCommentTrivia */ ? newLineAndIndent() : '';\n            secondToken = scanNext();\n        }\n        if (secondToken === 2 /* CloseBraceToken */) {\n            if (firstToken !== 1 /* OpenBraceToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else if (secondToken === 4 /* CloseBracketToken */) {\n            if (firstToken !== 3 /* OpenBracketToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else {\n            switch (firstToken) {\n                case 3 /* OpenBracketToken */:\n                case 1 /* OpenBraceToken */:\n                    indentLevel++;\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 5 /* CommaToken */:\n                case 12 /* LineCommentTrivia */:\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 13 /* BlockCommentTrivia */:\n                    if (lineBreak) {\n                        replaceContent = newLineAndIndent();\n                    }\n                    else {\n                        // symbol following comment on the same line: keep on same line, separate with ' '\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 6 /* ColonToken */:\n                    replaceContent = ' ';\n                    break;\n                case 10 /* StringLiteral */:\n                    if (secondToken === 6 /* ColonToken */) {\n                        replaceContent = '';\n                        break;\n                    }\n                // fall through\n                case 7 /* NullKeyword */:\n                case 8 /* TrueKeyword */:\n                case 9 /* FalseKeyword */:\n                case 11 /* NumericLiteral */:\n                case 2 /* CloseBraceToken */:\n                case 4 /* CloseBracketToken */:\n                    if (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */) {\n                        replaceContent = ' ';\n                    }\n                    else if (secondToken !== 5 /* CommaToken */ && secondToken !== 17 /* EOF */) {\n                        hasError = true;\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    hasError = true;\n                    break;\n            }\n            if (lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n                replaceContent = newLineAndIndent();\n            }\n        }\n        var secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n        addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n        firstToken = secondToken;\n    }\n    return editOperations;\n}\nfunction repeat(s, count) {\n    var result = '';\n    for (var i = 0; i < count; i++) {\n        result += s;\n    }\n    return result;\n}\nfunction computeIndentLevel(content, options) {\n    var i = 0;\n    var nChars = 0;\n    var tabSize = options.tabSize || 4;\n    while (i < content.length) {\n        var ch = content.charAt(i);\n        if (ch === ' ') {\n            nChars++;\n        }\n        else if (ch === '\\t') {\n            nChars += tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n    for (var i = 0; i < text.length; i++) {\n        var ch = text.charAt(i);\n        if (ch === '\\r') {\n            if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                return '\\r\\n';\n            }\n            return '\\r';\n        }\n        else if (ch === '\\n') {\n            return '\\n';\n        }\n    }\n    return (options && options.eol) || '\\n';\n}\nexport function isEOL(text, offset) {\n    return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=format.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner.js';\nvar ParseOptions;\n(function (ParseOptions) {\n    ParseOptions.DEFAULT = {\n        allowTrailingComma: false\n    };\n})(ParseOptions || (ParseOptions = {}));\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport function getLocation(text, position) {\n    var segments = []; // strings or numbers\n    var earlyReturnException = new Object();\n    var previousNode = void 0;\n    var previousNodeInst = {\n        value: {},\n        offset: 0,\n        length: 0,\n        type: 'object',\n        parent: void 0\n    };\n    var isAtPropertyKey = false;\n    function setPreviousNode(value, offset, length, type) {\n        previousNodeInst.value = value;\n        previousNodeInst.offset = offset;\n        previousNodeInst.length = length;\n        previousNodeInst.type = type;\n        previousNodeInst.colonOffset = void 0;\n        previousNode = previousNodeInst;\n    }\n    try {\n        visit(text, {\n            onObjectBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                isAtPropertyKey = position > offset;\n                segments.push(''); // push a placeholder (will be replaced)\n            },\n            onObjectProperty: function (name, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(name, offset, length, 'property');\n                segments[segments.length - 1] = name;\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onObjectEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onArrayBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.push(0);\n            },\n            onArrayEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onLiteralValue: function (value, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(value, offset, length, getLiteralNodeType(value));\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onSeparator: function (sep, offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                if (sep === ':' && previousNode && previousNode.type === 'property') {\n                    previousNode.colonOffset = offset;\n                    isAtPropertyKey = false;\n                    previousNode = void 0;\n                }\n                else if (sep === ',') {\n                    var last = segments[segments.length - 1];\n                    if (typeof last === 'number') {\n                        segments[segments.length - 1] = last + 1;\n                    }\n                    else {\n                        isAtPropertyKey = true;\n                        segments[segments.length - 1] = '';\n                    }\n                    previousNode = void 0;\n                }\n            }\n        });\n    }\n    catch (e) {\n        if (e !== earlyReturnException) {\n            throw e;\n        }\n    }\n    return {\n        path: segments,\n        previousNode: previousNode,\n        isAtPropertyKey: isAtPropertyKey,\n        matches: function (pattern) {\n            var k = 0;\n            for (var i = 0; k < pattern.length && i < segments.length; i++) {\n                if (pattern[k] === segments[i] || pattern[k] === '*') {\n                    k++;\n                }\n                else if (pattern[k] !== '**') {\n                    return false;\n                }\n            }\n            return k === pattern.length;\n        }\n    };\n}\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport function parse(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    if (options === void 0) { options = ParseOptions.DEFAULT; }\n    var currentProperty = null;\n    var currentParent = [];\n    var previousParents = [];\n    function onValue(value) {\n        if (Array.isArray(currentParent)) {\n            currentParent.push(value);\n        }\n        else if (currentProperty) {\n            currentParent[currentProperty] = value;\n        }\n    }\n    var visitor = {\n        onObjectBegin: function () {\n            var object = {};\n            onValue(object);\n            previousParents.push(currentParent);\n            currentParent = object;\n            currentProperty = null;\n        },\n        onObjectProperty: function (name) {\n            currentProperty = name;\n        },\n        onObjectEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onArrayBegin: function () {\n            var array = [];\n            onValue(array);\n            previousParents.push(currentParent);\n            currentParent = array;\n            currentProperty = null;\n        },\n        onArrayEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onLiteralValue: onValue,\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    return currentParent[0];\n}\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport function parseTree(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    if (options === void 0) { options = ParseOptions.DEFAULT; }\n    var currentParent = { type: 'array', offset: -1, length: -1, children: [], parent: void 0 }; // artificial root\n    function ensurePropertyComplete(endOffset) {\n        if (currentParent.type === 'property') {\n            currentParent.length = endOffset - currentParent.offset;\n            currentParent = currentParent.parent;\n        }\n    }\n    function onValue(valueNode) {\n        currentParent.children.push(valueNode);\n        return valueNode;\n    }\n    var visitor = {\n        onObjectBegin: function (offset) {\n            currentParent = onValue({ type: 'object', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onObjectProperty: function (name, offset, length) {\n            currentParent = onValue({ type: 'property', offset: offset, length: -1, parent: currentParent, children: [] });\n            currentParent.children.push({ type: 'string', value: name, offset: offset, length: length, parent: currentParent });\n        },\n        onObjectEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onArrayBegin: function (offset, length) {\n            currentParent = onValue({ type: 'array', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onArrayEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onLiteralValue: function (value, offset, length) {\n            onValue({ type: getLiteralNodeType(value), offset: offset, length: length, parent: currentParent, value: value });\n            ensurePropertyComplete(offset + length);\n        },\n        onSeparator: function (sep, offset, length) {\n            if (currentParent.type === 'property') {\n                if (sep === ':') {\n                    currentParent.colonOffset = offset;\n                }\n                else if (sep === ',') {\n                    ensurePropertyComplete(offset);\n                }\n            }\n        },\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    var result = currentParent.children[0];\n    if (result) {\n        delete result.parent;\n    }\n    return result;\n}\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport function findNodeAtLocation(root, path) {\n    if (!root) {\n        return void 0;\n    }\n    var node = root;\n    for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n        var segment = path_1[_i];\n        if (typeof segment === 'string') {\n            if (node.type !== 'object' || !Array.isArray(node.children)) {\n                return void 0;\n            }\n            var found = false;\n            for (var _a = 0, _b = node.children; _a < _b.length; _a++) {\n                var propertyNode = _b[_a];\n                if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment) {\n                    node = propertyNode.children[1];\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return void 0;\n            }\n        }\n        else {\n            var index = segment;\n            if (node.type !== 'array' || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {\n                return void 0;\n            }\n            node = node.children[index];\n        }\n    }\n    return node;\n}\n/**\n * Gets the JSON path of the given JSON DOM node\n */\nexport function getNodePath(node) {\n    if (!node.parent || !node.parent.children) {\n        return [];\n    }\n    var path = getNodePath(node.parent);\n    if (node.parent.type === 'property') {\n        var key = node.parent.children[0].value;\n        path.push(key);\n    }\n    else if (node.parent.type === 'array') {\n        var index = node.parent.children.indexOf(node);\n        if (index !== -1) {\n            path.push(index);\n        }\n    }\n    return path;\n}\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport function getNodeValue(node) {\n    switch (node.type) {\n        case 'array':\n            return node.children.map(getNodeValue);\n        case 'object':\n            var obj = Object.create(null);\n            for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n                var prop = _a[_i];\n                var valueNode = prop.children[1];\n                if (valueNode) {\n                    obj[prop.children[0].value] = getNodeValue(valueNode);\n                }\n            }\n            return obj;\n        case 'null':\n        case 'string':\n        case 'number':\n        case 'boolean':\n            return node.value;\n        default:\n            return void 0;\n    }\n}\nexport function contains(node, offset, includeRightBound) {\n    if (includeRightBound === void 0) { includeRightBound = false; }\n    return (offset >= node.offset && offset < (node.offset + node.length)) || includeRightBound && (offset === (node.offset + node.length));\n}\n/**\n * Finds the most inner node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\nexport function findNodeAtOffset(node, offset, includeRightBound) {\n    if (includeRightBound === void 0) { includeRightBound = false; }\n    if (contains(node, offset, includeRightBound)) {\n        var children = node.children;\n        if (Array.isArray(children)) {\n            for (var i = 0; i < children.length && children[i].offset <= offset; i++) {\n                var item = findNodeAtOffset(children[i], offset, includeRightBound);\n                if (item) {\n                    return item;\n                }\n            }\n        }\n        return node;\n    }\n    return void 0;\n}\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport function visit(text, visitor, options) {\n    if (options === void 0) { options = ParseOptions.DEFAULT; }\n    var _scanner = createScanner(text, false);\n    function toNoArgVisit(visitFunction) {\n        return visitFunction ? function () { return visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    function toOneArgVisit(visitFunction) {\n        return visitFunction ? function (arg) { return visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    var onObjectBegin = toNoArgVisit(visitor.onObjectBegin), onObjectProperty = toOneArgVisit(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisit(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisit(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);\n    var disallowComments = options && options.disallowComments;\n    var allowTrailingComma = options && options.allowTrailingComma;\n    function scanNext() {\n        while (true) {\n            var token = _scanner.scan();\n            switch (_scanner.getTokenError()) {\n                case 4 /* InvalidUnicode */:\n                    handleError(14 /* InvalidUnicode */);\n                    break;\n                case 5 /* InvalidEscapeCharacter */:\n                    handleError(15 /* InvalidEscapeCharacter */);\n                    break;\n                case 3 /* UnexpectedEndOfNumber */:\n                    handleError(13 /* UnexpectedEndOfNumber */);\n                    break;\n                case 1 /* UnexpectedEndOfComment */:\n                    if (!disallowComments) {\n                        handleError(11 /* UnexpectedEndOfComment */);\n                    }\n                    break;\n                case 2 /* UnexpectedEndOfString */:\n                    handleError(12 /* UnexpectedEndOfString */);\n                    break;\n                case 6 /* InvalidCharacter */:\n                    handleError(16 /* InvalidCharacter */);\n                    break;\n            }\n            switch (token) {\n                case 12 /* LineCommentTrivia */:\n                case 13 /* BlockCommentTrivia */:\n                    if (disallowComments) {\n                        handleError(10 /* InvalidCommentToken */);\n                    }\n                    else {\n                        onComment();\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    handleError(1 /* InvalidSymbol */);\n                    break;\n                case 15 /* Trivia */:\n                case 14 /* LineBreakTrivia */:\n                    break;\n                default:\n                    return token;\n            }\n        }\n    }\n    function handleError(error, skipUntilAfter, skipUntil) {\n        if (skipUntilAfter === void 0) { skipUntilAfter = []; }\n        if (skipUntil === void 0) { skipUntil = []; }\n        onError(error);\n        if (skipUntilAfter.length + skipUntil.length > 0) {\n            var token = _scanner.getToken();\n            while (token !== 17 /* EOF */) {\n                if (skipUntilAfter.indexOf(token) !== -1) {\n                    scanNext();\n                    break;\n                }\n                else if (skipUntil.indexOf(token) !== -1) {\n                    break;\n                }\n                token = scanNext();\n            }\n        }\n    }\n    function parseString(isValue) {\n        var value = _scanner.getTokenValue();\n        if (isValue) {\n            onLiteralValue(value);\n        }\n        else {\n            onObjectProperty(value);\n        }\n        scanNext();\n        return true;\n    }\n    function parseLiteral() {\n        switch (_scanner.getToken()) {\n            case 11 /* NumericLiteral */:\n                var value = 0;\n                try {\n                    value = JSON.parse(_scanner.getTokenValue());\n                    if (typeof value !== 'number') {\n                        handleError(2 /* InvalidNumberFormat */);\n                        value = 0;\n                    }\n                }\n                catch (e) {\n                    handleError(2 /* InvalidNumberFormat */);\n                }\n                onLiteralValue(value);\n                break;\n            case 7 /* NullKeyword */:\n                onLiteralValue(null);\n                break;\n            case 8 /* TrueKeyword */:\n                onLiteralValue(true);\n                break;\n            case 9 /* FalseKeyword */:\n                onLiteralValue(false);\n                break;\n            default:\n                return false;\n        }\n        scanNext();\n        return true;\n    }\n    function parseProperty() {\n        if (_scanner.getToken() !== 10 /* StringLiteral */) {\n            handleError(3 /* PropertyNameExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            return false;\n        }\n        parseString(false);\n        if (_scanner.getToken() === 6 /* ColonToken */) {\n            onSeparator(':');\n            scanNext(); // consume colon\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n        }\n        else {\n            handleError(5 /* ColonExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n        }\n        return true;\n    }\n    function parseObject() {\n        onObjectBegin();\n        scanNext(); // consume open brace\n        var needsComma = false;\n        while (_scanner.getToken() !== 2 /* CloseBraceToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 2 /* CloseBraceToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseProperty()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onObjectEnd();\n        if (_scanner.getToken() !== 2 /* CloseBraceToken */) {\n            handleError(7 /* CloseBraceExpected */, [2 /* CloseBraceToken */], []);\n        }\n        else {\n            scanNext(); // consume close brace\n        }\n        return true;\n    }\n    function parseArray() {\n        onArrayBegin();\n        scanNext(); // consume open bracket\n        var needsComma = false;\n        while (_scanner.getToken() !== 4 /* CloseBracketToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 4 /* CloseBracketToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [4 /* CloseBracketToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onArrayEnd();\n        if (_scanner.getToken() !== 4 /* CloseBracketToken */) {\n            handleError(8 /* CloseBracketExpected */, [4 /* CloseBracketToken */], []);\n        }\n        else {\n            scanNext(); // consume close bracket\n        }\n        return true;\n    }\n    function parseValue() {\n        switch (_scanner.getToken()) {\n            case 3 /* OpenBracketToken */:\n                return parseArray();\n            case 1 /* OpenBraceToken */:\n                return parseObject();\n            case 10 /* StringLiteral */:\n                return parseString(true);\n            default:\n                return parseLiteral();\n        }\n    }\n    scanNext();\n    if (_scanner.getToken() === 17 /* EOF */) {\n        return true;\n    }\n    if (!parseValue()) {\n        handleError(4 /* ValueExpected */, [], []);\n        return false;\n    }\n    if (_scanner.getToken() !== 17 /* EOF */) {\n        handleError(9 /* EndOfFileExpected */, [], []);\n    }\n    return true;\n}\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport function stripComments(text, replaceCh) {\n    var _scanner = createScanner(text), parts = [], kind, offset = 0, pos;\n    do {\n        pos = _scanner.getPosition();\n        kind = _scanner.scan();\n        switch (kind) {\n            case 12 /* LineCommentTrivia */:\n            case 13 /* BlockCommentTrivia */:\n            case 17 /* EOF */:\n                if (offset !== pos) {\n                    parts.push(text.substring(offset, pos));\n                }\n                if (replaceCh !== void 0) {\n                    parts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n                }\n                offset = _scanner.getPosition();\n                break;\n        }\n    } while (kind !== 17 /* EOF */);\n    return parts.join('');\n}\nfunction getLiteralNodeType(value) {\n    switch (typeof value) {\n        case 'boolean': return 'boolean';\n        case 'number': return 'number';\n        case 'string': return 'string';\n        default: return 'null';\n    }\n}\n//# sourceMappingURL=parser.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { format, isEOL } from './format.js';\nimport { parseTree, findNodeAtLocation } from './parser.js';\nexport function removeProperty(text, path, formattingOptions) {\n    return setProperty(text, path, void 0, formattingOptions);\n}\nexport function setProperty(text, originalPath, value, formattingOptions, getInsertionIndex) {\n    var _a;\n    var path = originalPath.slice();\n    var errors = [];\n    var root = parseTree(text, errors);\n    var parent = void 0;\n    var lastSegment = void 0;\n    while (path.length > 0) {\n        lastSegment = path.pop();\n        parent = findNodeAtLocation(root, path);\n        if (parent === void 0 && value !== void 0) {\n            if (typeof lastSegment === 'string') {\n                value = (_a = {}, _a[lastSegment] = value, _a);\n            }\n            else {\n                value = [value];\n            }\n        }\n        else {\n            break;\n        }\n    }\n    if (!parent) {\n        // empty document\n        if (value === void 0) { // delete\n            throw new Error('Can not delete in empty document');\n        }\n        return withFormatting(text, { offset: root ? root.offset : 0, length: root ? root.length : 0, content: JSON.stringify(value) }, formattingOptions);\n    }\n    else if (parent.type === 'object' && typeof lastSegment === 'string' && Array.isArray(parent.children)) {\n        var existing = findNodeAtLocation(parent, [lastSegment]);\n        if (existing !== void 0) {\n            if (value === void 0) { // delete\n                if (!existing.parent) {\n                    throw new Error('Malformed AST');\n                }\n                var propertyIndex = parent.children.indexOf(existing.parent);\n                var removeBegin = void 0;\n                var removeEnd = existing.parent.offset + existing.parent.length;\n                if (propertyIndex > 0) {\n                    // remove the comma of the previous node\n                    var previous = parent.children[propertyIndex - 1];\n                    removeBegin = previous.offset + previous.length;\n                }\n                else {\n                    removeBegin = parent.offset + 1;\n                    if (parent.children.length > 1) {\n                        // remove the comma of the next node\n                        var next = parent.children[1];\n                        removeEnd = next.offset;\n                    }\n                }\n                return withFormatting(text, { offset: removeBegin, length: removeEnd - removeBegin, content: '' }, formattingOptions);\n            }\n            else {\n                // set value of existing property\n                return withFormatting(text, { offset: existing.offset, length: existing.length, content: JSON.stringify(value) }, formattingOptions);\n            }\n        }\n        else {\n            if (value === void 0) { // delete\n                return []; // property does not exist, nothing to do\n            }\n            var newProperty = JSON.stringify(lastSegment) + \": \" + JSON.stringify(value);\n            var index = getInsertionIndex ? getInsertionIndex(parent.children.map(function (p) { return p.children[0].value; })) : parent.children.length;\n            var edit = void 0;\n            if (index > 0) {\n                var previous = parent.children[index - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            else if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty + ',' };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n    }\n    else if (parent.type === 'array' && typeof lastSegment === 'number' && Array.isArray(parent.children)) {\n        var insertIndex = lastSegment;\n        if (insertIndex === -1) {\n            // Insert\n            var newProperty = \"\" + JSON.stringify(value);\n            var edit = void 0;\n            if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                var previous = parent.children[parent.children.length - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n        else {\n            if (value === void 0 && parent.children.length >= 0) {\n                //Removal\n                var removalIndex = lastSegment;\n                var toRemove = parent.children[removalIndex];\n                var edit = void 0;\n                if (parent.children.length === 1) {\n                    // only item\n                    edit = { offset: parent.offset + 1, length: parent.length - 2, content: '' };\n                }\n                else if (parent.children.length - 1 === removalIndex) {\n                    // last item\n                    var previous = parent.children[removalIndex - 1];\n                    var offset = previous.offset + previous.length;\n                    var parentEndOffset = parent.offset + parent.length;\n                    edit = { offset: offset, length: parentEndOffset - 2 - offset, content: '' };\n                }\n                else {\n                    edit = { offset: toRemove.offset, length: parent.children[removalIndex + 1].offset - toRemove.offset, content: '' };\n                }\n                return withFormatting(text, edit, formattingOptions);\n            }\n            else {\n                throw new Error('Array modification not supported yet');\n            }\n        }\n    }\n    else {\n        throw new Error(\"Can not add \" + (typeof lastSegment !== 'number' ? 'index' : 'property') + \" to parent of type \" + parent.type);\n    }\n}\nfunction withFormatting(text, edit, formattingOptions) {\n    // apply the edit\n    var newText = applyEdit(text, edit);\n    // format the new text\n    var begin = edit.offset;\n    var end = edit.offset + edit.content.length;\n    if (edit.length === 0 || edit.content.length === 0) { // insert or remove\n        while (begin > 0 && !isEOL(newText, begin - 1)) {\n            begin--;\n        }\n        while (end < newText.length && !isEOL(newText, end)) {\n            end++;\n        }\n    }\n    var edits = format(newText, { offset: begin, length: end - begin }, formattingOptions);\n    // apply the formatting edits and track the begin and end offsets of the changes\n    for (var i = edits.length - 1; i >= 0; i--) {\n        var edit_1 = edits[i];\n        newText = applyEdit(newText, edit_1);\n        begin = Math.min(begin, edit_1.offset);\n        end = Math.max(end, edit_1.offset + edit_1.length);\n        end += edit_1.content.length - edit_1.length;\n    }\n    // create a single edit with all changes\n    var editLength = text.length - (newText.length - end) - begin;\n    return [{ offset: begin, length: editLength, content: newText.substring(begin, end) }];\n}\nexport function applyEdit(text, edit) {\n    return text.substring(0, edit.offset) + edit.content + text.substring(edit.offset + edit.length);\n}\nexport function isWS(text, offset) {\n    return '\\r\\n \\t'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=edit.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as formatter from './impl/format.js';\nimport * as edit from './impl/edit.js';\nimport * as scanner from './impl/scanner.js';\nimport * as parser from './impl/parser.js';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport var createScanner = scanner.createScanner;\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport var getLocation = parser.getLocation;\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport var parse = parser.parse;\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport var parseTree = parser.parseTree;\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport var findNodeAtLocation = parser.findNodeAtLocation;\n/**\n * Finds the most inner node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\nexport var findNodeAtOffset = parser.findNodeAtOffset;\n/**\n * Gets the JSON path of the given JSON DOM node\n */\nexport var getNodePath = parser.getNodePath;\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport var getNodeValue = parser.getNodeValue;\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport var visit = parser.visit;\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport var stripComments = parser.stripComments;\nexport function printParseErrorCode(code) {\n    switch (code) {\n        case 1 /* InvalidSymbol */: return 'InvalidSymbol';\n        case 2 /* InvalidNumberFormat */: return 'InvalidNumberFormat';\n        case 3 /* PropertyNameExpected */: return 'PropertyNameExpected';\n        case 4 /* ValueExpected */: return 'ValueExpected';\n        case 5 /* ColonExpected */: return 'ColonExpected';\n        case 6 /* CommaExpected */: return 'CommaExpected';\n        case 7 /* CloseBraceExpected */: return 'CloseBraceExpected';\n        case 8 /* CloseBracketExpected */: return 'CloseBracketExpected';\n        case 9 /* EndOfFileExpected */: return 'EndOfFileExpected';\n        case 10 /* InvalidCommentToken */: return 'InvalidCommentToken';\n        case 11 /* UnexpectedEndOfComment */: return 'UnexpectedEndOfComment';\n        case 12 /* UnexpectedEndOfString */: return 'UnexpectedEndOfString';\n        case 13 /* UnexpectedEndOfNumber */: return 'UnexpectedEndOfNumber';\n        case 14 /* InvalidUnicode */: return 'InvalidUnicode';\n        case 15 /* InvalidEscapeCharacter */: return 'InvalidEscapeCharacter';\n        case 16 /* InvalidCharacter */: return 'InvalidCharacter';\n    }\n    return '<unknown ParseErrorCode>';\n}\n/**\n * Computes the edits needed to format a JSON document.\n *\n * @param documentText The input text\n * @param range The range to format or `undefined` to format the full content\n * @param options The formatting options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function format(documentText, range, options) {\n    return formatter.format(documentText, range, options);\n}\n/**\n * Computes the edits needed to modify a value in the JSON document.\n *\n * @param documentText The input text\n * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n * If the path points to an non-existing property or item, it will be created.\n * @param value The new value for the specified property or item. If the value is undefined,\n * the property or item will be removed.\n * @param options Options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function modify(text, path, value, options) {\n    return edit.setProperty(text, path, value, options.formattingOptions, options.getInsertionIndex);\n}\n/**\n * Applies edits to a input string.\n */\nexport function applyEdits(text, edits) {\n    for (var i = edits.length - 1; i >= 0; i--) {\n        text = edit.applyEdit(text, edits[i]);\n    }\n    return text;\n}\n//# sourceMappingURL=main.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as json from './_deps/jsonc-parser/main.js';\nexport function createTokenizationSupport(supportComments) {\n    return {\n        getInitialState: function () { return new JSONState(null, null, false); },\n        tokenize: function (line, state, offsetDelta, stopAtOffset) { return tokenize(supportComments, line, state, offsetDelta, stopAtOffset); }\n    };\n}\nexport var TOKEN_DELIM_OBJECT = 'delimiter.bracket.json';\nexport var TOKEN_DELIM_ARRAY = 'delimiter.array.json';\nexport var TOKEN_DELIM_COLON = 'delimiter.colon.json';\nexport var TOKEN_DELIM_COMMA = 'delimiter.comma.json';\nexport var TOKEN_VALUE_BOOLEAN = 'keyword.json';\nexport var TOKEN_VALUE_NULL = 'keyword.json';\nexport var TOKEN_VALUE_STRING = 'string.value.json';\nexport var TOKEN_VALUE_NUMBER = 'number.json';\nexport var TOKEN_PROPERTY_NAME = 'string.key.json';\nexport var TOKEN_COMMENT_BLOCK = 'comment.block.json';\nexport var TOKEN_COMMENT_LINE = 'comment.line.json';\nvar JSONState = /** @class */ (function () {\n    function JSONState(state, scanError, lastWasColon) {\n        this._state = state;\n        this.scanError = scanError;\n        this.lastWasColon = lastWasColon;\n    }\n    JSONState.prototype.clone = function () {\n        return new JSONState(this._state, this.scanError, this.lastWasColon);\n    };\n    JSONState.prototype.equals = function (other) {\n        if (other === this) {\n            return true;\n        }\n        if (!other || !(other instanceof JSONState)) {\n            return false;\n        }\n        return this.scanError === other.scanError &&\n            this.lastWasColon === other.lastWasColon;\n    };\n    JSONState.prototype.getStateData = function () {\n        return this._state;\n    };\n    JSONState.prototype.setStateData = function (state) {\n        this._state = state;\n    };\n    return JSONState;\n}());\nfunction tokenize(comments, line, state, offsetDelta, stopAtOffset) {\n    if (offsetDelta === void 0) { offsetDelta = 0; }\n    // handle multiline strings and block comments\n    var numberOfInsertedCharacters = 0, adjustOffset = false;\n    switch (state.scanError) {\n        case 2 /* UnexpectedEndOfString */:\n            line = '\"' + line;\n            numberOfInsertedCharacters = 1;\n            break;\n        case 1 /* UnexpectedEndOfComment */:\n            line = '/*' + line;\n            numberOfInsertedCharacters = 2;\n            break;\n    }\n    var scanner = json.createScanner(line), kind, ret, lastWasColon = state.lastWasColon;\n    ret = {\n        tokens: [],\n        endState: state.clone()\n    };\n    while (true) {\n        var offset = offsetDelta + scanner.getPosition(), type = '';\n        kind = scanner.scan();\n        if (kind === 17 /* EOF */) {\n            break;\n        }\n        // Check that the scanner has advanced\n        if (offset === offsetDelta + scanner.getPosition()) {\n            throw new Error('Scanner did not advance, next 3 characters are: ' + line.substr(scanner.getPosition(), 3));\n        }\n        // In case we inserted /* or \" character, we need to\n        // adjust the offset of all tokens (except the first)\n        if (adjustOffset) {\n            offset -= numberOfInsertedCharacters;\n        }\n        adjustOffset = numberOfInsertedCharacters > 0;\n        // brackets and type\n        switch (kind) {\n            case 1 /* OpenBraceToken */:\n                type = TOKEN_DELIM_OBJECT;\n                lastWasColon = false;\n                break;\n            case 2 /* CloseBraceToken */:\n                type = TOKEN_DELIM_OBJECT;\n                lastWasColon = false;\n                break;\n            case 3 /* OpenBracketToken */:\n                type = TOKEN_DELIM_ARRAY;\n                lastWasColon = false;\n                break;\n            case 4 /* CloseBracketToken */:\n                type = TOKEN_DELIM_ARRAY;\n                lastWasColon = false;\n                break;\n            case 6 /* ColonToken */:\n                type = TOKEN_DELIM_COLON;\n                lastWasColon = true;\n                break;\n            case 5 /* CommaToken */:\n                type = TOKEN_DELIM_COMMA;\n                lastWasColon = false;\n                break;\n            case 8 /* TrueKeyword */:\n            case 9 /* FalseKeyword */:\n                type = TOKEN_VALUE_BOOLEAN;\n                lastWasColon = false;\n                break;\n            case 7 /* NullKeyword */:\n                type = TOKEN_VALUE_NULL;\n                lastWasColon = false;\n                break;\n            case 10 /* StringLiteral */:\n                type = lastWasColon ? TOKEN_VALUE_STRING : TOKEN_PROPERTY_NAME;\n                lastWasColon = false;\n                break;\n            case 11 /* NumericLiteral */:\n                type = TOKEN_VALUE_NUMBER;\n                lastWasColon = false;\n                break;\n        }\n        // comments, iff enabled\n        if (comments) {\n            switch (kind) {\n                case 12 /* LineCommentTrivia */:\n                    type = TOKEN_COMMENT_LINE;\n                    break;\n                case 13 /* BlockCommentTrivia */:\n                    type = TOKEN_COMMENT_BLOCK;\n                    break;\n            }\n        }\n        ret.endState = new JSONState(state.getStateData(), scanner.getTokenError(), lastWasColon);\n        ret.tokens.push({\n            startIndex: offset,\n            scopes: type\n        });\n    }\n    return ret;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { WorkerManager } from './workerManager.js';\nimport * as languageFeatures from './languageFeatures.js';\nimport { createTokenizationSupport } from './tokenization.js';\nexport function setupMode(defaults) {\n    var disposables = [];\n    var client = new WorkerManager(defaults);\n    disposables.push(client);\n    var worker = function () {\n        var uris = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            uris[_i] = arguments[_i];\n        }\n        return client.getLanguageServiceWorker.apply(client, uris);\n    };\n    var languageId = defaults.languageId;\n    disposables.push(monaco.languages.registerCompletionItemProvider(languageId, new languageFeatures.CompletionAdapter(worker)));\n    disposables.push(monaco.languages.registerHoverProvider(languageId, new languageFeatures.HoverAdapter(worker)));\n    disposables.push(monaco.languages.registerDocumentSymbolProvider(languageId, new languageFeatures.DocumentSymbolAdapter(worker)));\n    disposables.push(monaco.languages.registerDocumentFormattingEditProvider(languageId, new languageFeatures.DocumentFormattingEditProvider(worker)));\n    disposables.push(monaco.languages.registerDocumentRangeFormattingEditProvider(languageId, new languageFeatures.DocumentRangeFormattingEditProvider(worker)));\n    disposables.push(new languageFeatures.DiagnosticsAdapter(languageId, worker, defaults));\n    disposables.push(monaco.languages.setTokensProvider(languageId, createTokenizationSupport(true)));\n    disposables.push(monaco.languages.setLanguageConfiguration(languageId, richEditConfiguration));\n    disposables.push(monaco.languages.registerColorProvider(languageId, new languageFeatures.DocumentColorAdapter(worker)));\n    disposables.push(monaco.languages.registerFoldingRangeProvider(languageId, new languageFeatures.FoldingRangeAdapter(worker)));\n}\nvar richEditConfiguration = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\[\\{\\]\\}\\:\\\"\\,\\s]+)/g,\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}', notIn: ['string'] },\n        { open: '[', close: ']', notIn: ['string'] },\n        { open: '\"', close: '\"', notIn: ['string'] }\n    ]\n};\n"],"sourceRoot":""}