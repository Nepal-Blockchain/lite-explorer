{"version":3,"sources":["webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/monaco-editor/esm/vs/language/json/workerManager.js","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/monaco-editor/esm/vs/language/json/languageFeatures.js","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/format.js","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/parser.js","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/edit.js","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/monaco-editor/esm/vs/language/json/tokenization.js","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/monaco-editor/esm/vs/language/json/jsonMode.js"],"names":["Promise","monaco","STOP_WHEN_IDLE_FOR","WorkerManager","defaults","_this","this","_defaults","_worker","_idleCheckInterval","setInterval","_checkIfIdle","_lastUsedTime","_configChangeListener","onDidChange","_stopWorker","prototype","dispose","_client","clearInterval","timePassedSinceLastUsed","Date","now","_getClient","editor","createWebWorker","moduleId","label","languageId","createData","languageSettings","diagnosticsOptions","getProxy","getLanguageServiceWorker","resources","_i","arguments","length","toShallowCancelPromise","then","client","_","withSyncedResources","p","completeCallback","errorCallback","r","c","e","Position","create","line","character","is","value","candidate","Is","objectLiteral","number","Range","one","two","three","four","start","end","Error","Location","uri","range","defined","string","undefined","Color","red","green","blue","alpha","ColorInformation","color","ColorPresentation","textEdit","additionalTextEdits","TextEdit","typedArray","FoldingRangeKind","FoldingRange","startLine","endLine","startCharacter","endCharacter","kind","result","DiagnosticRelatedInformation","location","message","DiagnosticSeverity","Warning","Information","Hint","Diagnostic","severity","code","source","relatedInformation","Command","title","command","args","replace","newText","insert","position","del","TextDocumentEdit","textDocument","edits","VersionedTextDocumentIdentifier","Array","isArray","WorkspaceEdit","changes","documentChanges","TextEditChangeImpl","push","delete","add","edit","all","clear","splice","WorkspaceChange","workspaceEdit","_textEditChanges","Object","_workspaceEdit","forEach","textDocumentEdit","textEditChange","keys","key","defineProperty","get","enumerable","configurable","getTextEditChange","TextDocumentIdentifier","version","TextDocumentItem","text","MarkupKind","PlainText","Markdown","MarkupContent","CompletionItemKind","Text","Method","Function","Constructor","Field","Variable","Class","Interface","Module","Property","Unit","Value","Enum","Keyword","Snippet","File","Reference","Folder","EnumMember","Constant","Struct","Event","Operator","TypeParameter","InsertTextFormat","CompletionItem","CompletionList","items","isIncomplete","MarkedString","fromPlainText","plainText","language","Hover","contents","ParameterInformation","documentation","SignatureInformation","parameters","DocumentHighlightKind","Read","Write","DocumentHighlight","SymbolKind","Namespace","Package","String","Number","Boolean","Key","Null","SymbolInformation","name","containerName","DocumentSymbol","detail","selectionRange","children","deprecated","boolean","CodeActionKind","QuickFix","Refactor","RefactorExtract","RefactorInline","RefactorRewrite","Source","SourceOrganizeImports","CodeActionContext","diagnostics","only","CodeAction","commandOrEdit","CodeLens","data","FormattingOptions","tabSize","insertSpaces","DocumentLink","target","EOL","TextDocument","content","FullTextDocument","lineCount","func","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","mergeSort","a","b","diff","lastModifiedOffset","i","startOffset","endOffset","substring","compare","left","slice","right","leftIdx","rightIdx","ret","TextDocumentSaveReason","Manual","AfterDelay","FocusOut","_uri","_languageId","_version","_content","_lineOffsets","update","event","getLineOffsets","lineOffsets","isLineStart","ch","charAt","offset","Math","max","min","low","high","mid","floor","lineOffset","nextLineOffset","toString","call","check","every","Uri","languageFeatures_Range","DiagnosticsAdapter","_disposables","_listener","onModelAdd","model","modeId","getModeId","handle","onDidChangeContent","clearTimeout","setTimeout","_doValidate","onModelRemoved","setModelMarkers","uriStr","listener","onDidCreateModel","onWillDisposeModel","_resetSchema","onDidChangeModelLanguage","getModels","d","resource","worker","resetSchema","doValidation","markers","map","toDiagnostics","getModel","err","console","error","toSeverity","lsSeverity","MarkerSeverity","Info","diag","startLineNumber","startColumn","endLineNumber","endColumn","fromPosition","column","lineNumber","fromRange","toRange","toCompletionItemKind","mItemKind","languages","fromCompletionItemKind","toTextEdit","toCompletionItem","entry","insertText","sortText","filterText","fromMarkdownString","fromCompletionItem","item","insertTextFormat","languageFeatures_CompletionAdapter","CompletionAdapter","provideCompletionItems","token","wordInfo","getWordUntilPosition","wireCancellationToken","doComplete","info","isMarkupContent","thing","toMarkdownString","toMarkedStringArray","HoverAdapter","provideHover","doHover","toLocation","parse","toSymbolKind","mKind","DocumentSymbolAdapter","provideDocumentSymbols","findDocumentSymbols","fromFormattingOptions","options","DocumentFormattingEditProvider","provideDocumentFormattingEdits","format","DocumentRangeFormattingEditProvider","provideDocumentRangeFormattingEdits","DocumentColorAdapter","provideDocumentColors","findDocumentColors","infos","provideColorPresentations","getColorPresentations","presentations","presentation","FoldingRangeAdapter","provideFoldingRanges","context","ranges","toFoldingRangeKind","Comment","Imports","Region","promise","cancel","onCancellationRequested","createScanner","ignoreTrivia","pos","len","tokenOffset","scanError","scanHexDigits","count","exact","digits","charCodeAt","setPosition","newPosition","scanNumber","isDigit","scanString","ch_1","fromCharCode","isLineBreak","scanNext","isWhiteSpace","commentClosed","isUnknownContentCharacter","scanNextNonTrivia","getPosition","scan","getToken","getTokenValue","getTokenOffset","getTokenLength","getTokenError","documentText","initialIndentLevel","formatText","formatTextStart","rangeStart","rangeEnd","isEOL","computeIndentLevel","eol","getEOL","lineBreak","indentLevel","indentValue","repeat","scanner","hasError","newLineAndIndent","editOperations","addEdit","firstToken","firstTokenStart","initialIndent","firstTokenEnd","secondToken","replaceContent","commentTokenStart","secondTokenStart","s","nChars","indexOf","getLocation","segments","earlyReturnException","previousNode","previousNodeInst","type","parent","isAtPropertyKey","setPreviousNode","colonOffset","visit","onObjectBegin","onObjectProperty","onObjectEnd","pop","onArrayBegin","onArrayEnd","onLiteralValue","getLiteralNodeType","onSeparator","sep","last","path","matches","pattern","k","errors","currentProperty","currentParent","previousParents","onValue","visitor","object","array","onError","parseTree","ensurePropertyComplete","valueNode","findNodeAtLocation","root","node","path_1","segment","found","_a","_b","propertyNode","index","getNodePath","getNodeValue","obj","prop","contains","includeRightBound","findNodeAtOffset","_scanner","toNoArgVisit","visitFunction","toOneArgVisit","arg","onComment","disallowComments","allowTrailingComma","handleError","skipUntilAfter","skipUntil","parseString","isValue","parseLiteral","JSON","parseProperty","parseValue","parseObject","needsComma","parseArray","stripComments","replaceCh","parts","join","removeProperty","formattingOptions","setProperty","getInsertionIndex","lastSegment","existing","propertyIndex","removeBegin","removeEnd","previous","next","withFormatting","stringify","newProperty","insertIndex","removalIndex","toRemove","parentEndOffset","applyEdit","begin","edit_1","editLength","isWS","main_createScanner","main_getLocation","main_parse","main_parseTree","main_findNodeAtLocation","main_findNodeAtOffset","main_getNodePath","main_getNodeValue","main_visit","main_stripComments","main_format","modify","createTokenizationSupport","supportComments","getInitialState","JSONState","tokenize","state","offsetDelta","stopAtOffset","TOKEN_DELIM_OBJECT","TOKEN_DELIM_ARRAY","TOKEN_DELIM_COLON","TOKEN_DELIM_COMMA","TOKEN_VALUE_BOOLEAN","TOKEN_VALUE_NULL","TOKEN_VALUE_STRING","TOKEN_VALUE_NUMBER","TOKEN_PROPERTY_NAME","TOKEN_COMMENT_BLOCK","TOKEN_COMMENT_LINE","lastWasColon","_state","clone","equals","other","getStateData","setStateData","comments","numberOfInsertedCharacters","adjustOffset","tokens","endState","substr","startIndex","scopes","__webpack_require__","__webpack_exports__","setupMode","disposables","uris","apply","registerCompletionItemProvider","registerHoverProvider","registerDocumentSymbolProvider","registerDocumentFormattingEditProvider","registerDocumentRangeFormattingEditProvider","setTokensProvider","setLanguageConfiguration","richEditConfiguration","registerColorProvider","registerFoldingRangeProvider","wordPattern","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn"],"mappings":"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","file":"js/d47cb1c6042209f2f09c.bundle.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nvar Promise = monaco.Promise;\nvar STOP_WHEN_IDLE_FOR = 2 * 60 * 1000; // 2min\nvar WorkerManager = /** @class */ (function () {\n    function WorkerManager(defaults) {\n        var _this = this;\n        this._defaults = defaults;\n        this._worker = null;\n        this._idleCheckInterval = setInterval(function () { return _this._checkIfIdle(); }, 30 * 1000);\n        this._lastUsedTime = 0;\n        this._configChangeListener = this._defaults.onDidChange(function () { return _this._stopWorker(); });\n    }\n    WorkerManager.prototype._stopWorker = function () {\n        if (this._worker) {\n            this._worker.dispose();\n            this._worker = null;\n        }\n        this._client = null;\n    };\n    WorkerManager.prototype.dispose = function () {\n        clearInterval(this._idleCheckInterval);\n        this._configChangeListener.dispose();\n        this._stopWorker();\n    };\n    WorkerManager.prototype._checkIfIdle = function () {\n        if (!this._worker) {\n            return;\n        }\n        var timePassedSinceLastUsed = Date.now() - this._lastUsedTime;\n        if (timePassedSinceLastUsed > STOP_WHEN_IDLE_FOR) {\n            this._stopWorker();\n        }\n    };\n    WorkerManager.prototype._getClient = function () {\n        this._lastUsedTime = Date.now();\n        if (!this._client) {\n            this._worker = monaco.editor.createWebWorker({\n                // module that exports the create() method and returns a `JSONWorker` instance\n                moduleId: 'vs/language/json/jsonWorker',\n                label: this._defaults.languageId,\n                // passed in to the create() method\n                createData: {\n                    languageSettings: this._defaults.diagnosticsOptions,\n                    languageId: this._defaults.languageId\n                }\n            });\n            this._client = this._worker.getProxy();\n        }\n        return this._client;\n    };\n    WorkerManager.prototype.getLanguageServiceWorker = function () {\n        var _this = this;\n        var resources = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            resources[_i] = arguments[_i];\n        }\n        var _client;\n        return toShallowCancelPromise(this._getClient().then(function (client) {\n            _client = client;\n        }).then(function (_) {\n            return _this._worker.withSyncedResources(resources);\n        }).then(function (_) { return _client; }));\n    };\n    return WorkerManager;\n}());\nexport { WorkerManager };\nfunction toShallowCancelPromise(p) {\n    var completeCallback;\n    var errorCallback;\n    var r = new Promise(function (c, e) {\n        completeCallback = c;\n        errorCallback = e;\n    }, function () { });\n    p.then(completeCallback, errorCallback);\n    return r;\n}\n","/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n'use strict';\r\n/**\r\n * The Position namespace provides helper functions to work with\r\n * [Position](#Position) literals.\r\n */\r\nexport var Position;\r\n(function (Position) {\r\n    /**\r\n     * Creates a new Position literal from the given line and character.\r\n     * @param line The position's line.\r\n     * @param character The position's character.\r\n     */\r\n    function create(line, character) {\r\n        return { line: line, character: character };\r\n    }\r\n    Position.create = create;\r\n    /**\r\n     * Checks whether the given liternal conforms to the [Position](#Position) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(candidate) && Is.number(candidate.line) && Is.number(candidate.character);\r\n    }\r\n    Position.is = is;\r\n})(Position || (Position = {}));\r\n/**\r\n * The Range namespace provides helper functions to work with\r\n * [Range](#Range) literals.\r\n */\r\nexport var Range;\r\n(function (Range) {\r\n    function create(one, two, three, four) {\r\n        if (Is.number(one) && Is.number(two) && Is.number(three) && Is.number(four)) {\r\n            return { start: Position.create(one, two), end: Position.create(three, four) };\r\n        }\r\n        else if (Position.is(one) && Position.is(two)) {\r\n            return { start: one, end: two };\r\n        }\r\n        else {\r\n            throw new Error(\"Range#create called with invalid arguments[\" + one + \", \" + two + \", \" + three + \", \" + four + \"]\");\r\n        }\r\n    }\r\n    Range.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Range](#Range) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\r\n    }\r\n    Range.is = is;\r\n})(Range || (Range = {}));\r\n/**\r\n * The Location namespace provides helper functions to work with\r\n * [Location](#Location) literals.\r\n */\r\nexport var Location;\r\n(function (Location) {\r\n    /**\r\n     * Creates a Location literal.\r\n     * @param uri The location's uri.\r\n     * @param range The location's range.\r\n     */\r\n    function create(uri, range) {\r\n        return { uri: uri, range: range };\r\n    }\r\n    Location.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Location](#Location) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\r\n    }\r\n    Location.is = is;\r\n})(Location || (Location = {}));\r\n/**\r\n * The Color namespace provides helper functions to work with\r\n * [Color](#Color) literals.\r\n */\r\nexport var Color;\r\n(function (Color) {\r\n    /**\r\n     * Creates a new Color literal.\r\n     */\r\n    function create(red, green, blue, alpha) {\r\n        return {\r\n            red: red,\r\n            green: green,\r\n            blue: blue,\r\n            alpha: alpha,\r\n        };\r\n    }\r\n    Color.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Color](#Color) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.number(candidate.red)\r\n            && Is.number(candidate.green)\r\n            && Is.number(candidate.blue)\r\n            && Is.number(candidate.alpha);\r\n    }\r\n    Color.is = is;\r\n})(Color || (Color = {}));\r\n/**\r\n * The ColorInformation namespace provides helper functions to work with\r\n * [ColorInformation](#ColorInformation) literals.\r\n */\r\nexport var ColorInformation;\r\n(function (ColorInformation) {\r\n    /**\r\n     * Creates a new ColorInformation literal.\r\n     */\r\n    function create(range, color) {\r\n        return {\r\n            range: range,\r\n            color: color,\r\n        };\r\n    }\r\n    ColorInformation.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Range.is(candidate.range) && Color.is(candidate.color);\r\n    }\r\n    ColorInformation.is = is;\r\n})(ColorInformation || (ColorInformation = {}));\r\n/**\r\n * The Color namespace provides helper functions to work with\r\n * [ColorPresentation](#ColorPresentation) literals.\r\n */\r\nexport var ColorPresentation;\r\n(function (ColorPresentation) {\r\n    /**\r\n     * Creates a new ColorInformation literal.\r\n     */\r\n    function create(label, textEdit, additionalTextEdits) {\r\n        return {\r\n            label: label,\r\n            textEdit: textEdit,\r\n            additionalTextEdits: additionalTextEdits,\r\n        };\r\n    }\r\n    ColorPresentation.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.string(candidate.label)\r\n            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))\r\n            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\r\n    }\r\n    ColorPresentation.is = is;\r\n})(ColorPresentation || (ColorPresentation = {}));\r\n/**\r\n * Enum of known range kinds\r\n */\r\nexport var FoldingRangeKind;\r\n(function (FoldingRangeKind) {\r\n    /**\r\n     * Folding range for a comment\r\n     */\r\n    FoldingRangeKind[\"Comment\"] = \"comment\";\r\n    /**\r\n     * Folding range for a imports or includes\r\n     */\r\n    FoldingRangeKind[\"Imports\"] = \"imports\";\r\n    /**\r\n     * Folding range for a region (e.g. `#region`)\r\n     */\r\n    FoldingRangeKind[\"Region\"] = \"region\";\r\n})(FoldingRangeKind || (FoldingRangeKind = {}));\r\n/**\r\n * The folding range namespace provides helper functions to work with\r\n * [FoldingRange](#FoldingRange) literals.\r\n */\r\nexport var FoldingRange;\r\n(function (FoldingRange) {\r\n    /**\r\n     * Creates a new FoldingRange literal.\r\n     */\r\n    function create(startLine, endLine, startCharacter, endCharacter, kind) {\r\n        var result = {\r\n            startLine: startLine,\r\n            endLine: endLine\r\n        };\r\n        if (Is.defined(startCharacter)) {\r\n            result.startCharacter = startCharacter;\r\n        }\r\n        if (Is.defined(endCharacter)) {\r\n            result.endCharacter = endCharacter;\r\n        }\r\n        if (Is.defined(kind)) {\r\n            result.kind = kind;\r\n        }\r\n        return result;\r\n    }\r\n    FoldingRange.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [FoldingRange](#FoldingRange) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.number(candidate.startLine) && Is.number(candidate.startLine)\r\n            && (Is.undefined(candidate.startCharacter) || Is.number(candidate.startCharacter))\r\n            && (Is.undefined(candidate.endCharacter) || Is.number(candidate.endCharacter))\r\n            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\r\n    }\r\n    FoldingRange.is = is;\r\n})(FoldingRange || (FoldingRange = {}));\r\n/**\r\n * The DiagnosticRelatedInformation namespace provides helper functions to work with\r\n * [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) literals.\r\n */\r\nexport var DiagnosticRelatedInformation;\r\n(function (DiagnosticRelatedInformation) {\r\n    /**\r\n     * Creates a new DiagnosticRelatedInformation literal.\r\n     */\r\n    function create(location, message) {\r\n        return {\r\n            location: location,\r\n            message: message\r\n        };\r\n    }\r\n    DiagnosticRelatedInformation.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\r\n    }\r\n    DiagnosticRelatedInformation.is = is;\r\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\r\n/**\r\n * The diagnostic's severity.\r\n */\r\nexport var DiagnosticSeverity;\r\n(function (DiagnosticSeverity) {\r\n    /**\r\n     * Reports an error.\r\n     */\r\n    DiagnosticSeverity.Error = 1;\r\n    /**\r\n     * Reports a warning.\r\n     */\r\n    DiagnosticSeverity.Warning = 2;\r\n    /**\r\n     * Reports an information.\r\n     */\r\n    DiagnosticSeverity.Information = 3;\r\n    /**\r\n     * Reports a hint.\r\n     */\r\n    DiagnosticSeverity.Hint = 4;\r\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\r\n/**\r\n * The Diagnostic namespace provides helper functions to work with\r\n * [Diagnostic](#Diagnostic) literals.\r\n */\r\nexport var Diagnostic;\r\n(function (Diagnostic) {\r\n    /**\r\n     * Creates a new Diagnostic literal.\r\n     */\r\n    function create(range, message, severity, code, source, relatedInformation) {\r\n        var result = { range: range, message: message };\r\n        if (Is.defined(severity)) {\r\n            result.severity = severity;\r\n        }\r\n        if (Is.defined(code)) {\r\n            result.code = code;\r\n        }\r\n        if (Is.defined(source)) {\r\n            result.source = source;\r\n        }\r\n        if (Is.defined(relatedInformation)) {\r\n            result.relatedInformation = relatedInformation;\r\n        }\r\n        return result;\r\n    }\r\n    Diagnostic.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Diagnostic](#Diagnostic) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate)\r\n            && Range.is(candidate.range)\r\n            && Is.string(candidate.message)\r\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\r\n            && (Is.number(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\r\n            && (Is.string(candidate.source) || Is.undefined(candidate.source))\r\n            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\r\n    }\r\n    Diagnostic.is = is;\r\n})(Diagnostic || (Diagnostic = {}));\r\n/**\r\n * The Command namespace provides helper functions to work with\r\n * [Command](#Command) literals.\r\n */\r\nexport var Command;\r\n(function (Command) {\r\n    /**\r\n     * Creates a new Command literal.\r\n     */\r\n    function create(title, command) {\r\n        var args = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            args[_i - 2] = arguments[_i];\r\n        }\r\n        var result = { title: title, command: command };\r\n        if (Is.defined(args) && args.length > 0) {\r\n            result.arguments = args;\r\n        }\r\n        return result;\r\n    }\r\n    Command.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [Command](#Command) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\r\n    }\r\n    Command.is = is;\r\n})(Command || (Command = {}));\r\n/**\r\n * The TextEdit namespace provides helper function to create replace,\r\n * insert and delete edits more easily.\r\n */\r\nexport var TextEdit;\r\n(function (TextEdit) {\r\n    /**\r\n     * Creates a replace text edit.\r\n     * @param range The range of text to be replaced.\r\n     * @param newText The new text.\r\n     */\r\n    function replace(range, newText) {\r\n        return { range: range, newText: newText };\r\n    }\r\n    TextEdit.replace = replace;\r\n    /**\r\n     * Creates a insert text edit.\r\n     * @param position The position to insert the text at.\r\n     * @param newText The text to be inserted.\r\n     */\r\n    function insert(position, newText) {\r\n        return { range: { start: position, end: position }, newText: newText };\r\n    }\r\n    TextEdit.insert = insert;\r\n    /**\r\n     * Creates a delete text edit.\r\n     * @param range The range of text to be deleted.\r\n     */\r\n    function del(range) {\r\n        return { range: range, newText: '' };\r\n    }\r\n    TextEdit.del = del;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(candidate)\r\n            && Is.string(candidate.newText)\r\n            && Range.is(candidate.range);\r\n    }\r\n    TextEdit.is = is;\r\n})(TextEdit || (TextEdit = {}));\r\n/**\r\n * The TextDocumentEdit namespace provides helper function to create\r\n * an edit that manipulates a text document.\r\n */\r\nexport var TextDocumentEdit;\r\n(function (TextDocumentEdit) {\r\n    /**\r\n     * Creates a new `TextDocumentEdit`\r\n     */\r\n    function create(textDocument, edits) {\r\n        return { textDocument: textDocument, edits: edits };\r\n    }\r\n    TextDocumentEdit.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate)\r\n            && VersionedTextDocumentIdentifier.is(candidate.textDocument)\r\n            && Array.isArray(candidate.edits);\r\n    }\r\n    TextDocumentEdit.is = is;\r\n})(TextDocumentEdit || (TextDocumentEdit = {}));\r\nexport var WorkspaceEdit;\r\n(function (WorkspaceEdit) {\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate &&\r\n            (candidate.changes !== void 0 || candidate.documentChanges !== void 0) &&\r\n            (candidate.documentChanges === void 0 || Is.typedArray(candidate.documentChanges, TextDocumentEdit.is));\r\n    }\r\n    WorkspaceEdit.is = is;\r\n})(WorkspaceEdit || (WorkspaceEdit = {}));\r\nvar TextEditChangeImpl = /** @class */ (function () {\r\n    function TextEditChangeImpl(edits) {\r\n        this.edits = edits;\r\n    }\r\n    TextEditChangeImpl.prototype.insert = function (position, newText) {\r\n        this.edits.push(TextEdit.insert(position, newText));\r\n    };\r\n    TextEditChangeImpl.prototype.replace = function (range, newText) {\r\n        this.edits.push(TextEdit.replace(range, newText));\r\n    };\r\n    TextEditChangeImpl.prototype.delete = function (range) {\r\n        this.edits.push(TextEdit.del(range));\r\n    };\r\n    TextEditChangeImpl.prototype.add = function (edit) {\r\n        this.edits.push(edit);\r\n    };\r\n    TextEditChangeImpl.prototype.all = function () {\r\n        return this.edits;\r\n    };\r\n    TextEditChangeImpl.prototype.clear = function () {\r\n        this.edits.splice(0, this.edits.length);\r\n    };\r\n    return TextEditChangeImpl;\r\n}());\r\n/**\r\n * A workspace change helps constructing changes to a workspace.\r\n */\r\nvar WorkspaceChange = /** @class */ (function () {\r\n    function WorkspaceChange(workspaceEdit) {\r\n        var _this = this;\r\n        this._textEditChanges = Object.create(null);\r\n        if (workspaceEdit) {\r\n            this._workspaceEdit = workspaceEdit;\r\n            if (workspaceEdit.documentChanges) {\r\n                workspaceEdit.documentChanges.forEach(function (textDocumentEdit) {\r\n                    var textEditChange = new TextEditChangeImpl(textDocumentEdit.edits);\r\n                    _this._textEditChanges[textDocumentEdit.textDocument.uri] = textEditChange;\r\n                });\r\n            }\r\n            else if (workspaceEdit.changes) {\r\n                Object.keys(workspaceEdit.changes).forEach(function (key) {\r\n                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\r\n                    _this._textEditChanges[key] = textEditChange;\r\n                });\r\n            }\r\n        }\r\n    }\r\n    Object.defineProperty(WorkspaceChange.prototype, \"edit\", {\r\n        /**\r\n         * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal\r\n         * use to be returned from a workspace edit operation like rename.\r\n         */\r\n        get: function () {\r\n            return this._workspaceEdit;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    WorkspaceChange.prototype.getTextEditChange = function (key) {\r\n        if (VersionedTextDocumentIdentifier.is(key)) {\r\n            if (!this._workspaceEdit) {\r\n                this._workspaceEdit = {\r\n                    documentChanges: []\r\n                };\r\n            }\r\n            if (!this._workspaceEdit.documentChanges) {\r\n                throw new Error('Workspace edit is not configured for versioned document changes.');\r\n            }\r\n            var textDocument = key;\r\n            var result = this._textEditChanges[textDocument.uri];\r\n            if (!result) {\r\n                var edits = [];\r\n                var textDocumentEdit = {\r\n                    textDocument: textDocument,\r\n                    edits: edits\r\n                };\r\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\r\n                result = new TextEditChangeImpl(edits);\r\n                this._textEditChanges[textDocument.uri] = result;\r\n            }\r\n            return result;\r\n        }\r\n        else {\r\n            if (!this._workspaceEdit) {\r\n                this._workspaceEdit = {\r\n                    changes: Object.create(null)\r\n                };\r\n            }\r\n            if (!this._workspaceEdit.changes) {\r\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\r\n            }\r\n            var result = this._textEditChanges[key];\r\n            if (!result) {\r\n                var edits = [];\r\n                this._workspaceEdit.changes[key] = edits;\r\n                result = new TextEditChangeImpl(edits);\r\n                this._textEditChanges[key] = result;\r\n            }\r\n            return result;\r\n        }\r\n    };\r\n    return WorkspaceChange;\r\n}());\r\nexport { WorkspaceChange };\r\n/**\r\n * The TextDocumentIdentifier namespace provides helper functions to work with\r\n * [TextDocumentIdentifier](#TextDocumentIdentifier) literals.\r\n */\r\nexport var TextDocumentIdentifier;\r\n(function (TextDocumentIdentifier) {\r\n    /**\r\n     * Creates a new TextDocumentIdentifier literal.\r\n     * @param uri The document's uri.\r\n     */\r\n    function create(uri) {\r\n        return { uri: uri };\r\n    }\r\n    TextDocumentIdentifier.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [TextDocumentIdentifier](#TextDocumentIdentifier) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri);\r\n    }\r\n    TextDocumentIdentifier.is = is;\r\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\r\n/**\r\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\r\n * [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.\r\n */\r\nexport var VersionedTextDocumentIdentifier;\r\n(function (VersionedTextDocumentIdentifier) {\r\n    /**\r\n     * Creates a new VersionedTextDocumentIdentifier literal.\r\n     * @param uri The document's uri.\r\n     * @param uri The document's text.\r\n     */\r\n    function create(uri, version) {\r\n        return { uri: uri, version: version };\r\n    }\r\n    VersionedTextDocumentIdentifier.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.number(candidate.version);\r\n    }\r\n    VersionedTextDocumentIdentifier.is = is;\r\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\r\n/**\r\n * The TextDocumentItem namespace provides helper functions to work with\r\n * [TextDocumentItem](#TextDocumentItem) literals.\r\n */\r\nexport var TextDocumentItem;\r\n(function (TextDocumentItem) {\r\n    /**\r\n     * Creates a new TextDocumentItem literal.\r\n     * @param uri The document's uri.\r\n     * @param languageId The document's language identifier.\r\n     * @param version The document's version number.\r\n     * @param text The document's text.\r\n     */\r\n    function create(uri, languageId, version, text) {\r\n        return { uri: uri, languageId: languageId, version: version, text: text };\r\n    }\r\n    TextDocumentItem.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [TextDocumentItem](#TextDocumentItem) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.number(candidate.version) && Is.string(candidate.text);\r\n    }\r\n    TextDocumentItem.is = is;\r\n})(TextDocumentItem || (TextDocumentItem = {}));\r\n/**\r\n * Describes the content type that a client supports in various\r\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\r\n *\r\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\r\n * are reserved for internal usage.\r\n */\r\nexport var MarkupKind;\r\n(function (MarkupKind) {\r\n    /**\r\n     * Plain text is supported as a content format\r\n     */\r\n    MarkupKind.PlainText = 'plaintext';\r\n    /**\r\n     * Markdown is supported as a content format\r\n     */\r\n    MarkupKind.Markdown = 'markdown';\r\n})(MarkupKind || (MarkupKind = {}));\r\n(function (MarkupKind) {\r\n    /**\r\n     * Checks whether the given value is a value of the [MarkupKind](#MarkupKind) type.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;\r\n    }\r\n    MarkupKind.is = is;\r\n})(MarkupKind || (MarkupKind = {}));\r\nexport var MarkupContent;\r\n(function (MarkupContent) {\r\n    /**\r\n     * Checks whether the given value conforms to the [MarkupContent](#MarkupContent) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\r\n    }\r\n    MarkupContent.is = is;\r\n})(MarkupContent || (MarkupContent = {}));\r\n/**\r\n * The kind of a completion entry.\r\n */\r\nexport var CompletionItemKind;\r\n(function (CompletionItemKind) {\r\n    CompletionItemKind.Text = 1;\r\n    CompletionItemKind.Method = 2;\r\n    CompletionItemKind.Function = 3;\r\n    CompletionItemKind.Constructor = 4;\r\n    CompletionItemKind.Field = 5;\r\n    CompletionItemKind.Variable = 6;\r\n    CompletionItemKind.Class = 7;\r\n    CompletionItemKind.Interface = 8;\r\n    CompletionItemKind.Module = 9;\r\n    CompletionItemKind.Property = 10;\r\n    CompletionItemKind.Unit = 11;\r\n    CompletionItemKind.Value = 12;\r\n    CompletionItemKind.Enum = 13;\r\n    CompletionItemKind.Keyword = 14;\r\n    CompletionItemKind.Snippet = 15;\r\n    CompletionItemKind.Color = 16;\r\n    CompletionItemKind.File = 17;\r\n    CompletionItemKind.Reference = 18;\r\n    CompletionItemKind.Folder = 19;\r\n    CompletionItemKind.EnumMember = 20;\r\n    CompletionItemKind.Constant = 21;\r\n    CompletionItemKind.Struct = 22;\r\n    CompletionItemKind.Event = 23;\r\n    CompletionItemKind.Operator = 24;\r\n    CompletionItemKind.TypeParameter = 25;\r\n})(CompletionItemKind || (CompletionItemKind = {}));\r\n/**\r\n * Defines whether the insert text in a completion item should be interpreted as\r\n * plain text or a snippet.\r\n */\r\nexport var InsertTextFormat;\r\n(function (InsertTextFormat) {\r\n    /**\r\n     * The primary text to be inserted is treated as a plain string.\r\n     */\r\n    InsertTextFormat.PlainText = 1;\r\n    /**\r\n     * The primary text to be inserted is treated as a snippet.\r\n     *\r\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\r\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\r\n     * the end of the snippet. Placeholders with equal identifiers are linked,\r\n     * that is typing in one will update others too.\r\n     *\r\n     * See also: https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/snippet/common/snippet.md\r\n     */\r\n    InsertTextFormat.Snippet = 2;\r\n})(InsertTextFormat || (InsertTextFormat = {}));\r\n/**\r\n * The CompletionItem namespace provides functions to deal with\r\n * completion items.\r\n */\r\nexport var CompletionItem;\r\n(function (CompletionItem) {\r\n    /**\r\n     * Create a completion item and seed it with a label.\r\n     * @param label The completion item's label\r\n     */\r\n    function create(label) {\r\n        return { label: label };\r\n    }\r\n    CompletionItem.create = create;\r\n})(CompletionItem || (CompletionItem = {}));\r\n/**\r\n * The CompletionList namespace provides functions to deal with\r\n * completion lists.\r\n */\r\nexport var CompletionList;\r\n(function (CompletionList) {\r\n    /**\r\n     * Creates a new completion list.\r\n     *\r\n     * @param items The completion items.\r\n     * @param isIncomplete The list is not complete.\r\n     */\r\n    function create(items, isIncomplete) {\r\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\r\n    }\r\n    CompletionList.create = create;\r\n})(CompletionList || (CompletionList = {}));\r\nexport var MarkedString;\r\n(function (MarkedString) {\r\n    /**\r\n     * Creates a marked string from plain text.\r\n     *\r\n     * @param plainText The plain text.\r\n     */\r\n    function fromPlainText(plainText) {\r\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \"\\\\$&\"); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\r\n    }\r\n    MarkedString.fromPlainText = fromPlainText;\r\n    /**\r\n     * Checks whether the given value conforms to the [MarkedString](#MarkedString) type.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));\r\n    }\r\n    MarkedString.is = is;\r\n})(MarkedString || (MarkedString = {}));\r\nexport var Hover;\r\n(function (Hover) {\r\n    /**\r\n     * Checks whether the given value conforms to the [Hover](#Hover) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||\r\n            MarkedString.is(candidate.contents) ||\r\n            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === void 0 || Range.is(value.range));\r\n    }\r\n    Hover.is = is;\r\n})(Hover || (Hover = {}));\r\n/**\r\n * The ParameterInformation namespace provides helper functions to work with\r\n * [ParameterInformation](#ParameterInformation) literals.\r\n */\r\nexport var ParameterInformation;\r\n(function (ParameterInformation) {\r\n    /**\r\n     * Creates a new parameter information literal.\r\n     *\r\n     * @param label A label string.\r\n     * @param documentation A doc string.\r\n     */\r\n    function create(label, documentation) {\r\n        return documentation ? { label: label, documentation: documentation } : { label: label };\r\n    }\r\n    ParameterInformation.create = create;\r\n    ;\r\n})(ParameterInformation || (ParameterInformation = {}));\r\n/**\r\n * The SignatureInformation namespace provides helper functions to work with\r\n * [SignatureInformation](#SignatureInformation) literals.\r\n */\r\nexport var SignatureInformation;\r\n(function (SignatureInformation) {\r\n    function create(label, documentation) {\r\n        var parameters = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            parameters[_i - 2] = arguments[_i];\r\n        }\r\n        var result = { label: label };\r\n        if (Is.defined(documentation)) {\r\n            result.documentation = documentation;\r\n        }\r\n        if (Is.defined(parameters)) {\r\n            result.parameters = parameters;\r\n        }\r\n        else {\r\n            result.parameters = [];\r\n        }\r\n        return result;\r\n    }\r\n    SignatureInformation.create = create;\r\n})(SignatureInformation || (SignatureInformation = {}));\r\n/**\r\n * A document highlight kind.\r\n */\r\nexport var DocumentHighlightKind;\r\n(function (DocumentHighlightKind) {\r\n    /**\r\n     * A textual occurrence.\r\n     */\r\n    DocumentHighlightKind.Text = 1;\r\n    /**\r\n     * Read-access of a symbol, like reading a variable.\r\n     */\r\n    DocumentHighlightKind.Read = 2;\r\n    /**\r\n     * Write-access of a symbol, like writing to a variable.\r\n     */\r\n    DocumentHighlightKind.Write = 3;\r\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\r\n/**\r\n * DocumentHighlight namespace to provide helper functions to work with\r\n * [DocumentHighlight](#DocumentHighlight) literals.\r\n */\r\nexport var DocumentHighlight;\r\n(function (DocumentHighlight) {\r\n    /**\r\n     * Create a DocumentHighlight object.\r\n     * @param range The range the highlight applies to.\r\n     */\r\n    function create(range, kind) {\r\n        var result = { range: range };\r\n        if (Is.number(kind)) {\r\n            result.kind = kind;\r\n        }\r\n        return result;\r\n    }\r\n    DocumentHighlight.create = create;\r\n})(DocumentHighlight || (DocumentHighlight = {}));\r\n/**\r\n * A symbol kind.\r\n */\r\nexport var SymbolKind;\r\n(function (SymbolKind) {\r\n    SymbolKind.File = 1;\r\n    SymbolKind.Module = 2;\r\n    SymbolKind.Namespace = 3;\r\n    SymbolKind.Package = 4;\r\n    SymbolKind.Class = 5;\r\n    SymbolKind.Method = 6;\r\n    SymbolKind.Property = 7;\r\n    SymbolKind.Field = 8;\r\n    SymbolKind.Constructor = 9;\r\n    SymbolKind.Enum = 10;\r\n    SymbolKind.Interface = 11;\r\n    SymbolKind.Function = 12;\r\n    SymbolKind.Variable = 13;\r\n    SymbolKind.Constant = 14;\r\n    SymbolKind.String = 15;\r\n    SymbolKind.Number = 16;\r\n    SymbolKind.Boolean = 17;\r\n    SymbolKind.Array = 18;\r\n    SymbolKind.Object = 19;\r\n    SymbolKind.Key = 20;\r\n    SymbolKind.Null = 21;\r\n    SymbolKind.EnumMember = 22;\r\n    SymbolKind.Struct = 23;\r\n    SymbolKind.Event = 24;\r\n    SymbolKind.Operator = 25;\r\n    SymbolKind.TypeParameter = 26;\r\n})(SymbolKind || (SymbolKind = {}));\r\nexport var SymbolInformation;\r\n(function (SymbolInformation) {\r\n    /**\r\n     * Creates a new symbol information literal.\r\n     *\r\n     * @param name The name of the symbol.\r\n     * @param kind The kind of the symbol.\r\n     * @param range The range of the location of the symbol.\r\n     * @param uri The resource of the location of symbol, defaults to the current document.\r\n     * @param containerName The name of the symbol containing the symbol.\r\n     */\r\n    function create(name, kind, range, uri, containerName) {\r\n        var result = {\r\n            name: name,\r\n            kind: kind,\r\n            location: { uri: uri, range: range }\r\n        };\r\n        if (containerName) {\r\n            result.containerName = containerName;\r\n        }\r\n        return result;\r\n    }\r\n    SymbolInformation.create = create;\r\n})(SymbolInformation || (SymbolInformation = {}));\r\n/**\r\n * Represents programming constructs like variables, classes, interfaces etc.\r\n * that appear in a document. Document symbols can be hierarchical and they\r\n * have two ranges: one that encloses its definition and one that points to\r\n * its most interesting range, e.g. the range of an identifier.\r\n */\r\nvar DocumentSymbol = /** @class */ (function () {\r\n    function DocumentSymbol() {\r\n    }\r\n    return DocumentSymbol;\r\n}());\r\nexport { DocumentSymbol };\r\n(function (DocumentSymbol) {\r\n    /**\r\n     * Creates a new symbol information literal.\r\n     *\r\n     * @param name The name of the symbol.\r\n     * @param detail The detail of the symbol.\r\n     * @param kind The kind of the symbol.\r\n     * @param range The range of the symbol.\r\n     * @param selectionRange The selectionRange of the symbol.\r\n     * @param children Children of the symbol.\r\n     */\r\n    function create(name, detail, kind, range, selectionRange, children) {\r\n        var result = {\r\n            name: name,\r\n            detail: detail,\r\n            kind: kind,\r\n            range: range,\r\n            selectionRange: selectionRange\r\n        };\r\n        if (children !== void 0) {\r\n            result.children = children;\r\n        }\r\n        return result;\r\n    }\r\n    DocumentSymbol.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [DocumentSymbol](#DocumentSymbol) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate &&\r\n            Is.string(candidate.name) && Is.string(candidate.detail) && Is.number(candidate.kind) &&\r\n            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&\r\n            (candidate.deprecated === void 0 || Is.boolean(candidate.deprecated)) &&\r\n            (candidate.children === void 0 || Array.isArray(candidate.children));\r\n    }\r\n    DocumentSymbol.is = is;\r\n})(DocumentSymbol || (DocumentSymbol = {}));\r\n/**\r\n * A set of predefined code action kinds\r\n */\r\nexport var CodeActionKind;\r\n(function (CodeActionKind) {\r\n    /**\r\n     * Base kind for quickfix actions: 'quickfix'\r\n     */\r\n    CodeActionKind.QuickFix = 'quickfix';\r\n    /**\r\n     * Base kind for refactoring actions: 'refactor'\r\n     */\r\n    CodeActionKind.Refactor = 'refactor';\r\n    /**\r\n     * Base kind for refactoring extraction actions: 'refactor.extract'\r\n     *\r\n     * Example extract actions:\r\n     *\r\n     * - Extract method\r\n     * - Extract function\r\n     * - Extract variable\r\n     * - Extract interface from class\r\n     * - ...\r\n     */\r\n    CodeActionKind.RefactorExtract = 'refactor.extract';\r\n    /**\r\n     * Base kind for refactoring inline actions: 'refactor.inline'\r\n     *\r\n     * Example inline actions:\r\n     *\r\n     * - Inline function\r\n     * - Inline variable\r\n     * - Inline constant\r\n     * - ...\r\n     */\r\n    CodeActionKind.RefactorInline = 'refactor.inline';\r\n    /**\r\n     * Base kind for refactoring rewrite actions: 'refactor.rewrite'\r\n     *\r\n     * Example rewrite actions:\r\n     *\r\n     * - Convert JavaScript function to class\r\n     * - Add or remove parameter\r\n     * - Encapsulate field\r\n     * - Make method static\r\n     * - Move method to base class\r\n     * - ...\r\n     */\r\n    CodeActionKind.RefactorRewrite = 'refactor.rewrite';\r\n    /**\r\n     * Base kind for source actions: `source`\r\n     *\r\n     * Source code actions apply to the entire file.\r\n     */\r\n    CodeActionKind.Source = 'source';\r\n    /**\r\n     * Base kind for an organize imports source action: `source.organizeImports`\r\n     */\r\n    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';\r\n})(CodeActionKind || (CodeActionKind = {}));\r\n/**\r\n * The CodeActionContext namespace provides helper functions to work with\r\n * [CodeActionContext](#CodeActionContext) literals.\r\n */\r\nexport var CodeActionContext;\r\n(function (CodeActionContext) {\r\n    /**\r\n     * Creates a new CodeActionContext literal.\r\n     */\r\n    function create(diagnostics, only) {\r\n        var result = { diagnostics: diagnostics };\r\n        if (only !== void 0 && only !== null) {\r\n            result.only = only;\r\n        }\r\n        return result;\r\n    }\r\n    CodeActionContext.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [CodeActionContext](#CodeActionContext) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === void 0 || Is.typedArray(candidate.only, Is.string));\r\n    }\r\n    CodeActionContext.is = is;\r\n})(CodeActionContext || (CodeActionContext = {}));\r\nexport var CodeAction;\r\n(function (CodeAction) {\r\n    function create(title, commandOrEdit, kind) {\r\n        var result = { title: title };\r\n        if (Command.is(commandOrEdit)) {\r\n            result.command = commandOrEdit;\r\n        }\r\n        else {\r\n            result.edit = commandOrEdit;\r\n        }\r\n        if (kind !== void null) {\r\n            result.kind = kind;\r\n        }\r\n        return result;\r\n    }\r\n    CodeAction.create = create;\r\n    function is(value) {\r\n        var candidate = value;\r\n        return candidate && Is.string(candidate.title) &&\r\n            (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&\r\n            (candidate.kind === void 0 || Is.string(candidate.kind)) &&\r\n            (candidate.edit !== void 0 || candidate.command !== void 0) &&\r\n            (candidate.command === void 0 || Command.is(candidate.command)) &&\r\n            (candidate.edit === void 0 || WorkspaceEdit.is(candidate.edit));\r\n    }\r\n    CodeAction.is = is;\r\n})(CodeAction || (CodeAction = {}));\r\n/**\r\n * The CodeLens namespace provides helper functions to work with\r\n * [CodeLens](#CodeLens) literals.\r\n */\r\nexport var CodeLens;\r\n(function (CodeLens) {\r\n    /**\r\n     * Creates a new CodeLens literal.\r\n     */\r\n    function create(range, data) {\r\n        var result = { range: range };\r\n        if (Is.defined(data))\r\n            result.data = data;\r\n        return result;\r\n    }\r\n    CodeLens.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [CodeLens](#CodeLens) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\r\n    }\r\n    CodeLens.is = is;\r\n})(CodeLens || (CodeLens = {}));\r\n/**\r\n * The FormattingOptions namespace provides helper functions to work with\r\n * [FormattingOptions](#FormattingOptions) literals.\r\n */\r\nexport var FormattingOptions;\r\n(function (FormattingOptions) {\r\n    /**\r\n     * Creates a new FormattingOptions literal.\r\n     */\r\n    function create(tabSize, insertSpaces) {\r\n        return { tabSize: tabSize, insertSpaces: insertSpaces };\r\n    }\r\n    FormattingOptions.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [FormattingOptions](#FormattingOptions) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.number(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\r\n    }\r\n    FormattingOptions.is = is;\r\n})(FormattingOptions || (FormattingOptions = {}));\r\n/**\r\n * A document link is a range in a text document that links to an internal or external resource, like another\r\n * text document or a web site.\r\n */\r\nvar DocumentLink = /** @class */ (function () {\r\n    function DocumentLink() {\r\n    }\r\n    return DocumentLink;\r\n}());\r\nexport { DocumentLink };\r\n/**\r\n * The DocumentLink namespace provides helper functions to work with\r\n * [DocumentLink](#DocumentLink) literals.\r\n */\r\n(function (DocumentLink) {\r\n    /**\r\n     * Creates a new DocumentLink literal.\r\n     */\r\n    function create(range, target, data) {\r\n        return { range: range, target: target, data: data };\r\n    }\r\n    DocumentLink.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [DocumentLink](#DocumentLink) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\r\n    }\r\n    DocumentLink.is = is;\r\n})(DocumentLink || (DocumentLink = {}));\r\nexport var EOL = ['\\n', '\\r\\n', '\\r'];\r\nexport var TextDocument;\r\n(function (TextDocument) {\r\n    /**\r\n     * Creates a new ITextDocument literal from the given uri and content.\r\n     * @param uri The document's uri.\r\n     * @param languageId  The document's language Id.\r\n     * @param content The document's content.\r\n     */\r\n    function create(uri, languageId, version, content) {\r\n        return new FullTextDocument(uri, languageId, version, content);\r\n    }\r\n    TextDocument.create = create;\r\n    /**\r\n     * Checks whether the given literal conforms to the [ITextDocument](#ITextDocument) interface.\r\n     */\r\n    function is(value) {\r\n        var candidate = value;\r\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.number(candidate.lineCount)\r\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\r\n    }\r\n    TextDocument.is = is;\r\n    function applyEdits(document, edits) {\r\n        var text = document.getText();\r\n        var sortedEdits = mergeSort(edits, function (a, b) {\r\n            var diff = a.range.start.line - b.range.start.line;\r\n            if (diff === 0) {\r\n                return a.range.start.character - b.range.start.character;\r\n            }\r\n            return diff;\r\n        });\r\n        var lastModifiedOffset = text.length;\r\n        for (var i = sortedEdits.length - 1; i >= 0; i--) {\r\n            var e = sortedEdits[i];\r\n            var startOffset = document.offsetAt(e.range.start);\r\n            var endOffset = document.offsetAt(e.range.end);\r\n            if (endOffset <= lastModifiedOffset) {\r\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\r\n            }\r\n            else {\r\n                throw new Error('Ovelapping edit');\r\n            }\r\n            lastModifiedOffset = startOffset;\r\n        }\r\n        return text;\r\n    }\r\n    TextDocument.applyEdits = applyEdits;\r\n    function mergeSort(data, compare) {\r\n        if (data.length <= 1) {\r\n            // sorted\r\n            return data;\r\n        }\r\n        var p = (data.length / 2) | 0;\r\n        var left = data.slice(0, p);\r\n        var right = data.slice(p);\r\n        mergeSort(left, compare);\r\n        mergeSort(right, compare);\r\n        var leftIdx = 0;\r\n        var rightIdx = 0;\r\n        var i = 0;\r\n        while (leftIdx < left.length && rightIdx < right.length) {\r\n            var ret = compare(left[leftIdx], right[rightIdx]);\r\n            if (ret <= 0) {\r\n                // smaller_equal -> take left to preserve order\r\n                data[i++] = left[leftIdx++];\r\n            }\r\n            else {\r\n                // greater -> take right\r\n                data[i++] = right[rightIdx++];\r\n            }\r\n        }\r\n        while (leftIdx < left.length) {\r\n            data[i++] = left[leftIdx++];\r\n        }\r\n        while (rightIdx < right.length) {\r\n            data[i++] = right[rightIdx++];\r\n        }\r\n        return data;\r\n    }\r\n})(TextDocument || (TextDocument = {}));\r\n/**\r\n * Represents reasons why a text document is saved.\r\n */\r\nexport var TextDocumentSaveReason;\r\n(function (TextDocumentSaveReason) {\r\n    /**\r\n     * Manually triggered, e.g. by the user pressing save, by starting debugging,\r\n     * or by an API call.\r\n     */\r\n    TextDocumentSaveReason.Manual = 1;\r\n    /**\r\n     * Automatic after a delay.\r\n     */\r\n    TextDocumentSaveReason.AfterDelay = 2;\r\n    /**\r\n     * When the editor lost focus.\r\n     */\r\n    TextDocumentSaveReason.FocusOut = 3;\r\n})(TextDocumentSaveReason || (TextDocumentSaveReason = {}));\r\nvar FullTextDocument = /** @class */ (function () {\r\n    function FullTextDocument(uri, languageId, version, content) {\r\n        this._uri = uri;\r\n        this._languageId = languageId;\r\n        this._version = version;\r\n        this._content = content;\r\n        this._lineOffsets = null;\r\n    }\r\n    Object.defineProperty(FullTextDocument.prototype, \"uri\", {\r\n        get: function () {\r\n            return this._uri;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FullTextDocument.prototype, \"languageId\", {\r\n        get: function () {\r\n            return this._languageId;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FullTextDocument.prototype, \"version\", {\r\n        get: function () {\r\n            return this._version;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    FullTextDocument.prototype.getText = function (range) {\r\n        if (range) {\r\n            var start = this.offsetAt(range.start);\r\n            var end = this.offsetAt(range.end);\r\n            return this._content.substring(start, end);\r\n        }\r\n        return this._content;\r\n    };\r\n    FullTextDocument.prototype.update = function (event, version) {\r\n        this._content = event.text;\r\n        this._version = version;\r\n        this._lineOffsets = null;\r\n    };\r\n    FullTextDocument.prototype.getLineOffsets = function () {\r\n        if (this._lineOffsets === null) {\r\n            var lineOffsets = [];\r\n            var text = this._content;\r\n            var isLineStart = true;\r\n            for (var i = 0; i < text.length; i++) {\r\n                if (isLineStart) {\r\n                    lineOffsets.push(i);\r\n                    isLineStart = false;\r\n                }\r\n                var ch = text.charAt(i);\r\n                isLineStart = (ch === '\\r' || ch === '\\n');\r\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\r\n                    i++;\r\n                }\r\n            }\r\n            if (isLineStart && text.length > 0) {\r\n                lineOffsets.push(text.length);\r\n            }\r\n            this._lineOffsets = lineOffsets;\r\n        }\r\n        return this._lineOffsets;\r\n    };\r\n    FullTextDocument.prototype.positionAt = function (offset) {\r\n        offset = Math.max(Math.min(offset, this._content.length), 0);\r\n        var lineOffsets = this.getLineOffsets();\r\n        var low = 0, high = lineOffsets.length;\r\n        if (high === 0) {\r\n            return Position.create(0, offset);\r\n        }\r\n        while (low < high) {\r\n            var mid = Math.floor((low + high) / 2);\r\n            if (lineOffsets[mid] > offset) {\r\n                high = mid;\r\n            }\r\n            else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n        // low is the least x for which the line offset is larger than the current offset\r\n        // or array.length if no line offset is larger than the current offset\r\n        var line = low - 1;\r\n        return Position.create(line, offset - lineOffsets[line]);\r\n    };\r\n    FullTextDocument.prototype.offsetAt = function (position) {\r\n        var lineOffsets = this.getLineOffsets();\r\n        if (position.line >= lineOffsets.length) {\r\n            return this._content.length;\r\n        }\r\n        else if (position.line < 0) {\r\n            return 0;\r\n        }\r\n        var lineOffset = lineOffsets[position.line];\r\n        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\r\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\r\n    };\r\n    Object.defineProperty(FullTextDocument.prototype, \"lineCount\", {\r\n        get: function () {\r\n            return this.getLineOffsets().length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FullTextDocument;\r\n}());\r\nvar Is;\r\n(function (Is) {\r\n    var toString = Object.prototype.toString;\r\n    function defined(value) {\r\n        return typeof value !== 'undefined';\r\n    }\r\n    Is.defined = defined;\r\n    function undefined(value) {\r\n        return typeof value === 'undefined';\r\n    }\r\n    Is.undefined = undefined;\r\n    function boolean(value) {\r\n        return value === true || value === false;\r\n    }\r\n    Is.boolean = boolean;\r\n    function string(value) {\r\n        return toString.call(value) === '[object String]';\r\n    }\r\n    Is.string = string;\r\n    function number(value) {\r\n        return toString.call(value) === '[object Number]';\r\n    }\r\n    Is.number = number;\r\n    function func(value) {\r\n        return toString.call(value) === '[object Function]';\r\n    }\r\n    Is.func = func;\r\n    function objectLiteral(value) {\r\n        // Strictly speaking class instances pass this check as well. Since the LSP\r\n        // doesn't use classes we ignore this for now. If we do we need to add something\r\n        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\r\n        return value !== null && typeof value === 'object';\r\n    }\r\n    Is.objectLiteral = objectLiteral;\r\n    function typedArray(value, check) {\r\n        return Array.isArray(value) && value.every(check);\r\n    }\r\n    Is.typedArray = typedArray;\r\n})(Is || (Is = {}));\r\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as ls from './_deps/vscode-languageserver-types/main.js';\nvar Uri = monaco.Uri;\nvar Range = monaco.Range;\n// --- diagnostics --- ---\nvar DiagnosticsAdapter = /** @class */ (function () {\n    function DiagnosticsAdapter(_languageId, _worker, defaults) {\n        var _this = this;\n        this._languageId = _languageId;\n        this._worker = _worker;\n        this._disposables = [];\n        this._listener = Object.create(null);\n        var onModelAdd = function (model) {\n            var modeId = model.getModeId();\n            if (modeId !== _this._languageId) {\n                return;\n            }\n            var handle;\n            _this._listener[model.uri.toString()] = model.onDidChangeContent(function () {\n                clearTimeout(handle);\n                handle = setTimeout(function () { return _this._doValidate(model.uri, modeId); }, 500);\n            });\n            _this._doValidate(model.uri, modeId);\n        };\n        var onModelRemoved = function (model) {\n            monaco.editor.setModelMarkers(model, _this._languageId, []);\n            var uriStr = model.uri.toString();\n            var listener = _this._listener[uriStr];\n            if (listener) {\n                listener.dispose();\n                delete _this._listener[uriStr];\n            }\n        };\n        this._disposables.push(monaco.editor.onDidCreateModel(onModelAdd));\n        this._disposables.push(monaco.editor.onWillDisposeModel(function (model) {\n            onModelRemoved(model);\n            _this._resetSchema(model.uri);\n        }));\n        this._disposables.push(monaco.editor.onDidChangeModelLanguage(function (event) {\n            onModelRemoved(event.model);\n            onModelAdd(event.model);\n            _this._resetSchema(event.model.uri);\n        }));\n        this._disposables.push(defaults.onDidChange(function (_) {\n            monaco.editor.getModels().forEach(function (model) {\n                if (model.getModeId() === _this._languageId) {\n                    onModelRemoved(model);\n                    onModelAdd(model);\n                }\n            });\n        }));\n        this._disposables.push({\n            dispose: function () {\n                monaco.editor.getModels().forEach(onModelRemoved);\n                for (var key in _this._listener) {\n                    _this._listener[key].dispose();\n                }\n            }\n        });\n        monaco.editor.getModels().forEach(onModelAdd);\n    }\n    DiagnosticsAdapter.prototype.dispose = function () {\n        this._disposables.forEach(function (d) { return d && d.dispose(); });\n        this._disposables = [];\n    };\n    DiagnosticsAdapter.prototype._resetSchema = function (resource) {\n        this._worker().then(function (worker) {\n            worker.resetSchema(resource.toString());\n        });\n    };\n    DiagnosticsAdapter.prototype._doValidate = function (resource, languageId) {\n        this._worker(resource).then(function (worker) {\n            return worker.doValidation(resource.toString()).then(function (diagnostics) {\n                var markers = diagnostics.map(function (d) { return toDiagnostics(resource, d); });\n                var model = monaco.editor.getModel(resource);\n                if (model.getModeId() === languageId) {\n                    monaco.editor.setModelMarkers(model, languageId, markers);\n                }\n            });\n        }).then(undefined, function (err) {\n            console.error(err);\n        });\n    };\n    return DiagnosticsAdapter;\n}());\nexport { DiagnosticsAdapter };\nfunction toSeverity(lsSeverity) {\n    switch (lsSeverity) {\n        case ls.DiagnosticSeverity.Error: return monaco.MarkerSeverity.Error;\n        case ls.DiagnosticSeverity.Warning: return monaco.MarkerSeverity.Warning;\n        case ls.DiagnosticSeverity.Information: return monaco.MarkerSeverity.Info;\n        case ls.DiagnosticSeverity.Hint: return monaco.MarkerSeverity.Hint;\n        default:\n            return monaco.MarkerSeverity.Info;\n    }\n}\nfunction toDiagnostics(resource, diag) {\n    var code = typeof diag.code === 'number' ? String(diag.code) : diag.code;\n    return {\n        severity: toSeverity(diag.severity),\n        startLineNumber: diag.range.start.line + 1,\n        startColumn: diag.range.start.character + 1,\n        endLineNumber: diag.range.end.line + 1,\n        endColumn: diag.range.end.character + 1,\n        message: diag.message,\n        code: code,\n        source: diag.source\n    };\n}\n// --- completion ------\nfunction fromPosition(position) {\n    if (!position) {\n        return void 0;\n    }\n    return { character: position.column - 1, line: position.lineNumber - 1 };\n}\nfunction fromRange(range) {\n    if (!range) {\n        return void 0;\n    }\n    return { start: { line: range.startLineNumber - 1, character: range.startColumn - 1 }, end: { line: range.endLineNumber - 1, character: range.endColumn - 1 } };\n}\nfunction toRange(range) {\n    if (!range) {\n        return void 0;\n    }\n    return new Range(range.start.line + 1, range.start.character + 1, range.end.line + 1, range.end.character + 1);\n}\nfunction toCompletionItemKind(kind) {\n    var mItemKind = monaco.languages.CompletionItemKind;\n    switch (kind) {\n        case ls.CompletionItemKind.Text: return mItemKind.Text;\n        case ls.CompletionItemKind.Method: return mItemKind.Method;\n        case ls.CompletionItemKind.Function: return mItemKind.Function;\n        case ls.CompletionItemKind.Constructor: return mItemKind.Constructor;\n        case ls.CompletionItemKind.Field: return mItemKind.Field;\n        case ls.CompletionItemKind.Variable: return mItemKind.Variable;\n        case ls.CompletionItemKind.Class: return mItemKind.Class;\n        case ls.CompletionItemKind.Interface: return mItemKind.Interface;\n        case ls.CompletionItemKind.Module: return mItemKind.Module;\n        case ls.CompletionItemKind.Property: return mItemKind.Property;\n        case ls.CompletionItemKind.Unit: return mItemKind.Unit;\n        case ls.CompletionItemKind.Value: return mItemKind.Value;\n        case ls.CompletionItemKind.Enum: return mItemKind.Enum;\n        case ls.CompletionItemKind.Keyword: return mItemKind.Keyword;\n        case ls.CompletionItemKind.Snippet: return mItemKind.Snippet;\n        case ls.CompletionItemKind.Color: return mItemKind.Color;\n        case ls.CompletionItemKind.File: return mItemKind.File;\n        case ls.CompletionItemKind.Reference: return mItemKind.Reference;\n    }\n    return mItemKind.Property;\n}\nfunction fromCompletionItemKind(kind) {\n    var mItemKind = monaco.languages.CompletionItemKind;\n    switch (kind) {\n        case mItemKind.Text: return ls.CompletionItemKind.Text;\n        case mItemKind.Method: return ls.CompletionItemKind.Method;\n        case mItemKind.Function: return ls.CompletionItemKind.Function;\n        case mItemKind.Constructor: return ls.CompletionItemKind.Constructor;\n        case mItemKind.Field: return ls.CompletionItemKind.Field;\n        case mItemKind.Variable: return ls.CompletionItemKind.Variable;\n        case mItemKind.Class: return ls.CompletionItemKind.Class;\n        case mItemKind.Interface: return ls.CompletionItemKind.Interface;\n        case mItemKind.Module: return ls.CompletionItemKind.Module;\n        case mItemKind.Property: return ls.CompletionItemKind.Property;\n        case mItemKind.Unit: return ls.CompletionItemKind.Unit;\n        case mItemKind.Value: return ls.CompletionItemKind.Value;\n        case mItemKind.Enum: return ls.CompletionItemKind.Enum;\n        case mItemKind.Keyword: return ls.CompletionItemKind.Keyword;\n        case mItemKind.Snippet: return ls.CompletionItemKind.Snippet;\n        case mItemKind.Color: return ls.CompletionItemKind.Color;\n        case mItemKind.File: return ls.CompletionItemKind.File;\n        case mItemKind.Reference: return ls.CompletionItemKind.Reference;\n    }\n    return ls.CompletionItemKind.Property;\n}\nfunction toTextEdit(textEdit) {\n    if (!textEdit) {\n        return void 0;\n    }\n    return {\n        range: toRange(textEdit.range),\n        text: textEdit.newText\n    };\n}\nfunction toCompletionItem(entry) {\n    return {\n        label: entry.label,\n        insertText: entry.insertText,\n        sortText: entry.sortText,\n        filterText: entry.filterText,\n        documentation: entry.documentation,\n        detail: entry.detail,\n        kind: toCompletionItemKind(entry.kind),\n        textEdit: toTextEdit(entry.textEdit),\n        data: entry.data\n    };\n}\nfunction fromMarkdownString(entry) {\n    return {\n        kind: (typeof entry === 'string' ? ls.MarkupKind.PlainText : ls.MarkupKind.Markdown),\n        value: (typeof entry === 'string' ? entry : entry.value)\n    };\n}\nfunction fromCompletionItem(entry) {\n    var item = {\n        label: entry.label,\n        sortText: entry.sortText,\n        filterText: entry.filterText,\n        documentation: fromMarkdownString(entry.documentation),\n        detail: entry.detail,\n        kind: fromCompletionItemKind(entry.kind),\n        data: entry.data\n    };\n    if (typeof entry.insertText === 'object' && typeof entry.insertText.value === 'string') {\n        item.insertText = entry.insertText.value;\n        item.insertTextFormat = ls.InsertTextFormat.Snippet;\n    }\n    else {\n        item.insertText = entry.insertText;\n    }\n    if (entry.range) {\n        item.textEdit = ls.TextEdit.replace(fromRange(entry.range), item.insertText);\n    }\n    return item;\n}\nvar CompletionAdapter = /** @class */ (function () {\n    function CompletionAdapter(_worker) {\n        this._worker = _worker;\n    }\n    Object.defineProperty(CompletionAdapter.prototype, \"triggerCharacters\", {\n        get: function () {\n            return [' ', ':'];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CompletionAdapter.prototype.provideCompletionItems = function (model, position, token) {\n        var wordInfo = model.getWordUntilPosition(position);\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.doComplete(resource.toString(), fromPosition(position));\n        }).then(function (info) {\n            if (!info) {\n                return;\n            }\n            var items = info.items.map(function (entry) {\n                var item = {\n                    label: entry.label,\n                    insertText: entry.insertText,\n                    sortText: entry.sortText,\n                    filterText: entry.filterText,\n                    documentation: entry.documentation,\n                    detail: entry.detail,\n                    kind: toCompletionItemKind(entry.kind),\n                };\n                if (entry.textEdit) {\n                    item.range = toRange(entry.textEdit.range);\n                    item.insertText = entry.textEdit.newText;\n                }\n                if (entry.insertTextFormat === ls.InsertTextFormat.Snippet) {\n                    item.insertText = { value: item.insertText };\n                }\n                return item;\n            });\n            return {\n                isIncomplete: info.isIncomplete,\n                items: items\n            };\n        }));\n    };\n    return CompletionAdapter;\n}());\nexport { CompletionAdapter };\nfunction isMarkupContent(thing) {\n    return thing && typeof thing === 'object' && typeof thing.kind === 'string';\n}\nfunction toMarkdownString(entry) {\n    if (typeof entry === 'string') {\n        return {\n            value: entry\n        };\n    }\n    if (isMarkupContent(entry)) {\n        if (entry.kind === 'plaintext') {\n            return {\n                value: entry.value.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&')\n            };\n        }\n        return {\n            value: entry.value\n        };\n    }\n    return { value: '```' + entry.language + '\\n' + entry.value + '\\n```\\n' };\n}\nfunction toMarkedStringArray(contents) {\n    if (!contents) {\n        return void 0;\n    }\n    if (Array.isArray(contents)) {\n        return contents.map(toMarkdownString);\n    }\n    return [toMarkdownString(contents)];\n}\n// --- hover ------\nvar HoverAdapter = /** @class */ (function () {\n    function HoverAdapter(_worker) {\n        this._worker = _worker;\n    }\n    HoverAdapter.prototype.provideHover = function (model, position, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.doHover(resource.toString(), fromPosition(position));\n        }).then(function (info) {\n            if (!info) {\n                return;\n            }\n            return {\n                range: toRange(info.range),\n                contents: toMarkedStringArray(info.contents)\n            };\n        }));\n    };\n    return HoverAdapter;\n}());\nexport { HoverAdapter };\n// --- definition ------\nfunction toLocation(location) {\n    return {\n        uri: Uri.parse(location.uri),\n        range: toRange(location.range)\n    };\n}\n// --- document symbols ------\nfunction toSymbolKind(kind) {\n    var mKind = monaco.languages.SymbolKind;\n    switch (kind) {\n        case ls.SymbolKind.File: return mKind.Array;\n        case ls.SymbolKind.Module: return mKind.Module;\n        case ls.SymbolKind.Namespace: return mKind.Namespace;\n        case ls.SymbolKind.Package: return mKind.Package;\n        case ls.SymbolKind.Class: return mKind.Class;\n        case ls.SymbolKind.Method: return mKind.Method;\n        case ls.SymbolKind.Property: return mKind.Property;\n        case ls.SymbolKind.Field: return mKind.Field;\n        case ls.SymbolKind.Constructor: return mKind.Constructor;\n        case ls.SymbolKind.Enum: return mKind.Enum;\n        case ls.SymbolKind.Interface: return mKind.Interface;\n        case ls.SymbolKind.Function: return mKind.Function;\n        case ls.SymbolKind.Variable: return mKind.Variable;\n        case ls.SymbolKind.Constant: return mKind.Constant;\n        case ls.SymbolKind.String: return mKind.String;\n        case ls.SymbolKind.Number: return mKind.Number;\n        case ls.SymbolKind.Boolean: return mKind.Boolean;\n        case ls.SymbolKind.Array: return mKind.Array;\n    }\n    return mKind.Function;\n}\nvar DocumentSymbolAdapter = /** @class */ (function () {\n    function DocumentSymbolAdapter(_worker) {\n        this._worker = _worker;\n    }\n    DocumentSymbolAdapter.prototype.provideDocumentSymbols = function (model, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) { return worker.findDocumentSymbols(resource.toString()); }).then(function (items) {\n            if (!items) {\n                return;\n            }\n            return items.map(function (item) { return ({\n                name: item.name,\n                detail: '',\n                containerName: item.containerName,\n                kind: toSymbolKind(item.kind),\n                range: toRange(item.location.range),\n                selectionRange: toRange(item.location.range)\n            }); });\n        }));\n    };\n    return DocumentSymbolAdapter;\n}());\nexport { DocumentSymbolAdapter };\nfunction fromFormattingOptions(options) {\n    return {\n        tabSize: options.tabSize,\n        insertSpaces: options.insertSpaces\n    };\n}\nvar DocumentFormattingEditProvider = /** @class */ (function () {\n    function DocumentFormattingEditProvider(_worker) {\n        this._worker = _worker;\n    }\n    DocumentFormattingEditProvider.prototype.provideDocumentFormattingEdits = function (model, options, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.format(resource.toString(), null, fromFormattingOptions(options)).then(function (edits) {\n                if (!edits || edits.length === 0) {\n                    return;\n                }\n                return edits.map(toTextEdit);\n            });\n        }));\n    };\n    return DocumentFormattingEditProvider;\n}());\nexport { DocumentFormattingEditProvider };\nvar DocumentRangeFormattingEditProvider = /** @class */ (function () {\n    function DocumentRangeFormattingEditProvider(_worker) {\n        this._worker = _worker;\n    }\n    DocumentRangeFormattingEditProvider.prototype.provideDocumentRangeFormattingEdits = function (model, range, options, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.format(resource.toString(), fromRange(range), fromFormattingOptions(options)).then(function (edits) {\n                if (!edits || edits.length === 0) {\n                    return;\n                }\n                return edits.map(toTextEdit);\n            });\n        }));\n    };\n    return DocumentRangeFormattingEditProvider;\n}());\nexport { DocumentRangeFormattingEditProvider };\nvar DocumentColorAdapter = /** @class */ (function () {\n    function DocumentColorAdapter(_worker) {\n        this._worker = _worker;\n    }\n    DocumentColorAdapter.prototype.provideDocumentColors = function (model, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) { return worker.findDocumentColors(resource.toString()); }).then(function (infos) {\n            if (!infos) {\n                return;\n            }\n            return infos.map(function (item) { return ({\n                color: item.color,\n                range: toRange(item.range)\n            }); });\n        }));\n    };\n    DocumentColorAdapter.prototype.provideColorPresentations = function (model, info, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) { return worker.getColorPresentations(resource.toString(), info.color, fromRange(info.range)); }).then(function (presentations) {\n            if (!presentations) {\n                return;\n            }\n            return presentations.map(function (presentation) {\n                var item = {\n                    label: presentation.label,\n                };\n                if (presentation.textEdit) {\n                    item.textEdit = toTextEdit(presentation.textEdit);\n                }\n                if (presentation.additionalTextEdits) {\n                    item.additionalTextEdits = presentation.additionalTextEdits.map(toTextEdit);\n                }\n                return item;\n            });\n        }));\n    };\n    return DocumentColorAdapter;\n}());\nexport { DocumentColorAdapter };\nvar FoldingRangeAdapter = /** @class */ (function () {\n    function FoldingRangeAdapter(_worker) {\n        this._worker = _worker;\n    }\n    FoldingRangeAdapter.prototype.provideFoldingRanges = function (model, context, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) { return worker.provideFoldingRanges(resource.toString(), context); }).then(function (ranges) {\n            if (!ranges) {\n                return;\n            }\n            return ranges.map(function (range) {\n                var result = {\n                    start: range.startLine + 1,\n                    end: range.endLine + 1\n                };\n                if (typeof range.kind !== 'undefined') {\n                    result.kind = toFoldingRangeKind(range.kind);\n                }\n                return result;\n            });\n        }));\n    };\n    return FoldingRangeAdapter;\n}());\nexport { FoldingRangeAdapter };\nfunction toFoldingRangeKind(kind) {\n    switch (kind) {\n        case ls.FoldingRangeKind.Comment: return monaco.languages.FoldingRangeKind.Comment;\n        case ls.FoldingRangeKind.Imports: return monaco.languages.FoldingRangeKind.Imports;\n        case ls.FoldingRangeKind.Region: return monaco.languages.FoldingRangeKind.Region;\n    }\n    return void 0;\n}\n/**\n * Hook a cancellation token to a WinJS Promise\n */\nfunction wireCancellationToken(token, promise) {\n    if (promise.cancel) {\n        token.onCancellationRequested(function () { return promise.cancel(); });\n    }\n    return promise;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text, ignoreTrivia) {\n    if (ignoreTrivia === void 0) { ignoreTrivia = false; }\n    var pos = 0, len = text.length, value = '', tokenOffset = 0, token = 16 /* Unknown */, scanError = 0 /* None */;\n    function scanHexDigits(count, exact) {\n        var digits = 0;\n        var value = 0;\n        while (digits < count || !exact) {\n            var ch = text.charCodeAt(pos);\n            if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {\n                value = value * 16 + ch - 48 /* _0 */;\n            }\n            else if (ch >= 65 /* A */ && ch <= 70 /* F */) {\n                value = value * 16 + ch - 65 /* A */ + 10;\n            }\n            else if (ch >= 97 /* a */ && ch <= 102 /* f */) {\n                value = value * 16 + ch - 97 /* a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* Unknown */;\n        scanError = 0 /* None */;\n    }\n    function scanNumber() {\n        var start = pos;\n        if (text.charCodeAt(pos) === 48 /* _0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        var end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        var result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* UnexpectedEndOfString */;\n                break;\n            }\n            var ch = text.charCodeAt(pos);\n            if (ch === 34 /* doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                ch = text.charCodeAt(pos++);\n                switch (ch) {\n                    case 34 /* doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* slash */:\n                        result += '/';\n                        break;\n                    case 98 /* b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* u */:\n                        var ch_1 = scanHexDigits(4, true);\n                        if (ch_1 >= 0) {\n                            result += String.fromCharCode(ch_1);\n                        }\n                        else {\n                            scanError = 4 /* InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* None */;\n        tokenOffset = pos;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* EOF */;\n        }\n        var code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            return token = 14 /* LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* openBrace */:\n                pos++;\n                return token = 1 /* OpenBraceToken */;\n            case 125 /* closeBrace */:\n                pos++;\n                return token = 2 /* CloseBraceToken */;\n            case 91 /* openBracket */:\n                pos++;\n                return token = 3 /* OpenBracketToken */;\n            case 93 /* closeBracket */:\n                pos++;\n                return token = 4 /* CloseBracketToken */;\n            case 58 /* colon */:\n                pos++;\n                return token = 6 /* ColonToken */;\n            case 44 /* comma */:\n                pos++;\n                return token = 5 /* CommaToken */;\n            // strings\n            case 34 /* doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* StringLiteral */;\n            // comments\n            case 47 /* slash */:\n                var start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {\n                    pos += 2;\n                    var commentClosed = false;\n                    while (pos < len) {\n                        var ch = text.charCodeAt(pos);\n                        if (ch === 42 /* asterisk */ && (pos + 1 < len) && text.charCodeAt(pos + 1) === 47 /* slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n            // numbers\n            case 45 /* minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* _0 */:\n            case 49 /* _1 */:\n            case 50 /* _2 */:\n            case 51 /* _3 */:\n            case 52 /* _4 */:\n            case 53 /* _5 */:\n            case 54 /* _6 */:\n            case 55 /* _7 */:\n            case 56 /* _8 */:\n            case 57 /* _9 */:\n                value += scanNumber();\n                return token = 11 /* NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* TrueKeyword */;\n                        case 'false': return token = 9 /* FalseKeyword */;\n                        case 'null': return token = 7 /* NullKeyword */;\n                    }\n                    return token = 16 /* Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* closeBrace */:\n            case 93 /* closeBracket */:\n            case 123 /* openBrace */:\n            case 91 /* openBracket */:\n            case 34 /* doubleQuote */:\n            case 58 /* colon */:\n            case 44 /* comma */:\n            case 47 /* slash */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        var result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* LineCommentTrivia */ && result <= 15 /* Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: function () { return pos; },\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: function () { return token; },\n        getTokenValue: function () { return value; },\n        getTokenOffset: function () { return tokenOffset; },\n        getTokenLength: function () { return pos - tokenOffset; },\n        getTokenError: function () { return scanError; }\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ ||\n        ch === 160 /* nonBreakingSpace */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ ||\n        ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;\n}\n//# sourceMappingURL=scanner.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner.js';\nexport function format(documentText, range, options) {\n    var initialIndentLevel;\n    var formatText;\n    var formatTextStart;\n    var rangeStart;\n    var rangeEnd;\n    if (range) {\n        rangeStart = range.offset;\n        rangeEnd = rangeStart + range.length;\n        formatTextStart = rangeStart;\n        while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n            formatTextStart--;\n        }\n        var endOffset = rangeEnd;\n        while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n            endOffset++;\n        }\n        formatText = documentText.substring(formatTextStart, endOffset);\n        initialIndentLevel = computeIndentLevel(formatText, options);\n    }\n    else {\n        formatText = documentText;\n        initialIndentLevel = 0;\n        formatTextStart = 0;\n        rangeStart = 0;\n        rangeEnd = documentText.length;\n    }\n    var eol = getEOL(options, documentText);\n    var lineBreak = false;\n    var indentLevel = 0;\n    var indentValue;\n    if (options.insertSpaces) {\n        indentValue = repeat(' ', options.tabSize || 4);\n    }\n    else {\n        indentValue = '\\t';\n    }\n    var scanner = createScanner(formatText, false);\n    var hasError = false;\n    function newLineAndIndent() {\n        return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n    }\n    function scanNext() {\n        var token = scanner.scan();\n        lineBreak = false;\n        while (token === 15 /* Trivia */ || token === 14 /* LineBreakTrivia */) {\n            lineBreak = lineBreak || (token === 14 /* LineBreakTrivia */);\n            token = scanner.scan();\n        }\n        hasError = token === 16 /* Unknown */ || scanner.getTokenError() !== 0 /* None */;\n        return token;\n    }\n    var editOperations = [];\n    function addEdit(text, startOffset, endOffset) {\n        if (!hasError && startOffset < rangeEnd && endOffset > rangeStart && documentText.substring(startOffset, endOffset) !== text) {\n            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n        }\n    }\n    var firstToken = scanNext();\n    if (firstToken !== 17 /* EOF */) {\n        var firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n        var initialIndent = repeat(indentValue, initialIndentLevel);\n        addEdit(initialIndent, formatTextStart, firstTokenStart);\n    }\n    while (firstToken !== 17 /* EOF */) {\n        var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n        var secondToken = scanNext();\n        var replaceContent = '';\n        while (!lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n            // comments on the same line: keep them on the same line, but ignore them otherwise\n            var commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n            addEdit(' ', firstTokenEnd, commentTokenStart);\n            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n            replaceContent = secondToken === 12 /* LineCommentTrivia */ ? newLineAndIndent() : '';\n            secondToken = scanNext();\n        }\n        if (secondToken === 2 /* CloseBraceToken */) {\n            if (firstToken !== 1 /* OpenBraceToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else if (secondToken === 4 /* CloseBracketToken */) {\n            if (firstToken !== 3 /* OpenBracketToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else {\n            switch (firstToken) {\n                case 3 /* OpenBracketToken */:\n                case 1 /* OpenBraceToken */:\n                    indentLevel++;\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 5 /* CommaToken */:\n                case 12 /* LineCommentTrivia */:\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 13 /* BlockCommentTrivia */:\n                    if (lineBreak) {\n                        replaceContent = newLineAndIndent();\n                    }\n                    else {\n                        // symbol following comment on the same line: keep on same line, separate with ' '\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 6 /* ColonToken */:\n                    replaceContent = ' ';\n                    break;\n                case 10 /* StringLiteral */:\n                    if (secondToken === 6 /* ColonToken */) {\n                        replaceContent = '';\n                        break;\n                    }\n                // fall through\n                case 7 /* NullKeyword */:\n                case 8 /* TrueKeyword */:\n                case 9 /* FalseKeyword */:\n                case 11 /* NumericLiteral */:\n                case 2 /* CloseBraceToken */:\n                case 4 /* CloseBracketToken */:\n                    if (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */) {\n                        replaceContent = ' ';\n                    }\n                    else if (secondToken !== 5 /* CommaToken */ && secondToken !== 17 /* EOF */) {\n                        hasError = true;\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    hasError = true;\n                    break;\n            }\n            if (lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n                replaceContent = newLineAndIndent();\n            }\n        }\n        var secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n        addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n        firstToken = secondToken;\n    }\n    return editOperations;\n}\nfunction repeat(s, count) {\n    var result = '';\n    for (var i = 0; i < count; i++) {\n        result += s;\n    }\n    return result;\n}\nfunction computeIndentLevel(content, options) {\n    var i = 0;\n    var nChars = 0;\n    var tabSize = options.tabSize || 4;\n    while (i < content.length) {\n        var ch = content.charAt(i);\n        if (ch === ' ') {\n            nChars++;\n        }\n        else if (ch === '\\t') {\n            nChars += tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n    for (var i = 0; i < text.length; i++) {\n        var ch = text.charAt(i);\n        if (ch === '\\r') {\n            if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                return '\\r\\n';\n            }\n            return '\\r';\n        }\n        else if (ch === '\\n') {\n            return '\\n';\n        }\n    }\n    return (options && options.eol) || '\\n';\n}\nexport function isEOL(text, offset) {\n    return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=format.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner.js';\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport function getLocation(text, position) {\n    var segments = []; // strings or numbers\n    var earlyReturnException = new Object();\n    var previousNode = void 0;\n    var previousNodeInst = {\n        value: {},\n        offset: 0,\n        length: 0,\n        type: 'object',\n        parent: void 0\n    };\n    var isAtPropertyKey = false;\n    function setPreviousNode(value, offset, length, type) {\n        previousNodeInst.value = value;\n        previousNodeInst.offset = offset;\n        previousNodeInst.length = length;\n        previousNodeInst.type = type;\n        previousNodeInst.colonOffset = void 0;\n        previousNode = previousNodeInst;\n    }\n    try {\n        visit(text, {\n            onObjectBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                isAtPropertyKey = position > offset;\n                segments.push(''); // push a placeholder (will be replaced)\n            },\n            onObjectProperty: function (name, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(name, offset, length, 'property');\n                segments[segments.length - 1] = name;\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onObjectEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onArrayBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.push(0);\n            },\n            onArrayEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onLiteralValue: function (value, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(value, offset, length, getLiteralNodeType(value));\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onSeparator: function (sep, offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                if (sep === ':' && previousNode && previousNode.type === 'property') {\n                    previousNode.colonOffset = offset;\n                    isAtPropertyKey = false;\n                    previousNode = void 0;\n                }\n                else if (sep === ',') {\n                    var last = segments[segments.length - 1];\n                    if (typeof last === 'number') {\n                        segments[segments.length - 1] = last + 1;\n                    }\n                    else {\n                        isAtPropertyKey = true;\n                        segments[segments.length - 1] = '';\n                    }\n                    previousNode = void 0;\n                }\n            }\n        });\n    }\n    catch (e) {\n        if (e !== earlyReturnException) {\n            throw e;\n        }\n    }\n    return {\n        path: segments,\n        previousNode: previousNode,\n        isAtPropertyKey: isAtPropertyKey,\n        matches: function (pattern) {\n            var k = 0;\n            for (var i = 0; k < pattern.length && i < segments.length; i++) {\n                if (pattern[k] === segments[i] || pattern[k] === '*') {\n                    k++;\n                }\n                else if (pattern[k] !== '**') {\n                    return false;\n                }\n            }\n            return k === pattern.length;\n        }\n    };\n}\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport function parse(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentProperty = null;\n    var currentParent = [];\n    var previousParents = [];\n    function onValue(value) {\n        if (Array.isArray(currentParent)) {\n            currentParent.push(value);\n        }\n        else if (currentProperty) {\n            currentParent[currentProperty] = value;\n        }\n    }\n    var visitor = {\n        onObjectBegin: function () {\n            var object = {};\n            onValue(object);\n            previousParents.push(currentParent);\n            currentParent = object;\n            currentProperty = null;\n        },\n        onObjectProperty: function (name) {\n            currentProperty = name;\n        },\n        onObjectEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onArrayBegin: function () {\n            var array = [];\n            onValue(array);\n            previousParents.push(currentParent);\n            currentParent = array;\n            currentProperty = null;\n        },\n        onArrayEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onLiteralValue: onValue,\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    return currentParent[0];\n}\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport function parseTree(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentParent = { type: 'array', offset: -1, length: -1, children: [], parent: void 0 }; // artificial root\n    function ensurePropertyComplete(endOffset) {\n        if (currentParent.type === 'property') {\n            currentParent.length = endOffset - currentParent.offset;\n            currentParent = currentParent.parent;\n        }\n    }\n    function onValue(valueNode) {\n        currentParent.children.push(valueNode);\n        return valueNode;\n    }\n    var visitor = {\n        onObjectBegin: function (offset) {\n            currentParent = onValue({ type: 'object', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onObjectProperty: function (name, offset, length) {\n            currentParent = onValue({ type: 'property', offset: offset, length: -1, parent: currentParent, children: [] });\n            currentParent.children.push({ type: 'string', value: name, offset: offset, length: length, parent: currentParent });\n        },\n        onObjectEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onArrayBegin: function (offset, length) {\n            currentParent = onValue({ type: 'array', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onArrayEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onLiteralValue: function (value, offset, length) {\n            onValue({ type: getLiteralNodeType(value), offset: offset, length: length, parent: currentParent, value: value });\n            ensurePropertyComplete(offset + length);\n        },\n        onSeparator: function (sep, offset, length) {\n            if (currentParent.type === 'property') {\n                if (sep === ':') {\n                    currentParent.colonOffset = offset;\n                }\n                else if (sep === ',') {\n                    ensurePropertyComplete(offset);\n                }\n            }\n        },\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    var result = currentParent.children[0];\n    if (result) {\n        delete result.parent;\n    }\n    return result;\n}\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport function findNodeAtLocation(root, path) {\n    if (!root) {\n        return void 0;\n    }\n    var node = root;\n    for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n        var segment = path_1[_i];\n        if (typeof segment === 'string') {\n            if (node.type !== 'object' || !Array.isArray(node.children)) {\n                return void 0;\n            }\n            var found = false;\n            for (var _a = 0, _b = node.children; _a < _b.length; _a++) {\n                var propertyNode = _b[_a];\n                if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment) {\n                    node = propertyNode.children[1];\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return void 0;\n            }\n        }\n        else {\n            var index = segment;\n            if (node.type !== 'array' || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {\n                return void 0;\n            }\n            node = node.children[index];\n        }\n    }\n    return node;\n}\n/**\n * Gets the JSON path of the given JSON DOM node\n */\nexport function getNodePath(node) {\n    if (!node.parent || !node.parent.children) {\n        return [];\n    }\n    var path = getNodePath(node.parent);\n    if (node.parent.type === 'property') {\n        var key = node.parent.children[0].value;\n        path.push(key);\n    }\n    else if (node.parent.type === 'array') {\n        var index = node.parent.children.indexOf(node);\n        if (index !== -1) {\n            path.push(index);\n        }\n    }\n    return path;\n}\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport function getNodeValue(node) {\n    switch (node.type) {\n        case 'array':\n            return node.children.map(getNodeValue);\n        case 'object':\n            var obj = Object.create(null);\n            for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n                var prop = _a[_i];\n                var valueNode = prop.children[1];\n                if (valueNode) {\n                    obj[prop.children[0].value] = getNodeValue(valueNode);\n                }\n            }\n            return obj;\n        case 'null':\n        case 'string':\n        case 'number':\n        case 'boolean':\n            return node.value;\n        default:\n            return void 0;\n    }\n}\nexport function contains(node, offset, includeRightBound) {\n    if (includeRightBound === void 0) { includeRightBound = false; }\n    return (offset >= node.offset && offset < (node.offset + node.length)) || includeRightBound && (offset === (node.offset + node.length));\n}\n/**\n * Finds the most inner node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\nexport function findNodeAtOffset(node, offset, includeRightBound) {\n    if (includeRightBound === void 0) { includeRightBound = false; }\n    if (contains(node, offset, includeRightBound)) {\n        var children = node.children;\n        if (Array.isArray(children)) {\n            for (var i = 0; i < children.length && children[i].offset <= offset; i++) {\n                var item = findNodeAtOffset(children[i], offset, includeRightBound);\n                if (item) {\n                    return item;\n                }\n            }\n        }\n        return node;\n    }\n    return void 0;\n}\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport function visit(text, visitor, options) {\n    var _scanner = createScanner(text, false);\n    function toNoArgVisit(visitFunction) {\n        return visitFunction ? function () { return visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    function toOneArgVisit(visitFunction) {\n        return visitFunction ? function (arg) { return visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    var onObjectBegin = toNoArgVisit(visitor.onObjectBegin), onObjectProperty = toOneArgVisit(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisit(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisit(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);\n    var disallowComments = options && options.disallowComments;\n    var allowTrailingComma = options && options.allowTrailingComma;\n    function scanNext() {\n        while (true) {\n            var token = _scanner.scan();\n            switch (_scanner.getTokenError()) {\n                case 4 /* InvalidUnicode */:\n                    handleError(14 /* InvalidUnicode */);\n                    break;\n                case 5 /* InvalidEscapeCharacter */:\n                    handleError(15 /* InvalidEscapeCharacter */);\n                    break;\n                case 3 /* UnexpectedEndOfNumber */:\n                    handleError(13 /* UnexpectedEndOfNumber */);\n                    break;\n                case 1 /* UnexpectedEndOfComment */:\n                    if (!disallowComments) {\n                        handleError(11 /* UnexpectedEndOfComment */);\n                    }\n                    break;\n                case 2 /* UnexpectedEndOfString */:\n                    handleError(12 /* UnexpectedEndOfString */);\n                    break;\n                case 6 /* InvalidCharacter */:\n                    handleError(16 /* InvalidCharacter */);\n                    break;\n            }\n            switch (token) {\n                case 12 /* LineCommentTrivia */:\n                case 13 /* BlockCommentTrivia */:\n                    if (disallowComments) {\n                        handleError(10 /* InvalidCommentToken */);\n                    }\n                    else {\n                        onComment();\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    handleError(1 /* InvalidSymbol */);\n                    break;\n                case 15 /* Trivia */:\n                case 14 /* LineBreakTrivia */:\n                    break;\n                default:\n                    return token;\n            }\n        }\n    }\n    function handleError(error, skipUntilAfter, skipUntil) {\n        if (skipUntilAfter === void 0) { skipUntilAfter = []; }\n        if (skipUntil === void 0) { skipUntil = []; }\n        onError(error);\n        if (skipUntilAfter.length + skipUntil.length > 0) {\n            var token = _scanner.getToken();\n            while (token !== 17 /* EOF */) {\n                if (skipUntilAfter.indexOf(token) !== -1) {\n                    scanNext();\n                    break;\n                }\n                else if (skipUntil.indexOf(token) !== -1) {\n                    break;\n                }\n                token = scanNext();\n            }\n        }\n    }\n    function parseString(isValue) {\n        var value = _scanner.getTokenValue();\n        if (isValue) {\n            onLiteralValue(value);\n        }\n        else {\n            onObjectProperty(value);\n        }\n        scanNext();\n        return true;\n    }\n    function parseLiteral() {\n        switch (_scanner.getToken()) {\n            case 11 /* NumericLiteral */:\n                var value = 0;\n                try {\n                    value = JSON.parse(_scanner.getTokenValue());\n                    if (typeof value !== 'number') {\n                        handleError(2 /* InvalidNumberFormat */);\n                        value = 0;\n                    }\n                }\n                catch (e) {\n                    handleError(2 /* InvalidNumberFormat */);\n                }\n                onLiteralValue(value);\n                break;\n            case 7 /* NullKeyword */:\n                onLiteralValue(null);\n                break;\n            case 8 /* TrueKeyword */:\n                onLiteralValue(true);\n                break;\n            case 9 /* FalseKeyword */:\n                onLiteralValue(false);\n                break;\n            default:\n                return false;\n        }\n        scanNext();\n        return true;\n    }\n    function parseProperty() {\n        if (_scanner.getToken() !== 10 /* StringLiteral */) {\n            handleError(3 /* PropertyNameExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            return false;\n        }\n        parseString(false);\n        if (_scanner.getToken() === 6 /* ColonToken */) {\n            onSeparator(':');\n            scanNext(); // consume colon\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n        }\n        else {\n            handleError(5 /* ColonExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n        }\n        return true;\n    }\n    function parseObject() {\n        onObjectBegin();\n        scanNext(); // consume open brace\n        var needsComma = false;\n        while (_scanner.getToken() !== 2 /* CloseBraceToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 2 /* CloseBraceToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseProperty()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onObjectEnd();\n        if (_scanner.getToken() !== 2 /* CloseBraceToken */) {\n            handleError(7 /* CloseBraceExpected */, [2 /* CloseBraceToken */], []);\n        }\n        else {\n            scanNext(); // consume close brace\n        }\n        return true;\n    }\n    function parseArray() {\n        onArrayBegin();\n        scanNext(); // consume open bracket\n        var needsComma = false;\n        while (_scanner.getToken() !== 4 /* CloseBracketToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 4 /* CloseBracketToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [4 /* CloseBracketToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onArrayEnd();\n        if (_scanner.getToken() !== 4 /* CloseBracketToken */) {\n            handleError(8 /* CloseBracketExpected */, [4 /* CloseBracketToken */], []);\n        }\n        else {\n            scanNext(); // consume close bracket\n        }\n        return true;\n    }\n    function parseValue() {\n        switch (_scanner.getToken()) {\n            case 3 /* OpenBracketToken */:\n                return parseArray();\n            case 1 /* OpenBraceToken */:\n                return parseObject();\n            case 10 /* StringLiteral */:\n                return parseString(true);\n            default:\n                return parseLiteral();\n        }\n    }\n    scanNext();\n    if (_scanner.getToken() === 17 /* EOF */) {\n        return true;\n    }\n    if (!parseValue()) {\n        handleError(4 /* ValueExpected */, [], []);\n        return false;\n    }\n    if (_scanner.getToken() !== 17 /* EOF */) {\n        handleError(9 /* EndOfFileExpected */, [], []);\n    }\n    return true;\n}\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport function stripComments(text, replaceCh) {\n    var _scanner = createScanner(text), parts = [], kind, offset = 0, pos;\n    do {\n        pos = _scanner.getPosition();\n        kind = _scanner.scan();\n        switch (kind) {\n            case 12 /* LineCommentTrivia */:\n            case 13 /* BlockCommentTrivia */:\n            case 17 /* EOF */:\n                if (offset !== pos) {\n                    parts.push(text.substring(offset, pos));\n                }\n                if (replaceCh !== void 0) {\n                    parts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n                }\n                offset = _scanner.getPosition();\n                break;\n        }\n    } while (kind !== 17 /* EOF */);\n    return parts.join('');\n}\nfunction getLiteralNodeType(value) {\n    switch (typeof value) {\n        case 'boolean': return 'boolean';\n        case 'number': return 'number';\n        case 'string': return 'string';\n        default: return 'null';\n    }\n}\n//# sourceMappingURL=parser.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { format, isEOL } from './format.js';\nimport { parseTree, findNodeAtLocation } from './parser.js';\nexport function removeProperty(text, path, formattingOptions) {\n    return setProperty(text, path, void 0, formattingOptions);\n}\nexport function setProperty(text, path, value, formattingOptions, getInsertionIndex) {\n    var errors = [];\n    var root = parseTree(text, errors);\n    var parent = void 0;\n    var lastSegment = void 0;\n    while (path.length > 0) {\n        lastSegment = path.pop();\n        parent = findNodeAtLocation(root, path);\n        if (parent === void 0 && value !== void 0) {\n            if (typeof lastSegment === 'string') {\n                value = (_a = {}, _a[lastSegment] = value, _a);\n            }\n            else {\n                value = [value];\n            }\n        }\n        else {\n            break;\n        }\n    }\n    if (!parent) {\n        // empty document\n        if (value === void 0) { // delete\n            throw new Error('Can not delete in empty document');\n        }\n        return withFormatting(text, { offset: root ? root.offset : 0, length: root ? root.length : 0, content: JSON.stringify(value) }, formattingOptions);\n    }\n    else if (parent.type === 'object' && typeof lastSegment === 'string' && Array.isArray(parent.children)) {\n        var existing = findNodeAtLocation(parent, [lastSegment]);\n        if (existing !== void 0) {\n            if (value === void 0) { // delete\n                if (!existing.parent) {\n                    throw new Error('Malformed AST');\n                }\n                var propertyIndex = parent.children.indexOf(existing.parent);\n                var removeBegin = void 0;\n                var removeEnd = existing.parent.offset + existing.parent.length;\n                if (propertyIndex > 0) {\n                    // remove the comma of the previous node\n                    var previous = parent.children[propertyIndex - 1];\n                    removeBegin = previous.offset + previous.length;\n                }\n                else {\n                    removeBegin = parent.offset + 1;\n                    if (parent.children.length > 1) {\n                        // remove the comma of the next node\n                        var next = parent.children[1];\n                        removeEnd = next.offset;\n                    }\n                }\n                return withFormatting(text, { offset: removeBegin, length: removeEnd - removeBegin, content: '' }, formattingOptions);\n            }\n            else {\n                // set value of existing property\n                return withFormatting(text, { offset: existing.offset, length: existing.length, content: JSON.stringify(value) }, formattingOptions);\n            }\n        }\n        else {\n            if (value === void 0) { // delete\n                return []; // property does not exist, nothing to do\n            }\n            var newProperty = JSON.stringify(lastSegment) + \": \" + JSON.stringify(value);\n            var index = getInsertionIndex ? getInsertionIndex(parent.children.map(function (p) { return p.children[0].value; })) : parent.children.length;\n            var edit = void 0;\n            if (index > 0) {\n                var previous = parent.children[index - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            else if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty + ',' };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n    }\n    else if (parent.type === 'array' && typeof lastSegment === 'number' && Array.isArray(parent.children)) {\n        var insertIndex = lastSegment;\n        if (insertIndex === -1) {\n            // Insert\n            var newProperty = \"\" + JSON.stringify(value);\n            var edit = void 0;\n            if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                var previous = parent.children[parent.children.length - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n        else {\n            if (value === void 0 && parent.children.length >= 0) {\n                //Removal\n                var removalIndex = lastSegment;\n                var toRemove = parent.children[removalIndex];\n                var edit = void 0;\n                if (parent.children.length === 1) {\n                    // only item\n                    edit = { offset: parent.offset + 1, length: parent.length - 2, content: '' };\n                }\n                else if (parent.children.length - 1 === removalIndex) {\n                    // last item\n                    var previous = parent.children[removalIndex - 1];\n                    var offset = previous.offset + previous.length;\n                    var parentEndOffset = parent.offset + parent.length;\n                    edit = { offset: offset, length: parentEndOffset - 2 - offset, content: '' };\n                }\n                else {\n                    edit = { offset: toRemove.offset, length: parent.children[removalIndex + 1].offset - toRemove.offset, content: '' };\n                }\n                return withFormatting(text, edit, formattingOptions);\n            }\n            else {\n                throw new Error('Array modification not supported yet');\n            }\n        }\n    }\n    else {\n        throw new Error(\"Can not add \" + (typeof lastSegment !== 'number' ? 'index' : 'property') + \" to parent of type \" + parent.type);\n    }\n    var _a;\n}\nfunction withFormatting(text, edit, formattingOptions) {\n    // apply the edit\n    var newText = applyEdit(text, edit);\n    // format the new text\n    var begin = edit.offset;\n    var end = edit.offset + edit.content.length;\n    if (edit.length === 0 || edit.content.length === 0) { // insert or remove\n        while (begin > 0 && !isEOL(newText, begin - 1)) {\n            begin--;\n        }\n        while (end < newText.length && !isEOL(newText, end)) {\n            end++;\n        }\n    }\n    var edits = format(newText, { offset: begin, length: end - begin }, formattingOptions);\n    // apply the formatting edits and track the begin and end offsets of the changes\n    for (var i = edits.length - 1; i >= 0; i--) {\n        var edit_1 = edits[i];\n        newText = applyEdit(newText, edit_1);\n        begin = Math.min(begin, edit_1.offset);\n        end = Math.max(end, edit_1.offset + edit_1.length);\n        end += edit_1.content.length - edit_1.length;\n    }\n    // create a single edit with all changes\n    var editLength = text.length - (newText.length - end) - begin;\n    return [{ offset: begin, length: editLength, content: newText.substring(begin, end) }];\n}\nexport function applyEdit(text, edit) {\n    return text.substring(0, edit.offset) + edit.content + text.substring(edit.offset + edit.length);\n}\nexport function isWS(text, offset) {\n    return '\\r\\n \\t'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=edit.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as formatter from './impl/format.js';\nimport * as edit from './impl/edit.js';\nimport * as scanner from './impl/scanner.js';\nimport * as parser from './impl/parser.js';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport var createScanner = scanner.createScanner;\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport var getLocation = parser.getLocation;\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport var parse = parser.parse;\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport var parseTree = parser.parseTree;\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport var findNodeAtLocation = parser.findNodeAtLocation;\n/**\n * Finds the most inner node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\nexport var findNodeAtOffset = parser.findNodeAtOffset;\n/**\n * Gets the JSON path of the given JSON DOM node\n */\nexport var getNodePath = parser.getNodePath;\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport var getNodeValue = parser.getNodeValue;\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport var visit = parser.visit;\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport var stripComments = parser.stripComments;\n/**\n * Computes the edits needed to format a JSON document.\n *\n * @param documentText The input text\n * @param range The range to format or `undefined` to format the full content\n * @param options The formatting options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function format(documentText, range, options) {\n    return formatter.format(documentText, range, options);\n}\n/**\n * Computes the edits needed to modify a value in the JSON document.\n *\n * @param documentText The input text\n * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n * If the path points to an non-existing property or item, it will be created.\n * @param value The new value for the specified property or item. If the value is undefined,\n * the property or item will be removed.\n * @param options Options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function modify(text, path, value, options) {\n    return edit.setProperty(text, path, value, options.formattingOptions, options.getInsertionIndex);\n}\n/**\n * Applies edits to a input string.\n */\nexport function applyEdits(text, edits) {\n    for (var i = edits.length - 1; i >= 0; i--) {\n        text = edit.applyEdit(text, edits[i]);\n    }\n    return text;\n}\n//# sourceMappingURL=main.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as json from './_deps/jsonc-parser/main.js';\nexport function createTokenizationSupport(supportComments) {\n    return {\n        getInitialState: function () { return new JSONState(null, null, false); },\n        tokenize: function (line, state, offsetDelta, stopAtOffset) { return tokenize(supportComments, line, state, offsetDelta, stopAtOffset); }\n    };\n}\nexport var TOKEN_DELIM_OBJECT = 'delimiter.bracket.json';\nexport var TOKEN_DELIM_ARRAY = 'delimiter.array.json';\nexport var TOKEN_DELIM_COLON = 'delimiter.colon.json';\nexport var TOKEN_DELIM_COMMA = 'delimiter.comma.json';\nexport var TOKEN_VALUE_BOOLEAN = 'keyword.json';\nexport var TOKEN_VALUE_NULL = 'keyword.json';\nexport var TOKEN_VALUE_STRING = 'string.value.json';\nexport var TOKEN_VALUE_NUMBER = 'number.json';\nexport var TOKEN_PROPERTY_NAME = 'string.key.json';\nexport var TOKEN_COMMENT_BLOCK = 'comment.block.json';\nexport var TOKEN_COMMENT_LINE = 'comment.line.json';\nvar JSONState = /** @class */ (function () {\n    function JSONState(state, scanError, lastWasColon) {\n        this._state = state;\n        this.scanError = scanError;\n        this.lastWasColon = lastWasColon;\n    }\n    JSONState.prototype.clone = function () {\n        return new JSONState(this._state, this.scanError, this.lastWasColon);\n    };\n    JSONState.prototype.equals = function (other) {\n        if (other === this) {\n            return true;\n        }\n        if (!other || !(other instanceof JSONState)) {\n            return false;\n        }\n        return this.scanError === other.scanError &&\n            this.lastWasColon === other.lastWasColon;\n    };\n    JSONState.prototype.getStateData = function () {\n        return this._state;\n    };\n    JSONState.prototype.setStateData = function (state) {\n        this._state = state;\n    };\n    return JSONState;\n}());\nfunction tokenize(comments, line, state, offsetDelta, stopAtOffset) {\n    if (offsetDelta === void 0) { offsetDelta = 0; }\n    // handle multiline strings and block comments\n    var numberOfInsertedCharacters = 0, adjustOffset = false;\n    switch (state.scanError) {\n        case 2 /* UnexpectedEndOfString */:\n            line = '\"' + line;\n            numberOfInsertedCharacters = 1;\n            break;\n        case 1 /* UnexpectedEndOfComment */:\n            line = '/*' + line;\n            numberOfInsertedCharacters = 2;\n            break;\n    }\n    var scanner = json.createScanner(line), kind, ret, lastWasColon = state.lastWasColon;\n    ret = {\n        tokens: [],\n        endState: state.clone()\n    };\n    while (true) {\n        var offset = offsetDelta + scanner.getPosition(), type = '';\n        kind = scanner.scan();\n        if (kind === 17 /* EOF */) {\n            break;\n        }\n        // Check that the scanner has advanced\n        if (offset === offsetDelta + scanner.getPosition()) {\n            throw new Error('Scanner did not advance, next 3 characters are: ' + line.substr(scanner.getPosition(), 3));\n        }\n        // In case we inserted /* or \" character, we need to\n        // adjust the offset of all tokens (except the first)\n        if (adjustOffset) {\n            offset -= numberOfInsertedCharacters;\n        }\n        adjustOffset = numberOfInsertedCharacters > 0;\n        // brackets and type\n        switch (kind) {\n            case 1 /* OpenBraceToken */:\n                type = TOKEN_DELIM_OBJECT;\n                lastWasColon = false;\n                break;\n            case 2 /* CloseBraceToken */:\n                type = TOKEN_DELIM_OBJECT;\n                lastWasColon = false;\n                break;\n            case 3 /* OpenBracketToken */:\n                type = TOKEN_DELIM_ARRAY;\n                lastWasColon = false;\n                break;\n            case 4 /* CloseBracketToken */:\n                type = TOKEN_DELIM_ARRAY;\n                lastWasColon = false;\n                break;\n            case 6 /* ColonToken */:\n                type = TOKEN_DELIM_COLON;\n                lastWasColon = true;\n                break;\n            case 5 /* CommaToken */:\n                type = TOKEN_DELIM_COMMA;\n                lastWasColon = false;\n                break;\n            case 8 /* TrueKeyword */:\n            case 9 /* FalseKeyword */:\n                type = TOKEN_VALUE_BOOLEAN;\n                lastWasColon = false;\n                break;\n            case 7 /* NullKeyword */:\n                type = TOKEN_VALUE_NULL;\n                lastWasColon = false;\n                break;\n            case 10 /* StringLiteral */:\n                type = lastWasColon ? TOKEN_VALUE_STRING : TOKEN_PROPERTY_NAME;\n                lastWasColon = false;\n                break;\n            case 11 /* NumericLiteral */:\n                type = TOKEN_VALUE_NUMBER;\n                lastWasColon = false;\n                break;\n        }\n        // comments, iff enabled\n        if (comments) {\n            switch (kind) {\n                case 12 /* LineCommentTrivia */:\n                    type = TOKEN_COMMENT_LINE;\n                    break;\n                case 13 /* BlockCommentTrivia */:\n                    type = TOKEN_COMMENT_BLOCK;\n                    break;\n            }\n        }\n        ret.endState = new JSONState(state.getStateData(), scanner.getTokenError(), lastWasColon);\n        ret.tokens.push({\n            startIndex: offset,\n            scopes: type\n        });\n    }\n    return ret;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { WorkerManager } from './workerManager.js';\nimport * as languageFeatures from './languageFeatures.js';\nimport { createTokenizationSupport } from './tokenization.js';\nexport function setupMode(defaults) {\n    var disposables = [];\n    var client = new WorkerManager(defaults);\n    disposables.push(client);\n    var worker = function () {\n        var uris = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            uris[_i] = arguments[_i];\n        }\n        return client.getLanguageServiceWorker.apply(client, uris);\n    };\n    var languageId = defaults.languageId;\n    disposables.push(monaco.languages.registerCompletionItemProvider(languageId, new languageFeatures.CompletionAdapter(worker)));\n    disposables.push(monaco.languages.registerHoverProvider(languageId, new languageFeatures.HoverAdapter(worker)));\n    disposables.push(monaco.languages.registerDocumentSymbolProvider(languageId, new languageFeatures.DocumentSymbolAdapter(worker)));\n    disposables.push(monaco.languages.registerDocumentFormattingEditProvider(languageId, new languageFeatures.DocumentFormattingEditProvider(worker)));\n    disposables.push(monaco.languages.registerDocumentRangeFormattingEditProvider(languageId, new languageFeatures.DocumentRangeFormattingEditProvider(worker)));\n    disposables.push(new languageFeatures.DiagnosticsAdapter(languageId, worker, defaults));\n    disposables.push(monaco.languages.setTokensProvider(languageId, createTokenizationSupport(true)));\n    disposables.push(monaco.languages.setLanguageConfiguration(languageId, richEditConfiguration));\n    disposables.push(monaco.languages.registerColorProvider(languageId, new languageFeatures.DocumentColorAdapter(worker)));\n    disposables.push(monaco.languages.registerFoldingRangeProvider(languageId, new languageFeatures.FoldingRangeAdapter(worker)));\n}\nvar richEditConfiguration = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\[\\{\\]\\}\\:\\\"\\,\\s]+)/g,\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}', notIn: ['string'] },\n        { open: '[', close: ']', notIn: ['string'] },\n        { open: '\"', close: '\"', notIn: ['string'] }\n    ]\n};\n"],"sourceRoot":""}