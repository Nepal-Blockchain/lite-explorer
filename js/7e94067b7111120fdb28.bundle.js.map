{"version":3,"sources":["webpack:///./components/content/box/block/ConfirmationsBox.tsx","webpack:///./components/content/box/block/BlockHashBox.tsx","webpack:///./components/content/box/block/ParentHashBox.tsx","webpack:///./components/content/box/block/BlockSizeBox.tsx","webpack:///./page/block/txHighlight/TxHighlightSelector.tsx","webpack:///./page/block/ViewSelectorButton.tsx","webpack:///./page/block/ViewSelectorBox.tsx","webpack:///./components/content/txHeatMap/TxTooltipContent.tsx","webpack:///./components/content/txHeatMap/TxBubble.tsx","webpack:///./components/content/txHeatMap/TxsHeatMapItem.tsx","webpack:///./components/content/txHeatMap/TxsHeatMapItems.tsx","webpack:///./components/content/txHeatMap/TxsHeatMap.tsx","webpack:///./components/content/grid/Grid.tsx","webpack:///./components/content/grid/GridLink.tsx","webpack:///./components/content/grid/dataRenderer/tx/TxLinkRenderer.tsx","webpack:///./components/content/grid/dataRenderer/account/AccountLinkRenderer.tsx","webpack:///./page/block/txsGrid/TxGridFields.tsx","webpack:///./page/block/TxsGrid.tsx","webpack:///./page/block/TxsViews.tsx","webpack:///./page/block/BlockContent.tsx","webpack:///./components/content/box/block/UnclesCountBox.tsx","webpack:///./helpers/getRelativeTimeTranslations.ts","webpack:///./components/content/box/TimeElapsedBox.tsx","webpack:///./components/content/box/uncle/UncleHashBox.tsx","webpack:///./components/content/box/account/AddressHashBox.tsx","webpack:///./page/block/txHighlight/HighlightSelectBox.tsx","webpack:///./components/content/box/block/BlockNonceBox.tsx"],"names":["__webpack_require__","d","__webpack_exports__","ConfirmationsBox","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","ethstats_ui_lib_layout_content_box_ValueBox__WEBPACK_IMPORTED_MODULE_1__","app_styled_components__WEBPACK_IMPORTED_MODULE_2__","ethstats_ui_lib_icon_StatusSomeConfirmedIcon__WEBPACK_IMPORTED_MODULE_3__","ethstats_ui_lib_icon_StatusNotConfirmedIcon__WEBPACK_IMPORTED_MODULE_4__","ethstats_ui_lib_icon_StatusConfirmedIcon__WEBPACK_IMPORTED_MODULE_5__","$ConfirmationsBox","translation","confirmations","isConfirmed","tooltipText","get","%d","colors","iconPlacement","Icon","Object","BlockHashBox_BlockHashBox","react","[object Object]","children","linkTo","clipboard","this","props","HashLinkValueBox","theme","background","blockColorCode","text","blockBoxText","ParentHashBox","parentHashBoxBg","parentHashBoxText","BlockSizeBox","bytes","locale","translations","ValueBox","ByteSize","format","TxHighlightSelector_TxHighlightSelector","TxHighlightSelector","onCheckboxChange","_e","checked","_name","value","fields","setSelectedField","requestClose","tr","SelectBox","disabled","offset","left","top","render","index_module","getFields","map","f","Radio","id","key","name","getSelectedField","onChange","getLabel","HighlightSelectBox","tslib_es6","HEIGHT","$ViewSelectorButton","className","onClick","ViewSelectorButton","styled_components","withConfig","displayName","componentId","active","txViewSelector","txViewSelectorActive","ViewSelectorBox_HEIGHT","ViewSelectorRoot","div","ViewSelectorBox_ViewSelectorBox","ViewSelectorBox","onListClick","txsViewMode","setToTableList","onGridClick","setToHeatMapGrid","isTableList","ListViewIcon","isHeatMapGrid","GridViewIcon","TxTooltipContentWrapper","TxTooltipContent_TxTooltipContent","tx","TxHashBox","variant","hash","Label","AddressHashBox","from","to","style","paddingLeft","arrow","isZero","display","EthValueBox","wei","TxBubble","size","highlightThreshold","ThemeContext","Consumer","Bubble","wrapperSize","spacing","bubbleWrapperSize","backgroundColor","txColorCode","TxsHeatMapItem_TxsHeatMapItem","handleMouseEnter","onMouseEnter","handleMouseLeave","onMouseLeave","DomNodeProxy","onMount","el","addEventListener","onUnmount","removeEventListener","Link","url","getTx","bubbleSize","TxsHeatMapItems_TxsHeatMapItems","bubbleSizes","transactions","idx","onTxMouseEnter","onTxMouseLeave","TxsHeatMapRoot","TxsHeatMap_TxsHeatMap","TxsHeatMap","super","handleActiveChange","hoveredTx","handleTxEnter","multiHover","enter","handleTxLeave","leave","handleTooltipEnter","handleTooltipLeave","setupMultiHover","MultiHover","enterDelay","leaveDelay","onActiveChange","subscribe","prevProps","unsubscribe","values","highlightDataSelector","minMaxLogScale","innerRef","ref","rootEl","Popover","visible","placement","alignmentOffset","noFlip","noArrow","referenceElement","content","mobx_module","Grid_Grid","_a","grid_Grid","assign","noDataText","loadMoreText","GridLink","link","TxLinkRenderer_TxLinkRenderer","gridFieldDataGetter","Hash","AccountLinkRenderer_AccountLinkRenderer","getAccount","TxGridFields_TxGridFields","GridFields","t","highlightFn","label","fieldKey","ITxGridFieldKeys","type","isSortable","selected","alwaysVisible","getFieldValue","renderer","From","To","Value","EthRenderer","TxsGridRoot","TxsGrid_TxsGrid","TxsGrid","highlight","data","percentLog","scaledHighlightValues","Error","gridPartialFields","gridSortingOptions","updateSortingField","oldSortField","field","newField","gridFields","find","highlightValues","computeScaledHighlightValues","rows","sortingOptions","Map","forEach","v","i","set","HIGHLIGHT_THRESHOLD","TxsViews_TxsViews","TxsViews","length","highlightByField","highlightFields","LayoutRow","LayoutRowItem","fullRow","autoHeight","maxWidth","getData","BlockContent_BlockContent","blockDetails","block","blockConfirmations","appConfig","getLocale","LayoutSection","useWrapper","minWidth","BlockNumberBox","noLink","creationTime","TimeElapsedBox","timestamp","blockConfirmed","UnclesCountBox","uncles","parentHash","parentId","getBlock","uncleHash","index","UncleHashBox","blockNr","uncleIndex","nonce","BlockNonceBox","byteSize","TxCountBox","txsHighlightFields","txsGridSortingOptions","Spacer","height","sha3uncles","HashValueBox","beneficiaryAddress","NumberBox","gasLimit","GasUsedValueBox","gasUsed","limit","DifficultyBox","difficulty","ibftExtraData","extraData","replace","DecodedHexData","validators","item","votes","address","vote","blockTries","commitSeals","mixHash","HexData","logsBloom","ethstats_ui_lib_data_Number__WEBPACK_IMPORTED_MODULE_2__","unclesBoxBg","unclesBoxText","border","unclesBoxBorder","getRelativeTimeTranslations","future","past","s","ss","m","mm","h","hh","dd","M","MM","y","yy","TimeElapsedBox_TimeElapsedBox","react_default","a","Component","createElement","box_TimeElapsedBox","react__WEBPACK_IMPORTED_MODULE_1__","app_components_content_box_HashLinkValueBox__WEBPACK_IMPORTED_MODULE_2__","getUncle","tslib__WEBPACK_IMPORTED_MODULE_0__","mobx_react__WEBPACK_IMPORTED_MODULE_3__","app_components_content_box_HashLinkValueBox__WEBPACK_IMPORTED_MODULE_1__","addressHashBoxBg","valueBox","primary","app_styled_components__WEBPACK_IMPORTED_MODULE_0__","selectBoxBorder","selectBoxBg","selectBoxTextDisabled","selectBoxText","selectBoxBubble","selectBoxArrow","ethstats_ui_lib_data_Hash__WEBPACK_IMPORTED_MODULE_2__"],"mappings":"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","file":"js/7e94067b7111120fdb28.bundle.js","sourcesContent":["import * as React from \"react\";\nimport { ValueBox } from \"ethstats-ui/lib/layout/content/box/ValueBox\";\nimport { ITheme } from \"app/theme\";\nimport { withTheme } from \"app/styled-components\";\nimport { Translation } from \"app/Translation\";\nimport { StatusSomeConfirmedIcon } from \"ethstats-ui/lib/icon/StatusSomeConfirmedIcon\";\nimport { StatusNotConfirmedIcon } from \"ethstats-ui/lib/icon/StatusNotConfirmedIcon\";\nimport { StatusConfirmedIcon } from \"ethstats-ui/lib/icon/StatusConfirmedIcon\";\n\ninterface IConfirmationsBoxProps {\n    theme: ITheme;\n    translation: Translation;\n    locale: string | undefined;\n    confirmations: number;\n    isConfirmed: boolean;\n}\n\nconst $ConfirmationsBox: React.StatelessComponent<IConfirmationsBoxProps> = ({\n    translation, confirmations, isConfirmed\n}) => {\n    let tooltipText = isConfirmed ?\n        translation.get(\"blockView.content.blockConfirmations.confirmed\") :\n        translation.get(\"blockView.content.blockConfirmations.text\", {\"%d\": confirmations});\n\n    return <ValueBox colors={isConfirmed ? \"highlight\" : \"warn\"}\n        iconPlacement=\"left\"\n        Icon={isConfirmed ?\n            StatusConfirmedIcon :\n            confirmations ? StatusSomeConfirmedIcon : StatusNotConfirmedIcon}\n    >\n        { tooltipText }\n    </ValueBox>;\n};\n\nexport const ConfirmationsBox = withTheme($ConfirmationsBox);\n","import * as React from \"react\";\nimport { HashLinkValueBox } from \"app/components/content/box/HashLinkValueBox\";\nimport { Clipboard } from \"app/helpers/Clipboard\";\nimport { ITheme } from \"app/theme\";\n\ninterface IBlockHashBoxProps {\n    children: string;\n    linkTo?: string;\n    clipboard: Clipboard;\n}\n\nexport class BlockHashBox extends React.Component<IBlockHashBoxProps> {\n    render() {\n        let { children, linkTo, clipboard } = this.props;\n        return (\n            <HashLinkValueBox\n                colors={(theme: ITheme) => ({\n                    background: theme.colors.blockColorCode,\n                    text: theme.colors.blockBoxText\n                })}\n                linkTo={linkTo}\n                clipboard={clipboard}\n            >\n                { children }\n            </HashLinkValueBox>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { HashLinkValueBox, IHashLinkValueBoxProps } from \"app/components/content/box/HashLinkValueBox\";\nimport { Clipboard } from \"app/helpers/Clipboard\";\nimport { ITheme } from \"app/theme\";\n\ninterface IParentHashBoxProps {\n    linkTo?: IHashLinkValueBoxProps[\"linkTo\"];\n    children: string;\n    clipboard: Clipboard;\n}\n\nexport const ParentHashBox: React.StatelessComponent<IParentHashBoxProps> = ({ children, linkTo, clipboard }) => (\n    <HashLinkValueBox\n        colors={(theme: ITheme) => ({\n            background: theme.colors.parentHashBoxBg,\n            text: theme.colors.parentHashBoxText\n        })}\n        linkTo={linkTo}\n        clipboard={clipboard}\n    >\n        { children }\n    </HashLinkValueBox>\n);\n","import * as React from \"react\";\nimport { ValueBox } from \"ethstats-ui/lib/layout/content/box/ValueBox\";\nimport { ByteSize } from \"ethstats-ui/lib/data/ByteSize\";\n\nexport interface IBlockSizeBoxProps {\n    bytes: number;\n    locale: string;\n    translations: {\n        bytes: string;\n    };\n}\n\nexport const BlockSizeBox: React.StatelessComponent<IBlockSizeBoxProps> = ({ bytes, locale, translations }) => (\n    <ValueBox><ByteSize format={\"%d \" + translations.bytes} locale={locale}>{bytes}</ByteSize></ValueBox>\n);\n","import * as React from \"react\";\nimport { SelectBox } from \"ethstats-ui/lib/control/SelectBox\";\nimport { HighlightSelectBox } from \"app/page/block/txHighlight/HighlightSelectBox\";\nimport { Radio } from \"ethstats-ui/lib/control/Radio\";\nimport { HighlightFields } from \"app/page/block/txHighlight/HighlightFields\";\nimport { observer, Observer } from \"mobx-react\";\nimport { ITxLite } from \"app/data/tx/ITxLite\";\nimport { Translation } from \"app/Translation\";\n\ninterface ITxHighlightSelectorProps {\n    fields: HighlightFields<ITxLite>;\n    translation: Translation;\n    disabled?: boolean;\n}\n\n@observer\nexport class TxHighlightSelector extends React.Component<ITxHighlightSelectorProps> {\n    private requestClose: () => void;\n\n    render() {\n        let { translation: tr } = this.props;\n        return (\n            <SelectBox disabled={this.props.disabled} offset={{left: -20, top: -47}} render={({requestClose}) => {\n                this.requestClose = requestClose;\n                return (\n                    <Observer>\n                        {() => this.props.fields.getFields().map((f) => {\n                            return (\n                                <Radio\n                                    id={\"highlight_\" + f.key}\n                                    key={f.key}\n                                    value={f.key}\n                                    name=\"highlight\"\n                                    checked={this.props.fields.getSelectedField().key === f.key}\n                                    onChange={this.onCheckboxChange}\n                                >{f.getLabel(tr)}</Radio>\n                            );\n                        })}\n                    </Observer>\n                );\n            }}>\n                <HighlightSelectBox disabled={this.props.disabled}>\n                    { this.props.fields.getSelectedField().getLabel(tr) }\n                </HighlightSelectBox>\n            </SelectBox>\n        );\n    }\n\n    private onCheckboxChange = (\n        _e: React.ChangeEvent<HTMLInputElement>,\n        checked: boolean,\n        _name: string,\n        value: string\n    ) => {\n        if (checked) {\n            this.props.fields.setSelectedField(value);\n        }\n        this.requestClose();\n    }\n}\n","import styled from \"app/styled-components\";\nimport * as React from \"react\";\n\nconst HEIGHT = 28;\ninterface IViewSelectorButtonProps {\n    active?: boolean;\n    className?: string;\n    onClick?(): void;\n}\nconst $ViewSelectorButton: React.StatelessComponent<IViewSelectorButtonProps> = ({ children, className, onClick }) => (\n    <div className={className} onClick={onClick}>{children}</div>\n);\nexport const ViewSelectorButton = styled($ViewSelectorButton)`\n    height: ${HEIGHT}px;\n    width: ${HEIGHT}px;\n    box-sizing: border-box;\n    border-radius: 4px;\n    cursor: pointer;\n    padding: 1px;\n    border: 1px solid ${({active, theme}) => active ? theme.colors.txViewSelector : \"transparent\"};\n    color: ${({active, theme}) => active ? theme.colors.txViewSelectorActive : theme.colors.txViewSelector};\n    &:hover {\n        border: 1px solid ${({theme}) => theme.colors.txViewSelector};\n        color: ${({theme}) => theme.colors.txViewSelectorActive};\n    }\n`;\n","import styled from \"app/styled-components\";\nimport * as React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { ViewSelectorButton } from \"./ViewSelectorButton\";\nimport { TxsViewMode } from \"app/page/block/txsViews/TxsViewMode\";\nimport { ListViewIcon } from \"ethstats-ui/lib/icon/ListViewIcon\";\nimport { GridViewIcon } from \"ethstats-ui/lib/icon/GridViewIcon\";\n\nconst HEIGHT = 28;\nconst ViewSelectorRoot = styled.div`\n    padding: 0 7px;\n    display: flex;\n    width: ${2 * HEIGHT + 24}px;\n    justify-content: space-between;\n`;\n\ninterface IViewSelectorBoxProps {\n    txsViewMode: TxsViewMode;\n}\n\n@observer\nexport class ViewSelectorBox extends React.Component<IViewSelectorBoxProps> {\n    private onListClick = () => {\n        this.props.txsViewMode.setToTableList();\n    }\n    private onGridClick = () => {\n        this.props.txsViewMode.setToHeatMapGrid();\n    }\n    render() {\n        return (\n            <ViewSelectorRoot>\n                <ViewSelectorButton active={this.props.txsViewMode.isTableList} onClick={this.onListClick}>\n                    <ListViewIcon />\n                </ViewSelectorButton>\n                <ViewSelectorButton active={this.props.txsViewMode.isHeatMapGrid} onClick={this.onGridClick}>\n                    <GridViewIcon />\n                </ViewSelectorButton>\n            </ViewSelectorRoot>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { ITxLite } from \"app/data/tx/ITxLite\";\nimport { TxHashBox } from \"app/components/content/box/tx/TxHashBox\";\nimport { AddressHashBox } from \"app/components/content/box/account/AddressHashBox\";\nimport { Label } from \"ethstats-ui/lib/data/Label\";\nimport { Translation } from \"app/Translation\";\nimport { EthValueBox } from \"ethstats-ui/lib/data/box/EthValueBox\";\nimport styled from \"app/styled-components\";\nimport { Clipboard } from \"app/helpers/Clipboard\";\n\nexport interface ITxTooltipContentProps {\n    tx: ITxLite;\n    clipboard: Clipboard;\n    translation: Translation;\n    locale: string;\n}\n\nconst TxTooltipContentWrapper = styled.div`\n    display: flex;\n    padding: 8px 8px 8px 0;\n\n    > * {\n        margin-left: 8px;\n    }\n`;\n\nexport class TxTooltipContent extends React.Component<ITxTooltipContentProps> {\n    render() {\n        let { tx, translation, clipboard } = this.props;\n        return (\n            <TxTooltipContentWrapper>\n                <TxHashBox variant=\"small\" clipboard={clipboard}>{tx.hash}</TxHashBox>\n                <Label>{translation.get(\"general.from\")}</Label>\n                <AddressHashBox variant=\"small\" clipboard={clipboard}>{tx.from}</AddressHashBox>\n                <Label>{translation.get(\"general.to\")}</Label>\n                <AddressHashBox variant=\"small\" clipboard={clipboard}>{tx.to}</AddressHashBox>\n                <div style={{paddingLeft: 8}}>\n                    <Label arrow disabled={tx.value.isZero()}>{translation.get(\"txTooltip.value.label\")}</Label>\n                </div>\n                <div style={{display: \"flex\"}}>\n                    <EthValueBox variant=\"smallThin\" wei={tx.value} locale={this.props.locale} />\n                </div>\n            </TxTooltipContentWrapper>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { Bubble } from \"ethstats-ui/lib/data/vis/Bubble\";\nimport { ThemeContext } from \"app/ThemeContext\";\n\ninterface ITxBubbleProps {\n    size: number;\n    highlightThreshold: number;\n}\n\nexport const TxBubble: React.StatelessComponent<ITxBubbleProps> = ({ size, highlightThreshold }) => (\n    <ThemeContext.Consumer>\n        {(theme) =>\n            <Bubble\n                size={size}\n                wrapperSize={theme.spacing.bubbleWrapperSize}\n                highlightThreshold={highlightThreshold}\n                backgroundColor={theme.colors.txColorCode} />\n        }\n    </ThemeContext.Consumer>\n);\n","import * as React from \"react\";\nimport { ITxLite } from \"app/data/tx/ITxLite\";\nimport { DomNodeProxy } from \"ethstats-ui/lib/util/react/DomNodeProxy\";\nimport { Link } from \"app/components/Link\";\nimport { TxBubble } from \"app/components/content/txHeatMap/TxBubble\";\n\nexport interface ITxsHeatMapItemProps {\n    tx: ITxLite;\n    bubbleSize: number;\n    highlightThreshold: number;\n    onMouseEnter(tx: ITxLite): void;\n    onMouseLeave(tx: ITxLite): void;\n}\n\nexport class TxsHeatMapItem extends React.PureComponent<ITxsHeatMapItemProps> {\n    render() {\n        return (\n            <DomNodeProxy\n                onMount={el => {\n                    el.addEventListener(\"mouseenter\", this.handleMouseEnter);\n                    el.addEventListener(\"mouseleave\", this.handleMouseLeave);\n                }}\n                onUnmount={el => {\n                    el.removeEventListener(\"mouseenter\", this.handleMouseEnter);\n                    el.removeEventListener(\"mouseleave\", this.handleMouseLeave);\n                }}\n            >\n                <Link to={url => url.getTx(this.props.tx.hash)}>\n                    <TxBubble size={this.props.bubbleSize} highlightThreshold={this.props.highlightThreshold} />\n                </Link>\n            </DomNodeProxy>\n        );\n    }\n\n    private handleMouseEnter = () => {\n        this.props.onMouseEnter(this.props.tx);\n    }\n\n    private handleMouseLeave = () => {\n        this.props.onMouseLeave(this.props.tx);\n    }\n}\n","import * as React from \"react\";\nimport { ITxLite } from \"app/data/tx/ITxLite\";\nimport { TxsHeatMapItem } from \"app/components/content/txHeatMap/TxsHeatMapItem\";\n\nexport interface ITxsHeatMapItemsProps {\n    transactions: ITxLite[];\n    bubbleSizes: number[];\n    highlightThreshold: number;\n    onTxMouseEnter(tx: ITxLite): void;\n    onTxMouseLeave(tx: ITxLite): void;\n}\n\nexport class TxsHeatMapItems extends React.PureComponent<ITxsHeatMapItemsProps> {\n    render() {\n        let { bubbleSizes, highlightThreshold } = this.props;\n\n        return <>\n            {this.props.transactions.map((tx, idx) => (\n                <TxsHeatMapItem\n                    key={idx}\n                    tx={tx}\n                    bubbleSize={bubbleSizes[idx]}\n                    highlightThreshold={highlightThreshold}\n                    onMouseEnter={this.props.onTxMouseEnter}\n                    onMouseLeave={this.props.onTxMouseLeave}\n                />\n            ))}\n        </>;\n    }\n}\n","import styled from \"app/styled-components\";\nimport * as React from \"react\";\nimport { ITxLite } from \"app/data/tx/ITxLite\";\nimport { TxTooltipContent } from \"./TxTooltipContent\";\nimport { Translation } from \"app/Translation\";\nimport { minMaxLogScale } from \"app/helpers/minMaxLogScale\";\nimport { Clipboard } from \"app/helpers/Clipboard\";\nimport { Popover } from \"ethstats-ui/lib/overlay/Popover\";\nimport { observable } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport { TxsHeatMapItems } from \"app/components/content/txHeatMap/TxsHeatMapItems\";\nimport { MultiHover } from \"ethstats-ui/lib/util/react/MultiHover\";\nimport { BigNumber } from \"app/util/BigNumber\";\n\nconst TxsHeatMapRoot = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    flex: 1 1 auto;\n    padding: 2px 0px;\n`;\n\nexport interface ITxsHeatMapProps {\n    /** Non-empty transactions array */\n    transactions: ITxLite[];\n    translation: Translation;\n    locale: string;\n    clipboard: Clipboard;\n    multiHover?: MultiHover<ITxLite>;\n    highlightThreshold: number;\n    highlightDataSelector(t: ITxLite): number | BigNumber;\n}\n\n@observer\nexport class TxsHeatMap extends React.Component<ITxsHeatMapProps> {\n    private rootEl: HTMLElement;\n    @observable.ref\n    private hoveredTx: ITxLite | undefined;\n    private multiHover: MultiHover<ITxLite>;\n\n    constructor(props: ITxsHeatMapProps) {\n        super(props);\n\n        this.setupMultiHover(this.props.multiHover);\n    }\n\n    private setupMultiHover(multiHover: MultiHover<ITxLite> | undefined) {\n        if (!multiHover) {\n            multiHover = new MultiHover({ enterDelay: 400, leaveDelay: 400 });\n        }\n        this.multiHover = multiHover;\n        this.multiHover.onActiveChange.subscribe(this.handleActiveChange);\n    }\n\n    private handleActiveChange = (tx: ITxLite | undefined) => this.hoveredTx = tx;\n\n    componentDidUpdate(prevProps: ITxsHeatMapProps) {\n        if (this.props.multiHover !== prevProps.multiHover) {\n            this.setupMultiHover(this.props.multiHover);\n        }\n    }\n\n    componentWillUnmount() {\n        this.multiHover.onActiveChange.unsubscribe(this.handleActiveChange);\n    }\n\n    render() {\n        let values = this.props.transactions.map(tx => this.props.highlightDataSelector(tx));\n        let bubbleSizes = minMaxLogScale(values);\n\n        return (\n            <TxsHeatMapRoot innerRef={ref => this.rootEl = ref}>\n                <TxsHeatMapItems\n                    transactions={this.props.transactions}\n                    bubbleSizes={bubbleSizes}\n                    highlightThreshold={this.props.highlightThreshold}\n                    onTxMouseEnter={this.handleTxEnter}\n                    onTxMouseLeave={this.handleTxLeave}\n                />\n                <Popover\n                    visible={this.hoveredTx !== void 0}\n                    placement=\"bottom-start\"\n                    offset={8}\n                    alignmentOffset={-8}\n                    noFlip\n                    noArrow\n                    referenceElement={() => this.rootEl}\n                    content={<div onMouseEnter={this.handleTooltipEnter} onMouseLeave={this.handleTooltipLeave}>\n                        <TxTooltipContent\n                            tx={this.hoveredTx!}\n                            clipboard={this.props.clipboard}\n                            translation={this.props.translation} locale={this.props.locale}\n                        />\n                    </div>}\n                >\n                    <div />\n                </Popover>\n            </TxsHeatMapRoot>\n        );\n    }\n\n    private handleTxEnter = (tx?: ITxLite) => {\n        this.multiHover.enter(tx);\n    }\n\n    private handleTxLeave = (tx?: ITxLite) => {\n        this.multiHover.leave();\n    }\n\n    private handleTooltipEnter = () => {\n        this.multiHover.enter(this.hoveredTx);\n    }\n\n    private handleTooltipLeave = () => {\n        this.multiHover.leave();\n    }\n}\n","import * as React from \"react\";\nimport { Translation } from \"app/Translation\";\nimport { Grid as GridBase, IGridProps as IGridBaseProps } from \"ethstats-ui/lib/control/grid/Grid\";\n\nexport interface IGridProps<TData> {\n    rows: IGridBaseProps<TData>[\"rows\"];\n    limitRows?: boolean;\n    maxVisibleRows?: number;\n    fields: IGridBaseProps<TData>[\"fields\"];\n    sortingOptions: IGridBaseProps<TData>[\"sortingOptions\"];\n    translation: Translation;\n}\n\nexport class Grid<TData> extends React.Component<IGridProps<TData>> {\n    render() {\n        let { translation: tr, ...props} = this.props;\n\n        return <GridBase<TData>\n            {...props}\n            noDataText={tr.get(\"general.grid.footer.norowsavailable.label\")}\n            loadMoreText={tr.get(\"general.grid.footer.loadMore.label\")}\n        />;\n    }\n}\n","import { Link } from \"app/components/Link\";\nimport styled from \"app/styled-components\";\n\nexport const GridLink = styled(Link)`\n    color: ${({theme}) => theme.colors.link};\n`;\n","import * as React from \"react\";\nimport { IGridFieldRenderer } from \"ethstats-ui/lib/control/grid/state/IGridFieldRenderer\";\nimport { Hash } from \"ethstats-ui/lib/data/Hash\";\nimport { GridLink } from \"app/components/content/grid/GridLink\";\n\nexport class TxLinkRenderer<T> implements IGridFieldRenderer<T> {\n    constructor(\n        private gridFieldDataGetter: (f: T) => string\n    ) {\n    }\n\n    render(f: T) {\n        let hash = this.gridFieldDataGetter(f);\n        return (\n            <GridLink to={url => url.getTx(hash)} >\n                <Hash>{ hash }</Hash>\n            </GridLink>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { IGridFieldRenderer } from \"ethstats-ui/lib/control/grid/state/IGridFieldRenderer\";\nimport { Hash } from \"ethstats-ui/lib/data/Hash\";\nimport { GridLink } from \"app/components/content/grid/GridLink\";\n\nexport class AccountLinkRenderer<T> implements IGridFieldRenderer<T> {\n    constructor(\n        private gridFieldDataGetter: (f: T) => string\n    ) {\n    }\n\n    render(f: T) {\n        let hash = this.gridFieldDataGetter(f);\n        return (\n            <GridLink to={url => url.getAccount(hash)} >\n                { hash && <Hash>{ hash }</Hash> }\n            </GridLink>\n        );\n    }\n}\n","import { Translation } from \"app/Translation\";\nimport { GridFields } from \"ethstats-ui/lib/control/grid/state/GridFields\";\nimport { ITxGridFieldKeys, IHighlightFn } from \"app/page/block/TxsGrid\";\nimport { EthRenderer } from \"ethstats-ui/lib/data/gridRenderer/EthRenderer\";\nimport { TxLinkRenderer } from \"app/components/content/grid/dataRenderer/tx/TxLinkRenderer\";\nimport { AccountLinkRenderer } from \"app/components/content/grid/dataRenderer/account/AccountLinkRenderer\";\nimport { ITxLite } from \"app/data/tx/ITxLite\";\n\nexport class TxGridFields extends GridFields<ITxLite> {\n    constructor(t: Translation, locale: string, highlightFn: IHighlightFn) {\n        super();\n        this.fields = [{\n            label: t.get(\"general.hash\"),\n            fieldKey: ITxGridFieldKeys.Hash,\n            type: \"string\",\n            isSortable: true,\n            selected: true,\n            alwaysVisible: true,\n            getFieldValue: f => f.hash,\n            renderer: new TxLinkRenderer(f => f.hash)\n        }, {\n            label: t.get(\"general.from\"),\n            fieldKey: ITxGridFieldKeys.From,\n            type: \"string\",\n            isSortable: true,\n            selected: true,\n            getFieldValue: f => f.from,\n            renderer: new AccountLinkRenderer(f => f.from)\n        }, {\n            label: t.get(\"general.to\"),\n            fieldKey: ITxGridFieldKeys.To,\n            type: \"string\",\n            isSortable: true,\n            selected: true,\n            getFieldValue: f => f.to,\n            renderer: new AccountLinkRenderer(f => f.to)\n        }, {\n            label: t.get(\"general.valueEth\"),\n            fieldKey: ITxGridFieldKeys.Value,\n            type: \"number\",\n            isSortable: true,\n            selected: true,\n            getFieldValue: f => f.value,\n            renderer: new EthRenderer(\n                locale,\n                f => f.value\n            )\n        }];\n    }\n}\n","import * as React from \"react\";\nimport { GridSortingOptions } from \"ethstats-ui/lib/control/grid/state/GridSortingOptions\";\nimport { Grid } from \"app/components/content/grid/Grid\";\nimport { GridFields, IGridField } from \"ethstats-ui/lib/control/grid/state/GridFields\";\nimport { Translation } from \"app/Translation\";\nimport { ITxLite } from \"app/data/tx/ITxLite\";\nimport { TxGridFields } from \"app/page/block/txsGrid/TxGridFields\";\nimport styled from \"app/styled-components\";\nimport { minMaxLogScale } from \"app/helpers/minMaxLogScale\";\nimport { BigNumber } from \"app/util/BigNumber\";\nimport { observable, action } from \"mobx\";\nimport { observer } from \"mobx-react\";\n\nconst TxsGridRoot = styled.div`\n    margin-top: 16px;\n`;\n\nexport enum ITxGridFieldKeys {\n    Type = \"type\",\n    Hash = \"hash\",\n    From = \"from\",\n    To = \"to\",\n    Value = \"value\",\n    Fee = \"fee\"\n}\n\nexport interface IHighlightFn {\n    (f: ITxLite): boolean;\n}\n\ninterface ITxGridProps {\n    transactions: ITxLite[];\n    locale: string;\n    translation: Translation;\n    gridSortingOptions: GridSortingOptions;\n    highlightThreshold: number;\n    highlightDataSelector(t: ITxLite): number | BigNumber;\n}\n\n@observer\nexport class TxsGrid extends React.Component<ITxGridProps> {\n    @observable.ref\n    private gridPartialFields: GridFields<ITxLite>;\n    private gridSortingOptions: GridSortingOptions;\n    private scaledHighlightValues: Map<ITxLite, number>;\n\n    constructor(props: ITxGridProps) {\n        super(props);\n        this.gridPartialFields = new TxGridFields(props.translation, props.locale, this.highlight);\n        this.gridSortingOptions = this.props.gridSortingOptions;\n        this.updateSortingField(props);\n    }\n\n    @action\n    componentDidUpdate(prevProps: ITxGridProps) {\n        if (this.props.translation !== prevProps.translation) {\n            this.gridPartialFields = new TxGridFields(this.props.translation, this.props.locale, this.highlight);\n        }\n    }\n\n    /**\n     * If switching between Full and partial tx lite objects, the old sorting field object may have changed\n     */\n    private updateSortingField(props: ITxGridProps) {\n        const oldSortField = this.gridSortingOptions.field;\n        if (!oldSortField) {\n            return;\n        }\n\n        let newField = (this.gridPartialFields.gridFields as IGridField<{}>[])\n            .find(f => f.fieldKey === oldSortField.fieldKey);\n\n        // Updates with new field object with the same key or unsets it if none matched\n        this.gridSortingOptions.field = newField;\n    }\n\n    render() {\n        let highlightValues = this.props.transactions.map(tx => this.props.highlightDataSelector(tx));\n        this.scaledHighlightValues = this.computeScaledHighlightValues(highlightValues);\n\n        const rows = this.props.transactions.map(tx => {\n            return {\n                key: tx.hash,\n                data: tx\n            };\n        });\n        return (\n            <TxsGridRoot>\n                <Grid<ITxLite>\n                    rows={rows}\n                    fields={this.gridPartialFields}\n                    sortingOptions={this.gridSortingOptions}\n                    translation={this.props.translation}\n                />\n            </TxsGridRoot>\n        );\n    }\n\n    private computeScaledHighlightValues(values: (number | BigNumber)[]) {\n        // Creates a map of tx data objects to scaled values. We do this because the link between the data item and\n        // original array index is lost in rendering\n        let scaledHighlightValues = new Map<ITxLite, number>();\n\n        minMaxLogScale(values).forEach((v, i) => {\n            scaledHighlightValues.set(this.props.transactions[i], v);\n        });\n\n        return scaledHighlightValues;\n    }\n\n    private highlight = (data: ITxLite) => {\n        let percentLog = this.scaledHighlightValues.get(data);\n        if (percentLog === void 0) {\n            throw new Error(`Missing scaledHighlightValues for txHash \"${data.hash}\"`);\n        }\n        return percentLog > this.props.highlightThreshold;\n    }\n}\n","import * as React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { TxsViewMode } from \"app/page/block/txsViews/TxsViewMode\";\nimport { TxsHeatMap } from \"app/components/content/txHeatMap/TxsHeatMap\";\nimport { ITxLite } from \"app/data/tx/ITxLite\";\nimport { LayoutRow } from \"ethstats-ui/lib/layout/content/LayoutRow\";\nimport { LayoutRowItem } from \"ethstats-ui/lib/layout/content/LayoutRowItem\";\nimport { TxsGrid } from \"./TxsGrid\";\nimport { Translation } from \"app/Translation\";\nimport { HighlightFields } from \"app/page/block/txHighlight/HighlightFields\";\nimport { Clipboard } from \"app/helpers/Clipboard\";\nimport { GridSortingOptions } from \"ethstats-ui/lib/control/grid/state/GridSortingOptions\";\nimport { ITxDetails } from \"app/data/tx/details/ITxDetails\";\n\nexport const HIGHLIGHT_THRESHOLD = 80;\n\ninterface ITxsViewsProps {\n    txsViewMode: TxsViewMode;\n    transactions: ITxDetails[];\n    highlightFields: HighlightFields<ITxLite>;\n    gridSortingOptions: GridSortingOptions;\n    translation: Translation;\n    clipboard: Clipboard;\n    locale: string;\n}\n\n@observer\nexport class TxsViews extends React.Component<ITxsViewsProps> {\n    constructor(props: ITxsViewsProps) {\n        super(props);\n        if (!props.transactions.length) {\n            throw new Error(`TxsViews should not render without txs`);\n        }\n    }\n    render() {\n        let highlightByField = this.props.highlightFields.getSelectedField();\n        if (this.props.txsViewMode.isHeatMapGrid) {\n            return (\n                <LayoutRow>\n                    <LayoutRowItem fullRow autoHeight>\n                        <div />\n                        <div style={{ maxWidth: 600 }}>\n                            <TxsHeatMap\n                                transactions={this.props.transactions}\n                                locale={this.props.locale}\n                                highlightThreshold={HIGHLIGHT_THRESHOLD}\n                                highlightDataSelector={highlightByField.getData}\n                                translation={this.props.translation}\n                                clipboard={this.props.clipboard}\n                            />\n                        </div>\n                    </LayoutRowItem>\n                </LayoutRow>\n            );\n        }\n        if (this.props.txsViewMode.isTableList) {\n            return (\n                <TxsGrid\n                    transactions={this.props.transactions}\n                    highlightThreshold={HIGHLIGHT_THRESHOLD}\n                    highlightDataSelector={highlightByField.getData}\n                    gridSortingOptions={this.props.gridSortingOptions}\n                    locale={this.props.locale}\n                    translation={this.props.translation}\n                />\n            );\n        }\n        return null;\n    }\n}\n","import * as React from \"react\";\nimport { LayoutRow } from \"ethstats-ui/lib/layout/content/LayoutRow\";\nimport { LayoutRowItem } from \"ethstats-ui/lib/layout/content/LayoutRowItem\";\nimport { Label } from \"ethstats-ui/lib/data/Label\";\nimport { BlockNumberBox } from \"app/components/content/box/block/BlockNumberBox\";\nimport { TimeElapsedBox } from \"app/components/content/box/TimeElapsedBox\";\nimport { ConfirmationsBox } from \"app/components/content/box/block/ConfirmationsBox\";\nimport { BlockHashBox } from \"app/components/content/box/block/BlockHashBox\";\nimport { ParentHashBox } from \"app/components/content/box/block/ParentHashBox\";\nimport { BlockNonceBox } from \"app/components/content/box/block/BlockNonceBox\";\nimport { BlockSizeBox } from \"app/components/content/box/block/BlockSizeBox\";\nimport { Spacer } from \"ethstats-ui/lib/layout/Spacer\";\nimport { TxCountBox } from \"app/components/content/box/block/TxCountBox\";\nimport { TxHighlightSelector } from \"app/page/block/txHighlight/TxHighlightSelector\";\nimport { ViewSelectorBox } from \"app/page/block/ViewSelectorBox\";\nimport { TxsViews } from \"app/page/block/TxsViews\";\nimport { AddressHashBox } from \"app/components/content/box/account/AddressHashBox\";\nimport { NumberBox } from \"ethstats-ui/lib/data/box/NumberBox\";\nimport { GasUsedValueBox } from \"ethstats-ui/lib/data/box/GasUsedValueBox\";\nimport { DifficultyBox } from \"ethstats-ui/lib/data/box/DifficultyBox\";\nimport { DecodedHexData } from \"ethstats-ui/lib/data/hex/DecodedHexData\";\nimport { HexData } from \"ethstats-ui/lib/data/hex/HexData\";\nimport { Translation } from \"app/Translation\";\nimport { IBlockDetails } from \"app/data/block/details/IBlockDetails\";\nimport { AppConfig } from \"app/AppConfig\";\nimport { HighlightFields } from \"app/page/block/txHighlight/HighlightFields\";\nimport { ITxLite } from \"app/data/tx/ITxLite\";\nimport { TxsViewMode } from \"app/page/block/txsViews/TxsViewMode\";\nimport { Clipboard } from \"app/helpers/Clipboard\";\nimport { GridSortingOptions } from \"ethstats-ui/lib/control/grid/state/GridSortingOptions\";\nimport { HashValueBox } from \"ethstats-ui/lib/data/box/HashValueBox\";\nimport { LayoutSection } from \"ethstats-ui/lib/layout/content/LayoutSection\";\nimport { UncleHashBox } from \"app/components/content/box/uncle/UncleHashBox\";\nimport { UnclesCountBox } from \"app/components/content/box/block/UnclesCountBox\";\nimport { AsyncData } from \"app/data/AsyncData\";\nimport { ITxDetails } from \"app/data/tx/details/ITxDetails\";\nimport { ValueBox } from \"ethstats-ui/lib/layout/content/box/ValueBox\";\n\nexport interface IBlockContentProps {\n    blockDetails: IBlockDetails;\n    blockTxs: AsyncData<ITxDetails[]>;\n    blockConfirmed: boolean;\n    blockConfirmations: number | undefined;\n    translation: Translation;\n    appConfig: AppConfig;\n    txsHighlightFields: HighlightFields<ITxLite>;\n    txsViewMode: TxsViewMode;\n    txsGridSortingOptions: GridSortingOptions;\n    clipboard: Clipboard;\n}\n\nexport class BlockContent extends React.PureComponent<IBlockContentProps> {\n    render() {\n        let { translation: tr, blockDetails: block, blockConfirmations, clipboard } = this.props;\n        let locale = this.props.appConfig.getLocale();\n\n        return <>\n            <LayoutSection useWrapper>\n                <LayoutRow minWidth={900}>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.blockNumber.label\")}</Label>\n                        <BlockNumberBox noLink>{block.id}</BlockNumberBox>\n                    </LayoutRowItem>\n                    <LayoutRowItem>\n                        {block.creationTime ?\n                        <>\n                        <Label>{tr.get(\"blockView.content.blockCreationTime.label\")}</Label>\n                        <TimeElapsedBox timestamp={block.creationTime}\n                            translation={tr}\n                            locale={locale}\n                            clipboard={clipboard} />\n                        </>\n                        : null }\n                        { blockConfirmations !== void 0 ?\n                        <ConfirmationsBox\n                            translation={tr}\n                            locale={locale}\n                            confirmations={blockConfirmations}\n                            isConfirmed={this.props.blockConfirmed}\n                        />\n                        : null }\n                    </LayoutRowItem>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.uncles.label\")}</Label>\n                        <UnclesCountBox locale={locale}>{block.uncles.length}</UnclesCountBox>\n                    </LayoutRowItem>\n                </LayoutRow>\n                <LayoutRow minWidth={760}>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"general.hash\")}</Label>\n                        <BlockHashBox clipboard={clipboard}>{block.hash}</BlockHashBox>\n                    </LayoutRowItem>\n                    {block.parentHash ?\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.parentHash.label\")}</Label>\n                        <ParentHashBox\n                            linkTo={block.parentId ? url => url.getBlock(block.parentId!) : void 0}\n                            clipboard={clipboard}\n                        >\n                            {block.parentHash}\n                        </ParentHashBox>\n                    </LayoutRowItem> : null }\n                </LayoutRow>\n                { block.uncles.length ?\n                <LayoutRow>\n                    <LayoutRowItem fullRow>\n                        <Label>{tr.get(\"blockView.content.uncles.label\")}</Label>\n                        {block.uncles.map( (uncleHash, index) => (\n                            <UncleHashBox key={uncleHash} clipboard={this.props.clipboard}\n                                blockNr={block.id} uncleIndex={index}>\n                                {uncleHash}\n                            </UncleHashBox>\n                        ))}\n                    </LayoutRowItem>\n                </LayoutRow>\n                : null }\n                <LayoutRow minWidth={710}>\n                { block.nonce ?\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"general.nonce\")}</Label>\n                        <BlockNonceBox>{block.nonce}</BlockNonceBox>\n                    </LayoutRowItem>\n                        : null }\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.blockSize.label\")}</Label>\n                        <BlockSizeBox bytes={block.byteSize} locale={locale} translations={{\n                            bytes: tr.get(\"general.bytes\")\n                        }} />\n                    </LayoutRowItem>\n                </LayoutRow>\n            </LayoutSection>\n            <LayoutRow minWidth={610}>\n                <LayoutRowItem>\n                    <Label>{tr.get(\"blockView.content.transactions.label\")}</Label>\n                    <TxCountBox>{block.transactions.length}</TxCountBox>\n                </LayoutRowItem>\n                { block.transactions.length ?\n                <LayoutRowItem>\n                    <Label>{tr.get(\"blockView.content.transactionsHighlight.label\")}</Label>\n                    <TxHighlightSelector fields={this.props.txsHighlightFields} translation={tr} />\n                    <ViewSelectorBox txsViewMode={this.props.txsViewMode} />\n                </LayoutRowItem>\n                : null }\n            </LayoutRow>\n            { block.transactions.length ?\n            <>\n                <TxsViews\n                    txsViewMode={this.props.txsViewMode}\n                    transactions={block.transactions}\n                    highlightFields={this.props.txsHighlightFields}\n                    gridSortingOptions={this.props.txsGridSortingOptions}\n                    clipboard={this.props.clipboard}\n                    translation={tr}\n                    locale={locale}\n                />\n                <Spacer height=\"64px\" />\n            </>\n            : null }\n            <LayoutSection useWrapper>\n                { block.sha3uncles ?\n                <LayoutRow minWidth={760}>\n                    { block.sha3uncles ?\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.sha3Uncles.label\")}</Label>\n                        <HashValueBox clipboard={clipboard}>{block.sha3uncles}</HashValueBox>\n                    </LayoutRowItem>\n                    : null }\n                </LayoutRow>\n                : null }\n                { block.beneficiaryAddress ?\n                <LayoutRow>\n                    <LayoutRowItem fullRow>\n                        <Label>{tr.get(\"blockView.content.beneficiary.label\")}</Label>\n                        <AddressHashBox clipboard={clipboard}>{block.beneficiaryAddress}</AddressHashBox>\n                    </LayoutRowItem>\n                </LayoutRow>\n                : null }\n                <LayoutRow minWidth={760}>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"general.gasLimit\")}</Label>\n                        <NumberBox value={block.gasLimit} locale={locale} />\n                    </LayoutRowItem>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"general.gasUsed\")}</Label>\n                        <GasUsedValueBox value={block.gasUsed} limit={block.gasLimit} locale={locale} />\n                    </LayoutRowItem>\n                </LayoutRow>\n                <LayoutRow>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.difficulty.label\")}</Label>\n                        <DifficultyBox value={block.difficulty} locale={locale} />\n                    </LayoutRowItem>\n                </LayoutRow>\n                { block.ibftExtraData ?\n                <>\n                    {block.ibftExtraData.extraData.replace(\"0\", \"\") === \"x\" ?\n                    <LayoutRow>\n                        <LayoutRowItem autoHeight>\n                            <Label>{tr.get(\"blockView.content.extraData.label\")}</Label>\n                            <DecodedHexData data={block.ibftExtraData.extraData} clipboard={clipboard} />\n                        </LayoutRowItem>\n                    </LayoutRow> : null}\n                    <LayoutRow>\n                        <LayoutRowItem fullRow>\n                            <Label>{tr.get(\"blockView.content.ibft2.validators\")}</Label>\n                            {block.ibftExtraData.validators.map((item) =>\n                                <AddressHashBox key={item} clipboard={clipboard}>{item}</AddressHashBox>\n                            )}\n                        </LayoutRowItem>\n                    </LayoutRow>\n                    {block.ibftExtraData.votes.length !== 0 &&\n                        <LayoutRow>\n                            <LayoutRowItem fullRow>\n                                <Label>{tr.get(\"blockView.content.ibft2.voting\")}</Label>\n                                {block.ibftExtraData.votes.map((item) =>\n                                    <React.Fragment key={item.address}>\n                                        <AddressHashBox clipboard={clipboard}>{item.address}</AddressHashBox>\n                                        <ValueBox>{item.vote ?\n                                            tr.get(\"blockView.content.ibft2.added\") :\n                                            tr.get(\"blockView.content.ibft2.removed\")}</ValueBox>\n                                    </React.Fragment>\n                                )}\n                            </LayoutRowItem>\n                        </LayoutRow>\n                    }\n                    <LayoutRow>\n                        <LayoutRowItem>\n                            <Label>{tr.get(\"blockView.content.ibft2.round\")}</Label>\n                            <NumberBox value={block.ibftExtraData.blockTries} locale={locale}></NumberBox>\n                        </LayoutRowItem>\n                    </LayoutRow>\n                    {block.ibftExtraData.commitSeals.length !== 0 &&\n                        <LayoutRow>\n                            <LayoutRowItem fullRow>\n                                <Label>{tr.get(\"blockView.content.ibft2.commitSeals\")}</Label>\n                                {block.ibftExtraData.commitSeals.map((item) =>\n                                    <React.Fragment key={item}>\n                                        <HashValueBox clipboard={clipboard}>{item}</HashValueBox>\n                                    </React.Fragment>\n                                )}\n                            </LayoutRowItem>\n                        </LayoutRow>\n                    }\n                </> :\n                <LayoutRow>\n                    <LayoutRowItem autoHeight>\n                        <Label>{tr.get(\"blockView.content.extraData.label\")}</Label>\n                        <DecodedHexData data={block.extraData} clipboard={clipboard} />\n                    </LayoutRowItem>\n                </LayoutRow> }\n                { block.mixHash ?\n                <LayoutRow minWidth={760}>\n                    { block.mixHash ?\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.mixHash.label\")}</Label>\n                        <HashValueBox clipboard={clipboard}>{block.mixHash}</HashValueBox>\n                    </LayoutRowItem>\n                    : [] }\n                </LayoutRow>\n                : null }\n            </LayoutSection>\n            <LayoutSection useWrapper>\n                <LayoutRow>\n                    <LayoutRowItem fullRow autoHeight>\n                        <Label>{tr.get(\"blockView.content.logsBloom.label\")}</Label>\n                        <HexData data={block.logsBloom} clipboard={clipboard} />\n                    </LayoutRowItem>\n                </LayoutRow>\n            </LayoutSection>\n        </>;\n    }\n}\n","import * as React from \"react\";\nimport { ValueBox, IValueBoxProps } from \"ethstats-ui/lib/layout/content/box/ValueBox\";\nimport { Number } from \"ethstats-ui/lib/data/Number\";\nimport { ITheme } from \"app/theme\";\n\nexport interface IUnclesCountBoxProps {\n    children: number;\n    locale: string;\n    variant?: IValueBoxProps[\"variant\"];\n}\n\nexport class UnclesCountBox extends React.Component<IUnclesCountBoxProps> {\n    render() {\n        return (\n            <ValueBox\n                colors={(theme: ITheme) => ({\n                    background: theme.colors.unclesBoxBg,\n                    text: theme.colors.unclesBoxText,\n                    border: theme.colors.unclesBoxBorder\n                })}\n                variant={this.props.variant}\n            >\n                <Number locale={this.props.locale} value={this.props.children} />\n            </ValueBox>\n        );\n    }\n}\n","import { Translation } from \"app/Translation\";\n\nexport function getRelativeTimeTranslations(translation: Translation) {\n    return {\n        future: translation.get(\"general.relativeTime.future\"),\n        past: translation.get(\"general.relativeTime.past\"),\n        s: translation.get(\"general.relativeTime.s\"),\n        ss: translation.get(\"general.relativeTime.ss\"),\n        m: translation.get(\"general.relativeTime.m\"),\n        mm: translation.get(\"general.relativeTime.mm\"),\n        h: translation.get(\"general.relativeTime.h\"),\n        hh: translation.get(\"general.relativeTime.hh\"),\n        d: translation.get(\"general.relativeTime.d\"),\n        dd: translation.get(\"general.relativeTime.dd\"),\n        M: translation.get(\"general.relativeTime.M\"),\n        MM: translation.get(\"general.relativeTime.MM\"),\n        y: translation.get(\"general.relativeTime.y\"),\n        yy: translation.get(\"general.relativeTime.yy\")\n    };\n}\n","import {\n    TimeElapsedBox as TimeElapsedBoxBase,\n    ITimeElapsedBoxProps as ITimeElapsedBoxPropsBase } from \"ethstats-ui/lib/data/box/TimeElapsedBox\";\nimport { Translation } from \"app/Translation\";\nimport React from \"react\";\nimport { getRelativeTimeTranslations } from \"app/helpers/getRelativeTimeTranslations\";\n\nexport interface ITimeElapsedBoxProps\n    extends Pick<ITimeElapsedBoxPropsBase, Exclude<keyof ITimeElapsedBoxPropsBase, \"translations\">> {\n    translation: Translation;\n}\n\nexport class TimeElapsedBox extends React.Component<ITimeElapsedBoxProps> {\n    render() {\n        return <TimeElapsedBoxBase {...this.props}\n            translations={getRelativeTimeTranslations(this.props.translation)} />;\n    }\n}\n","import * as React from \"react\";\nimport { IValueBoxProps } from \"ethstats-ui/lib/layout/content/box/ValueBox\";\nimport { HashLinkValueBox } from \"app/components/content/box/HashLinkValueBox\";\nimport { observer } from \"mobx-react\";\nimport { Clipboard } from \"app/helpers/Clipboard\";\nimport { ITheme } from \"app/theme\";\n\nexport interface IUncleHashBoxProps {\n    blockNr: number;\n    uncleIndex: number;\n    children: string;\n    variant?: IValueBoxProps[\"variant\"];\n    noLink?: boolean;\n    clipboard: Clipboard;\n}\n\n@observer\nexport class UncleHashBox extends React.Component<IUncleHashBoxProps> {\n\n    render() {\n        let { noLink } = this.props;\n\n        return (\n            <HashLinkValueBox\n                colors={(theme: ITheme) => ({\n                    background: theme.colors.unclesBoxBg,\n                    text: theme.colors.unclesBoxText\n                })}\n                variant={this.props.variant}\n                linkTo={!noLink ? url => url.getUncle(this.props.blockNr, this.props.uncleIndex) : void 0}\n                clipboard={this.props.clipboard}\n            >{this.props.children}</HashLinkValueBox>\n        );\n    }\n\n}\n","import * as React from \"react\";\nimport { HashLinkValueBox } from \"app/components/content/box/HashLinkValueBox\";\nimport { IValueBoxProps } from \"ethstats-ui/lib/layout/content/box/ValueBox\";\nimport { Clipboard } from \"app/helpers/Clipboard\";\nimport { ITheme } from \"app/theme\";\n\ninterface IAddressHashBoxProps {\n    variant?: IValueBoxProps[\"variant\"];\n    children: string;\n    Icon?: IValueBoxProps[\"Icon\"];\n    noLink?: boolean;\n    clipboard: Clipboard;\n}\n\nexport const AddressHashBox: React.StatelessComponent<IAddressHashBoxProps> = ({\n    children, variant, Icon, noLink, clipboard\n}) => (\n    <HashLinkValueBox\n        colors={(theme: ITheme) => ({\n            background: theme.colors.addressHashBoxBg,\n            text: theme.colors.valueBox.primary.text\n        })}\n        variant={variant}\n        Icon={Icon}\n        linkTo={!noLink ? url => url.getAccount(children) : void 0}\n        clipboard={clipboard}\n    >\n        { children }\n    </HashLinkValueBox>\n);\n","import styled from \"app/styled-components\";\n\ninterface IHighlightSelectBoxProps {\n    disabled?: boolean;\n}\n\nexport const HighlightSelectBox = styled<IHighlightSelectBoxProps, \"div\">(\"div\")`\n    font-size: 12px;\n    height: 28px;\n    text-transform: uppercase;\n    font-weight: bold;\n    padding: 0px 32px 0px 24px;\n    box-sizing: border-box;\n    border: 1px solid ${props => props.theme.colors.selectBoxBorder};\n    border-radius: 4px;\n    background-color: ${props => props.theme.colors.selectBoxBg};\n    vertical-align: middle;\n    line-height: 24px;\n    color: ${props => !props.disabled ? props.theme.colors.selectBoxText : props.theme.colors.selectBoxTextDisabled};\n    cursor: ${props => props.disabled ? \"default\" : \"pointer\"};\n\n    position: relative;\n    &:before {\n        content: \"\";\n        position: absolute;\n\n        border-radius: 50%;\n        background-color: ${props => !props.disabled ?\n            props.theme.colors.selectBoxBubble :\n            props.theme.colors.selectBoxTextDisabled};\n        width: 8px;\n        height: 8px;\n        top: 9px;\n        left: 8px;\n    }\n    &:after {\n        content: \"\";\n        position: absolute;\n\n        top: 10px;\n        right: 11px;\n        border-top: 5px solid ${props => props.theme.colors.selectBoxArrow};\n        border-left: 5px solid transparent;\n        border-right: 5px solid transparent;\n    }\n`;\n","import * as React from \"react\";\nimport { ValueBox } from \"ethstats-ui/lib/layout/content/box/ValueBox\";\nimport { Hash } from \"ethstats-ui/lib/data/Hash\";\n\nexport interface IBlockNonceBoxProps {\n    children: string;\n}\n\nexport const BlockNonceBox: React.StatelessComponent<IBlockNonceBoxProps> = ({ children }) => (\n    <ValueBox><Hash>{ children }</Hash></ValueBox>\n);\n"],"sourceRoot":""}