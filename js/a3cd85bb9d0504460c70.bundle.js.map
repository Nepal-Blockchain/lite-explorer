{"version":3,"sources":["webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/data/Label.tsx","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/layout/content/internal/LayoutRowWrapper.tsx","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/layout/content/LayoutRow.tsx","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/data/Number.tsx","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/util/internal/locale/NumberFormatter.ts","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/util/time/RelativeTimeFormatter.ts","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/util/react/ClickThreshold.tsx","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/data/box/TimeElapsedBox.tsx","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/datetime-difference/index.js","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/util/internal/locale/numberFormat.ts","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/util/internal/locale/BigNumberFormatter.ts","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/util/internal/locale/DifficultyFormatter.ts","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/data/box/DifficultyBox.tsx","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/data/box/NumberBox.tsx","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/util/internal/hex.ts","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/data/StringData.tsx","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/data/hex/DecodedHexData.tsx","webpack:///./helpers/getRelativeTimeTranslations.ts","webpack:///./components/content/box/TimeElapsedBox.tsx","webpack:///./components/content/box/uncle/UncleHashBox.tsx","webpack:///./components/content/box/account/AddressHashBox.tsx","webpack:///./components/content/box/block/BlockNonceBox.tsx","webpack:///./components/content/box/uncle/UncleNumberBox.tsx","webpack:///./page/uncle/UncleContent.tsx","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/layout/content/LayoutBoxItem.tsx","webpack:////home/cnmun/ETH/ethereum-lite-explorer/node_modules/ethstats-ui/src/layout/content/LayoutRowItem.tsx"],"names":["__webpack_require__","d","__webpack_exports__","Label","_styled_components__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_1___default","n","$Label","children","className","Object","props","arrow","disabled","theme","colors","arrowLabelBgDisabled","arrowLabelBg","arrowLabel","label","LayoutRowWrapper_$LayoutRowWrapper","react","[object Object]","this","divWidth","onResize","handleResize","divElement","clientWidth","ref","r","window","addEventListener","removeEventListener","LayoutRowWrapper","styled_components","smallScreen","centerContent","LayoutRow_LayoutRow","LayoutRow","isFirstLabelIgnored","width","minWidth","responsive","ignoreFirstLabel","c","childIsLayoutRowItem","childType","type","_brand","e","i","map","isLayoutRowItemInstance","isBeginningOfRow","fullRow","tslib_es6","mobx_module","index_module","Number","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","_util_internal_locale_NumberFormatter__WEBPACK_IMPORTED_MODULE_1__","_util_internal_locale_BigNumberFormatter__WEBPACK_IMPORTED_MODULE_2__","value","locale","format","NumberFormatter","toLocaleString","defaultTranslations","future","past","s","ss","m","mm","h","hh","dd","M","MM","y","yy","unitCodes","years","months","days","hours","minutes","seconds","RelativeTimeFormatter_RelativeTimeFormatter","translations","d1","d2","formatted","formatRelativeTime","intv","present","Date","getTime","before","diff","datetime_difference","units","firstSignificantIdx","findIndex","unit","humanizeDiffUnit","firstUnit","length","secondUnit","unitCode","replace","DEFAULT_THRESHOLD","ClickThreshold_ClickThreshold","onMouseDown","mouseDownCoords","x","clientX","clientY","onMouseUp","Math","abs","threshold","onClick","defaultProps","TimeElapsedContentRoot","div","CopyValueButtonWrapper","DisplayMode","TimeElapsedBox_TimeElapsedBox","TimeElapsedBox","displayMode","RelativeTime","cycleDisplayMode","AbsoluteTime","Error","updateCurrentTime","currentTime","floor","now","timeoutId","setTimeout","computeRefreshInterval","prevProps","timestamp","clearTimeout","formatDiff","toLocaleDateString","timeZone","timeZoneName","year","month","day","hour","minute","second","box","ValueBox","variant","TooltipRegular","content","style","display","alignItems","CopyValueButton","clipboard","nonclickable","module","exports","datetimeDiff","from","to","min","Infinity","max","temp","start","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","end","dec","UTC","milliseconds","getNumberSeparator","separatorType","numberFormat","Intl","NumberFormat","formatToParts","find","part","BigNumberFormatter_BigNumberFormatter","fmt","formats","get","decimalSeparator","groupSeparator","groupSize","set","num","options","getBnFormat","decimalPlaces","maximumFractionDigits","minimumFractionDigits","fractionDigits","toFormat","Map","DifficultyFormatter","bigNumberFormatter","shiftedVal","shiftedBy","isGreaterThanOrEqualTo","DifficultyBox_DifficultyBox","difficultyFormatter","BigNumberFormatter","NumberBox","_layout_content_box_ValueBox__WEBPACK_IMPORTED_MODULE_1__","_Number__WEBPACK_IMPORTED_MODULE_2__","hexToString","hex","str","String","fromCharCode","parseInt","substr","StringDataRoot","StringDataLine","rawDataBackground","rawDataText","StringData_StringData","split","line","idx","key","DecodedHexData_DecodedHexData","CopyButtonWrapper","copyExtraData","copy","data","IconButton","Icon","CopyIcon","color","copyIcon","getRelativeTimeTranslations","translation","react_default","a","Component","createElement","box_TimeElapsedBox","assign","UncleHashBox","noLink","app_components_content_box_HashLinkValueBox__WEBPACK_IMPORTED_MODULE_2__","background","unclesBoxBg","text","unclesBoxText","linkTo","url","getUncle","blockNr","uncleIndex","tslib__WEBPACK_IMPORTED_MODULE_0__","mobx_react__WEBPACK_IMPORTED_MODULE_3__","AddressHashBox","app_components_content_box_HashLinkValueBox__WEBPACK_IMPORTED_MODULE_1__","addressHashBoxBg","valueBox","primary","getAccount","BlockNonceBox","ethstats_ui_lib_layout_content_box_ValueBox__WEBPACK_IMPORTED_MODULE_1__","ethstats_ui_lib_data_Hash__WEBPACK_IMPORTED_MODULE_2__","UncleNumberBox_UncleNumberBox","border","unclesBoxBorder","UncleContent_UncleContent","tr","uncleDetails","uncle","LayoutRowItem","id","creationTime","position","parentId","hash","BlockNumberBox","nonce","sha3uncles","HashValueBox","beneficiaryAddress","gasLimit","DifficultyBox","difficulty","extraData","DecodedHexData","mixHash","$LayoutBoxItem","LayoutBoxItem","autoHeight","baseHeight","autoWidth","justifyContent","mediaQueries","breakPoints","smallerThanFullView","lessThan620px","LayoutRowItem_LayoutRowItem","$LayoutRowItemWrapper","LayoutRowItemWrapper","$LayoutInfoBoxItem","LayoutInfoBoxItem","childrenArray","toArray","reduce","outArr","child","react_is","push","console","error","labelElement","shift","childrenArrayRender"],"mappings":"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","file":"js/a3cd85bb9d0504460c70.bundle.js","sourcesContent":["import styled, { css } from \"../styled-components\";\nimport * as React from \"react\";\n\nexport interface ILabelProps {\n    arrow?: boolean;\n    disabled?: boolean;\n    className?: string;\n}\n\nconst $Label: React.StatelessComponent<ILabelProps> = ({ children, className }) => (\n    <div className={className}>{children}</div>\n);\n\nexport const Label = styled($Label)`\n    font-size: 12px;\n    line-height: 12px;\n    height: 12px;\n    text-transform: uppercase;\n    background-color: ${props => (\n        props.arrow ?\n        (\n            props.disabled ?\n            props.theme.colors.arrowLabelBgDisabled :\n            props.theme.colors.arrowLabelBg\n        ) :\n        \"transparent\"\n    )};\n    font-weight: 600;\n    letter-spacing: .5px;\n    padding: 4px 8px;\n    margin-right: ${props => props.arrow ? \"10px\" : \"0\"};\n    color: ${props => (\n        props.arrow ?\n        props.theme.colors.arrowLabel :\n        props.theme.colors.label\n    )};\n\n    /**\n     * When is the first label in a row the width of the container (LayoutRowItemWrapper) is 200px + 2*8px padding,\n     * and the display: flex along with justify-content: flex-end ensures that the label is right aligned.\n     * However, if the label is long enough (bigger than 200px) to wrap, the Label div will occupy all the container\n     * width, and the text will be aligned to right thanks to the rule below.\n     */\n    text-align: right;\n\n    ${props => props.arrow ? css`\n    position: relative;\n    &::before {\n        content: \"\";\n        position: absolute;\n        top: 0;\n        right: -10px;\n        border-top: 10px solid transparent;\n        border-bottom: 10px solid transparent;\n        border-left: 10px solid ${props.disabled ?\n            props.theme.colors.arrowLabelBgDisabled :\n            props.theme.colors.arrowLabelBg\n        };\n        transform: scaleX(.8);\n        transform-origin: center left;\n    }\n    ` : \"\"}\n`;\n","import styled, { css } from \"../../../styled-components\";\nimport * as React from \"react\";\n\ninterface ILayoutRowWrapperProps {\n    className?: string;\n    smallScreen?: boolean;\n    centerContent?: boolean;\n    onResize?(width: number): void;\n}\n\nclass $LayoutRowWrapper extends React.Component<ILayoutRowWrapperProps> {\n    private divElement: HTMLDivElement | null;\n    private divWidth = 0;\n    render() {\n        return (\n            <div className={this.props.className} ref={r => { this.divElement = r; }}>\n                {this.props.children}\n            </div>\n        );\n    }\n    onResize = () => {\n        if (this.props.onResize) {\n            this.props.onResize(this.divWidth);\n        }\n    }\n    componentDidMount() {\n        window.addEventListener(\"resize\", this.handleResize);\n        this.handleResize();\n    }\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.handleResize);\n    }\n    handleResize = () => {\n        if (this.divElement) {\n            this.divWidth = this.divElement.clientWidth;\n            this.onResize();\n        }\n    }\n}\n\n/** @internal */\nexport const LayoutRowWrapper = styled($LayoutRowWrapper)`\n    display: ${({ smallScreen }) => smallScreen ? \"block\" : \"flex\"};\n    ${({ centerContent }) => centerContent ? css`\n        justify-content: center;\n    ` : \"\"};\n`;\n","import * as React from \"react\";\nimport { ILayoutRowItemProps, LayoutRowItem } from \"./LayoutRowItem\";\nimport { LayoutRowWrapper } from \"./internal/LayoutRowWrapper\";\nimport { observable } from \"mobx\";\nimport { observer } from \"mobx-react\";\n\n/**\n * This class is responsible with the layout of the content page\n * Each row of data contains one or more items of information\n * Each box contains a Label and one or more boxes\n */\ninterface ILayoutResponsiveOptions {\n    ignoreFirstLabel?: \"forMobile\" | \"forLowRes\";\n}\n\ninterface ILayoutRowProps {\n    /**\n     * The minimum required width for that row to safely render all items on a single row\n     * TODO: Move minWidth to ILayoutResponsiveOptions\n     */\n    minWidth?: number;\n    responsive?: ILayoutResponsiveOptions;\n}\n\n@observer\nexport class LayoutRow extends React.Component<ILayoutRowProps> {\n    @observable\n    private smallScreen = false;\n\n    @observable\n    private isFirstLabelIgnored = false;\n\n    // validate that c is an instance of LayoutRowItem\n    private isLayoutRowItemInstance(c: React.ReactChild) {\n        let childIsLayoutRowItem = false;\n        try {\n            const childType = (c as React.ReactElement<any>).type;\n            childIsLayoutRowItem = (childType as typeof LayoutRowItem)._brand === \"layoutRowItem\";\n        } catch (e) {\n            // silent fail, assume that c is not a LayoutRowItem instance\n        }\n        return childIsLayoutRowItem;\n    }\n\n    render() {\n        /**\n         * We need to filter out the empty children, but we can't use React.Children.toArray, because it\n         * breaks the keys. We keep a separate index counter and skip through the nulls\n         */\n        let i = 0;\n\n        /**\n         * If it's a small screen render each RowItem as an independent Row\n         */\n        if (this.smallScreen) {\n            return React.Children.map(this.props.children, c => {\n                if (c === null || c === void 0) {\n                    // Just return and don't increment counter\n                    return c;\n                }\n\n                const childIsLayoutRowItem = this.isLayoutRowItemInstance(c);\n                return (\n                    <LayoutRowWrapper\n                        smallScreen={this.smallScreen} onResize={this.onResize} centerContent={this.isFirstLabelIgnored}\n                    >\n                        { childIsLayoutRowItem ? React.cloneElement(\n                            c as React.ReactElement<ILayoutRowItemProps>,\n                            {isBeginningOfRow: true, fullRow: true, ignoreFirstLabel: this.isFirstLabelIgnored}\n                        ) : c }\n                    </LayoutRowWrapper>\n                );\n            });\n        } else {\n            /**\n             * ... otherwise render as normal, one row\n             */\n            return (\n                <LayoutRowWrapper\n                    smallScreen={this.smallScreen} onResize={this.onResize} centerContent={this.isFirstLabelIgnored}\n                >\n                    { React.Children.map(this.props.children, c => {\n                        if (c === null || c === void 0) {\n                            // Just return and don't increment counter\n                            return c;\n                        }\n\n                        const childIsLayoutRowItem = this.isLayoutRowItemInstance(c);\n                        return childIsLayoutRowItem ? React.cloneElement(\n                            c as React.ReactElement<ILayoutRowItemProps>,\n                            {isBeginningOfRow: !i++ || this.smallScreen, ignoreFirstLabel: this.isFirstLabelIgnored}\n                        ) : c;\n                    }) }\n                </LayoutRowWrapper>\n            );\n        }\n    }\n\n    private onResize = (width: number) => {\n        this.smallScreen = this.props.minWidth ?\n            width <= this.props.minWidth :\n            false;\n\n        if (!this.props.responsive || !this.props.responsive.ignoreFirstLabel) {\n            return;\n        }\n        this.isFirstLabelIgnored = (this.props.responsive.ignoreFirstLabel === \"forLowRes\" && width < 540)\n            || (this.props.responsive.ignoreFirstLabel === \"forMobile\" && width < 460);\n    }\n}\n","import * as React from \"react\";\nimport { NumberFormatter } from \"../util/internal/locale/NumberFormatter\";\nimport { BigNumber } from \"../util/BigNumber\";\nimport { BigNumberFormatter } from \"../util/internal/locale/BigNumberFormatter\";\n\nexport interface INumberProps {\n    value: number | BigNumber;\n    locale: string;\n}\n\nexport class Number extends React.Component<INumberProps> {\n    render() {\n        let { value, locale } = this.props;\n        return typeof value !== \"number\" ?\n            new BigNumberFormatter().format(value, locale) :\n            new NumberFormatter().format(value, locale);\n    }\n}\n","/** @internal */\nexport class NumberFormatter {\n    format(value: number, locale: string) {\n        return value.toLocaleString(locale);\n    }\n}\n","import * as datetimeDifference from \"datetime-difference\";\n\ntype TimeUnit = \"years\" | \"months\" | \"days\" | \"hours\" | \"minutes\" | \"seconds\";\ntype RelativeTimeKey = \"s\" | \"ss\" | \"m\" | \"mm\" | \"h\" | \"hh\" | \"d\" | \"dd\" | \"M\" | \"MM\" | \"y\" | \"yy\";\n\nexport type IRelativeTimeTranslations = Record<RelativeTimeKey | \"future\" | \"past\", string>;\n\nconst defaultTranslations: IRelativeTimeTranslations = {\n    future: \"in %s\",\n    past: \"%s ago\",\n    s: \"1 second\",\n    ss: \"%d seconds\",\n    m: \"1 minute\",\n    mm: \"%d minutes\",\n    h: \"1 hour\",\n    hh: \"%d hours\",\n    d: \"1 day\",\n    dd: \"%d days\",\n    M: \"1 month\",\n    MM: \"%d months\",\n    y: \"1 year\",\n    yy: \"%d years\"\n};\n\n/** Maps time units used by datetime-difference to time unit codes for relative time localized strings  */\nlet unitCodes: Record<TimeUnit, RelativeTimeKey> = {\n    years: \"y\",\n    months: \"M\",\n    days: \"d\",\n    hours: \"h\",\n    minutes: \"m\",\n    seconds: \"s\"\n};\n\nexport class RelativeTimeFormatter {\n    constructor(private translations: IRelativeTimeTranslations = defaultTranslations) {\n    }\n\n    /**\n     * Computes the date/time difference d1 - d2 and returns a formatted localized string\n     * e.g. \"5 days 6 hours ago\", if d1 > d2\n     *  or \"in 5 days 6 hours\", if d2 > d1\n     *\n     * @param d1 unix timestamp (millis)\n     * @param d2 unix timestamp (millis)\n     */\n    formatDiff(d1: number, d2: number) {\n        let formatted = this.format(d1, d2);\n        return this.formatRelativeTime(formatted, d1 < d2);\n    }\n\n    /**\n     * Formats an interval given in miliseconds to a human readable localized string\n     * Computes the date/time difference d1 - d2 and returns a formatted localized string\n     * e.g. \"5 days 6 hours\"\n     *\n     * @param intv number (millis)\n     */\n    formatInterval(intv: number) {\n        let present = new Date().getTime();\n        let before = present - intv;\n\n        return this.format(present, before);\n    }\n\n    private format(d1: number, d2: number) {\n        let diff = datetimeDifference(new Date(d1), new Date(d2));\n        let units: TimeUnit[] = [\"years\", \"months\", \"days\", \"hours\", \"minutes\", \"seconds\"];\n        let firstSignificantIdx = units.findIndex(unit => diff[unit] !== 0);\n        if (firstSignificantIdx === -1) {\n            // Time difference is 0\n            return this.humanizeDiffUnit(0, \"seconds\");\n        } else {\n            let formatted = \"\";\n            let firstUnit = units[firstSignificantIdx];\n            formatted += this.humanizeDiffUnit(diff[firstUnit], firstUnit);\n\n            // We don't show the 2nd time unit if 1st time unit is minutes or seconds\n            if (firstSignificantIdx + 2 < units.length) {\n                let secondUnit = units[firstSignificantIdx + 1];\n                if (diff[secondUnit] !== 0) {\n                    formatted += \" \" + this.humanizeDiffUnit(diff[secondUnit], secondUnit);\n                }\n            }\n\n            return formatted;\n        }\n    }\n\n    /**\n     * Outputs a human readable text for a given time value + unit, with proper pluralization\n     *\n     * @param value uint\n     * @param unit\n     */\n    private humanizeDiffUnit(value: number, unit: TimeUnit) {\n        let unitCode = value === 1 ?\n            unitCodes[unit] :\n            unitCodes[unit] + unitCodes[unit] as RelativeTimeKey;\n\n        return this.translations[unitCode].replace(/%d/i, \"\" + value);\n    }\n\n    /**\n     * Format a human-readable time duration (e.g. \"2 minutes\") as past or future time\n     * (e.g. \"2 minutes ago\" or \"in 2 minutes\")\n     */\n    private formatRelativeTime(value: string, future: boolean) {\n        return this.translations[future ? \"future\" : \"past\"].replace(/%s/i, value);\n    }\n}\n","import * as React from \"react\";\n\nconst DEFAULT_THRESHOLD = 5;\n\nexport interface IClickThresholdProps {\n    threshold?: number;\n    onClick(): void;\n}\n\n/**\n * Component that allows clicks within a given threshold.\n *\n * React click events trigger even if the mouse was moved significantly between mouse down and mouse up events\n * (e.g. dragging or text selection)\n */\nexport class ClickThreshold extends React.Component<IClickThresholdProps> {\n    static defaultProps: Partial<IClickThresholdProps> = {\n        threshold: DEFAULT_THRESHOLD\n    };\n\n    private mouseDownCoords: {x: number; y: number};\n\n    private get threshold() {\n        return this.props.threshold!;\n    }\n\n    render() {\n        return (\n            <div onMouseDown={this.onMouseDown} onMouseUp={this.onMouseUp}>\n                {this.props.children}\n            </div>\n        );\n    }\n\n    private onMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {\n        this.mouseDownCoords = {\n            x: e.clientX,\n            y: e.clientY\n        };\n    }\n\n    private onMouseUp = (e: React.MouseEvent<HTMLDivElement>) => {\n        if (Math.abs(e.clientX - this.mouseDownCoords.x) <= this.threshold &&\n            Math.abs(e.clientY - this.mouseDownCoords.y) <= this.threshold\n        ) {\n            this.props.onClick();\n        }\n    }\n}\n","import * as React from \"react\";\nimport { observable } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport { ValueBox, IValueBoxProps } from \"../../layout/content/box/ValueBox\";\nimport { RelativeTimeFormatter, IRelativeTimeTranslations } from \"../../util/time/RelativeTimeFormatter\";\nimport { TooltipRegular } from \"../../overlay/tooltip/TooltipRegular\";\nimport { ClickThreshold } from \"../../util/react/ClickThreshold\";\nimport styled from \"../../styled-components\";\nimport { CopyValueButton } from \"../../control/button/CopyValueButton\";\nimport { IClipboard } from \"../IClipboard\";\n\nconst TimeElapsedContentRoot = styled.div`\n    user-select: none;\n    cursor: pointer;\n`;\n\nconst CopyValueButtonWrapper = styled.div`\n    margin: 0 0 0 16px;\n`;\n\nenum DisplayMode {\n    AbsoluteTime,\n    RelativeTime\n}\n\nexport { IRelativeTimeTranslations } from \"../../util/time/RelativeTimeFormatter\";\n\nexport interface ITimeElapsedBoxProps {\n    /** Unix timestamp of event for which the elapsed time is calculated */\n    timestamp: number;\n    nonclickable?: boolean;\n    locale: string | undefined;\n    /**\n     * Translations: 'future' and 'past' use %s, all others use %d for replacements.\n     * If undefined, uses default English translations\n     *\n     * Example: { future: \"in %s\", past: \"%s ago\", s: \"1 second\", ss: \"%d seconds\", ... }\n     */\n    translations: IRelativeTimeTranslations | undefined;\n    clipboard: IClipboard;\n    variant?: IValueBoxProps[\"variant\"];\n}\n\n@observer\nexport class TimeElapsedBox extends React.Component<ITimeElapsedBoxProps> {\n    @observable\n    private currentTime: number;\n    @observable\n    private displayMode = DisplayMode.RelativeTime;\n    private timeoutId: number;\n\n    componentDidMount() {\n        this.updateCurrentTime();\n    }\n\n    componentDidUpdate(prevProps: ITimeElapsedBoxProps) {\n        if (this.props.timestamp !== prevProps.timestamp) {\n            if (this.timeoutId) {\n                clearTimeout(this.timeoutId);\n            }\n            this.updateCurrentTime();\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.timeoutId) {\n            clearTimeout(this.timeoutId);\n        }\n    }\n\n    render() {\n        let value: string;\n        if (this.displayMode === DisplayMode.RelativeTime) {\n            value = new RelativeTimeFormatter(this.props.translations).formatDiff(\n                this.currentTime * 1000, this.props.timestamp * 1000\n            );\n        } else if (this.displayMode === DisplayMode.AbsoluteTime) {\n            value = new Date(this.props.timestamp * 1000).toLocaleDateString(this.props.locale, {\n                timeZone: \"UTC\",\n                timeZoneName: \"short\",\n                year: \"numeric\", month: \"long\", day: \"numeric\", hour: \"numeric\", minute: \"numeric\", second: \"numeric\"\n            });\n        } else {\n            throw new Error(`Unsupported display mode \"${DisplayMode[this.displayMode]}\"`);\n        }\n        let box = (\n            <ValueBox variant={this.props.variant}>\n                <TimeElapsedContentRoot>\n                    {value}\n                </TimeElapsedContentRoot>\n            </ValueBox>\n        );\n        return (\n            <TooltipRegular content={\n                <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                    <div>{this.props.timestamp}</div>\n                    <CopyValueButtonWrapper>\n                        <CopyValueButton value={\"\" + this.props.timestamp} clipboard={this.props.clipboard}/>\n                    </CopyValueButtonWrapper>\n                </div>\n            }>\n                { this.props.nonclickable ? box :\n                <ClickThreshold onClick={this.cycleDisplayMode}>\n                    { box }\n                </ClickThreshold>\n                }\n            </TooltipRegular>\n        );\n    }\n\n    private cycleDisplayMode = () => {\n        if (this.displayMode === DisplayMode.RelativeTime) {\n            this.displayMode = DisplayMode.AbsoluteTime;\n        } else if (this.displayMode === DisplayMode.AbsoluteTime) {\n            this.displayMode = DisplayMode.RelativeTime;\n        } else {\n            throw new Error(`Unknown display mode \"${this.displayMode}`);\n        }\n    }\n\n    private updateCurrentTime = () => {\n        this.currentTime = Math.floor(Date.now() / 1000);\n        this.timeoutId = setTimeout(this.updateCurrentTime, this.computeRefreshInterval());\n    }\n\n    private computeRefreshInterval() {\n        // Refresh every second if interval is under a minute, or every minute otherwise\n        return this.currentTime - this.props.timestamp > 60 ? 60000 : 1000;\n    }\n}\n","\"use strict\";\n\nmodule.exports = function datetimeDiff (from, to) {\n\n    const min = [-Infinity, 1, 1, 0, 0, 0, 0];\n    const max = [Infinity, 12, null, 24, 60, 60, 1000];\n\n    if (to < from) {\n        const temp = to;\n        to = from;\n        from = temp;\n    }\n\n    let start = [from.getUTCFullYear(), from.getUTCMonth() + 1, from.getUTCDate(), from.getUTCHours(),\n            from.getUTCMinutes(), from.getUTCSeconds(), from.getUTCMilliseconds()],\n        end = [to.getUTCFullYear(), to.getUTCMonth() + 1, to.getUTCDate(), to.getUTCHours(), to.getUTCMinutes(),\n            to.getUTCSeconds(), to.getUTCMilliseconds()],\n        i = 7;\n\n    const dec = (i) => {\n        --end[i];\n        while (end[i] < min[i]) {\n            const r = dec(i - 1);\n            end[i] += max[i] === null\n                ? r\n                : max[i];\n        }\n        return i === 1 ? new Date(Date.UTC(end[0], end[1], 0)).getUTCDate() : max[i + 1];\n    };\n\n    while (i > 0) {\n        --i;\n        let diff = end[i] - start[i];\n        while (diff < 0) {\n            end[i] += dec(i - 1);\n            diff = end[i] - start[i];\n        }\n        end[i] = diff;\n    }\n\n    return {\n        years: end[0],\n        months: end[1],\n        days: end[2],\n        hours: end[3],\n        minutes: end[4],\n        seconds: end[5],\n        milliseconds: end[6]\n    };\n\n};\n","/**\n * Returns the thousands (group) or decimal number separators for the given locale\n *\n * NB: Relies on Intl.NumberFormat and fallsback to simple detection with Number.prototype.toLocaleString()\n *\n * @internal\n */\nexport function getNumberSeparator(locale: string, separatorType: \"decimal\" | \"group\") {\n    let numberFormat: any = Intl.NumberFormat(locale);\n\n    if (numberFormat.formatToParts) {\n        return numberFormat\n            .formatToParts(1000.1)\n            .find((part: any) => part.type === separatorType)\n            .value as string;\n    }\n\n    if (separatorType === \"group\") {\n        return (1000).toLocaleString().replace(/[0-9]/g, \"\");\n    } else {\n        return 1.1.toLocaleString().replace(/[0-9]/g, \"\");\n    }\n}\n","import { BigNumber, Format } from \"../../BigNumber\";\nimport { getNumberSeparator } from \"./numberFormat\";\n\ninterface IFormatterOptions {\n    minimumFractionDigits?: number;\n    maximumFractionDigits?: number;\n}\n\n/**\n * Outputs a formatted, localized string representation of a BigNumber,\n * in the same fashion as Number.prototype.toLocaleString\n *\n * @internal\n */\nexport class BigNumberFormatter {\n    // HACK: We keep a static property of BigNumber Format objects and do lazy locale detection\n    // to avoid having to pass this class with DI through the entire app.\n    private static formats = new Map<string, Format>();\n\n    private static getBnFormat(locale: string) {\n        let fmt = this.formats.get(locale);\n        if (!fmt) {\n            fmt = {\n                decimalSeparator: getNumberSeparator(locale, \"decimal\"),\n                groupSeparator: getNumberSeparator(locale, \"group\"),\n                groupSize: 3\n            };\n            this.formats.set(locale, fmt);\n        }\n        return fmt;\n    }\n\n    format(num: BigNumber, locale: string, options: IFormatterOptions = {}) {\n        let fmt = BigNumberFormatter.getBnFormat(locale);\n        num = num.decimalPlaces(options.maximumFractionDigits !== void 0 ? options.maximumFractionDigits : 3);\n\n        if (options.minimumFractionDigits !== void 0) {\n            let fractionDigits = num.decimalPlaces();\n            if (fractionDigits < options.minimumFractionDigits) {\n                return num.toFormat(options.minimumFractionDigits, fmt);\n            }\n        }\n        return num.toFormat(fmt);\n    }\n}\n","import { BigNumber } from \"../../BigNumber\";\nimport { BigNumberFormatter } from \"./BigNumberFormatter\";\n\n/** @internal */\nexport class DifficultyFormatter {\n    constructor(private bigNumberFormatter: BigNumberFormatter) {\n\n    }\n\n    format(value: BigNumber, locale: string) {\n        let units = [\"H\", \"KH\", \"MH\", \"GH\", \"TH\", \"PH\"];\n\n        for (let i = units.length - 1; i >= 0; --i) {\n            let shiftedVal = value.shiftedBy(-3 * i);\n            if (!i || shiftedVal.isGreaterThanOrEqualTo(1)) {\n                return this.bigNumberFormatter.format(shiftedVal, locale) + \" \" + units[i];\n            }\n        }\n        throw new Error(`Should be unreachable`);\n    }\n}\n","import * as React from \"react\";\nimport { ValueBox } from \"../../layout/content/box/ValueBox\";\nimport { DifficultyFormatter } from \"../../util/internal/locale/DifficultyFormatter\";\nimport { BigNumber } from \"../../util/BigNumber\";\nimport { BigNumberFormatter } from \"../../util/internal/locale/BigNumberFormatter\";\n\nexport interface IDifficultyBoxProps {\n    value: BigNumber;\n    locale: string;\n}\n\nexport class DifficultyBox extends React.Component<IDifficultyBoxProps> {\n    render() {\n        let difficultyFormatter = new DifficultyFormatter(new BigNumberFormatter());\n\n        return (\n            <ValueBox>{ difficultyFormatter.format(this.props.value, this.props.locale) }</ValueBox>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { ValueBox } from \"../../layout/content/box/ValueBox\";\nimport { Number } from \"../Number\";\nimport { BigNumber } from \"../../util/BigNumber\";\n\nexport interface INumberBoxProps {\n    value: number | BigNumber;\n    locale: string;\n}\n\nexport class NumberBox extends React.Component<INumberBoxProps> {\n    render() {\n        let { value, locale } = this.props;\n        return (\n            <ValueBox><Number value={value} locale={locale} /></ValueBox>\n        );\n    }\n}\n","/** @internal */\nexport function hexToString(hex: string) {\n    let str = \"\";\n    for (let i = 0; i < hex.length; i += 2) {\n        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n    }\n    return str;\n}\n","import * as React from \"react\";\nimport styled from \"../styled-components\";\n\nconst StringDataRoot = styled.div`\n    padding: 14px 0;\n    white-space: pre;\n`;\n\nconst StringDataLine = styled.div`\n    padding: 2px 8px;\n    margin: 8px 0;\n    background: ${props => props.theme.colors.rawDataBackground};\n    color: ${props => props.theme.colors.rawDataText};\n    width: fit-content;\n    font-family: \"Roboto Mono\", monospace;\n    font-size: 14px;\n    line-height: 16px;\n\n    &:first-child {\n        margin-top: 0;\n    }\n\n    &:last-child {\n        margin-bottom: 0;\n    }\n\n    &:empty {\n        display: none;\n    }\n`;\n\nexport interface IStringDataProps {\n    children: string;\n}\n\nexport class StringData extends React.Component<IStringDataProps> {\n    render() {\n        return (\n            <StringDataRoot>{ this.props.children.split(/\\r?\\n/).map((line, idx) => (\n                <StringDataLine key={idx}>{ line }</StringDataLine>\n            )) }</StringDataRoot>\n        );\n    }\n}\n","import * as React from \"react\";\nimport styled from \"../../styled-components\";\nimport { TooltipRegular } from \"../../overlay/tooltip/TooltipRegular\";\nimport { IconButton } from \"../../control/IconButton\";\nimport { IClipboard } from \"../IClipboard\";\nimport { hexToString } from \"../../util/internal/hex\";\nimport { StringData } from \"../StringData\";\nimport { CopyIcon } from \"../../icon/CopyIcon\";\n\nconst CopyButtonWrapper = styled.div`\n    margin: 0 8px 0 16px;\n`;\n\ninterface IDecodedHexDataProps {\n    data: string;\n    clipboard: IClipboard;\n}\nexport class DecodedHexData extends React.PureComponent<IDecodedHexDataProps> {\n    render() {\n        let { data } = this.props;\n        return (\n            <TooltipRegular content={\n                <div style={{display: \"flex\", alignItems: \"center\"}}>\n                    <div>{\"0x\" + data.replace(/^0x/, \"\")}</div>\n                    <CopyButtonWrapper>\n                        <IconButton\n                            Icon={CopyIcon}\n                            color={theme => theme.colors.copyIcon}\n                            onClick={this.copyExtraData}\n                        />\n                    </CopyButtonWrapper>\n                </div>\n            }>\n                <StringData>\n                    { hexToString(data) }\n                </StringData>\n            </TooltipRegular>\n        );\n    }\n    private copyExtraData = () => {\n        this.props.clipboard.copy(\"0x\" + this.props.data.replace(/^0x/, \"\"));\n    }\n}\n","import { Translation } from \"app/Translation\";\n\nexport function getRelativeTimeTranslations(translation: Translation) {\n    return {\n        future: translation.get(\"general.relativeTime.future\"),\n        past: translation.get(\"general.relativeTime.past\"),\n        s: translation.get(\"general.relativeTime.s\"),\n        ss: translation.get(\"general.relativeTime.ss\"),\n        m: translation.get(\"general.relativeTime.m\"),\n        mm: translation.get(\"general.relativeTime.mm\"),\n        h: translation.get(\"general.relativeTime.h\"),\n        hh: translation.get(\"general.relativeTime.hh\"),\n        d: translation.get(\"general.relativeTime.d\"),\n        dd: translation.get(\"general.relativeTime.dd\"),\n        M: translation.get(\"general.relativeTime.M\"),\n        MM: translation.get(\"general.relativeTime.MM\"),\n        y: translation.get(\"general.relativeTime.y\"),\n        yy: translation.get(\"general.relativeTime.yy\")\n    };\n}\n","import {\n    TimeElapsedBox as TimeElapsedBoxBase,\n    ITimeElapsedBoxProps as ITimeElapsedBoxPropsBase } from \"ethstats-ui/lib/data/box/TimeElapsedBox\";\nimport { Translation } from \"app/Translation\";\nimport React from \"react\";\nimport { getRelativeTimeTranslations } from \"app/helpers/getRelativeTimeTranslations\";\n\nexport interface ITimeElapsedBoxProps\n    extends Pick<ITimeElapsedBoxPropsBase, Exclude<keyof ITimeElapsedBoxPropsBase, \"translations\">> {\n    translation: Translation;\n}\n\nexport class TimeElapsedBox extends React.Component<ITimeElapsedBoxProps> {\n    render() {\n        return <TimeElapsedBoxBase {...this.props}\n            translations={getRelativeTimeTranslations(this.props.translation)} />;\n    }\n}\n","import * as React from \"react\";\nimport { IValueBoxProps } from \"ethstats-ui/lib/layout/content/box/ValueBox\";\nimport { HashLinkValueBox } from \"app/components/content/box/HashLinkValueBox\";\nimport { observer } from \"mobx-react\";\nimport { Clipboard } from \"app/helpers/Clipboard\";\nimport { ITheme } from \"app/theme\";\n\nexport interface IUncleHashBoxProps {\n    blockNr: number;\n    uncleIndex: number;\n    children: string;\n    variant?: IValueBoxProps[\"variant\"];\n    noLink?: boolean;\n    clipboard: Clipboard;\n}\n\n@observer\nexport class UncleHashBox extends React.Component<IUncleHashBoxProps> {\n\n    render() {\n        let { noLink } = this.props;\n\n        return (\n            <HashLinkValueBox\n                colors={(theme: ITheme) => ({\n                    background: theme.colors.unclesBoxBg,\n                    text: theme.colors.unclesBoxText\n                })}\n                variant={this.props.variant}\n                linkTo={!noLink ? url => url.getUncle(this.props.blockNr, this.props.uncleIndex) : void 0}\n                clipboard={this.props.clipboard}\n            >{this.props.children}</HashLinkValueBox>\n        );\n    }\n\n}\n","import * as React from \"react\";\nimport { HashLinkValueBox } from \"app/components/content/box/HashLinkValueBox\";\nimport { IValueBoxProps } from \"ethstats-ui/lib/layout/content/box/ValueBox\";\nimport { Clipboard } from \"app/helpers/Clipboard\";\nimport { ITheme } from \"app/theme\";\n\ninterface IAddressHashBoxProps {\n    variant?: IValueBoxProps[\"variant\"];\n    children: string;\n    Icon?: IValueBoxProps[\"Icon\"];\n    noLink?: boolean;\n    clipboard: Clipboard;\n}\n\nexport const AddressHashBox: React.StatelessComponent<IAddressHashBoxProps> = ({\n    children, variant, Icon, noLink, clipboard\n}) => (\n    <HashLinkValueBox\n        colors={(theme: ITheme) => ({\n            background: theme.colors.addressHashBoxBg,\n            text: theme.colors.valueBox.primary.text\n        })}\n        variant={variant}\n        Icon={Icon}\n        linkTo={!noLink ? url => url.getAccount(children) : void 0}\n        clipboard={clipboard}\n    >\n        { children }\n    </HashLinkValueBox>\n);\n","import * as React from \"react\";\nimport { ValueBox } from \"ethstats-ui/lib/layout/content/box/ValueBox\";\nimport { Hash } from \"ethstats-ui/lib/data/Hash\";\n\nexport interface IBlockNonceBoxProps {\n    children: string;\n}\n\nexport const BlockNonceBox: React.StatelessComponent<IBlockNonceBoxProps> = ({ children }) => (\n    <ValueBox><Hash>{ children }</Hash></ValueBox>\n);\n","import * as React from \"react\";\nimport { ValueBox, IValueBoxProps } from \"ethstats-ui/lib/layout/content/box/ValueBox\";\nimport { ITheme } from \"app/theme\";\n\ninterface IUncleNumberBoxProps {\n    variant?: IValueBoxProps[\"variant\"];\n    children: number;\n}\n\nexport class UncleNumberBox extends React.Component<IUncleNumberBoxProps> {\n    render() {\n        let { children, variant } = this.props;\n\n        return <ValueBox\n            colors={(theme: ITheme) => ({\n                background: theme.colors.unclesBoxBg,\n                text: theme.colors.unclesBoxText,\n                border: theme.colors.unclesBoxBorder\n            })}\n            variant={variant}\n        >\n            #{ children }\n        </ValueBox>;\n    }\n}\n","import * as React from \"react\";\nimport { LayoutRow } from \"ethstats-ui/lib/layout/content/LayoutRow\";\nimport { LayoutRowItem } from \"ethstats-ui/lib/layout/content/LayoutRowItem\";\nimport { Label } from \"ethstats-ui/lib/data/Label\";\nimport { UncleNumberBox } from \"app/components/content/box/uncle/UncleNumberBox\";\nimport { TimeElapsedBox } from \"app/components/content/box/TimeElapsedBox\";\nimport { ValueBox } from \"ethstats-ui/lib/layout/content/box/ValueBox\";\nimport { UncleHashBox } from \"app/components/content/box/uncle/UncleHashBox\";\nimport { BlockNumberBox } from \"app/components/content/box/block/BlockNumberBox\";\nimport { BlockNonceBox } from \"app/components/content/box/block/BlockNonceBox\";\nimport { AddressHashBox } from \"app/components/content/box/account/AddressHashBox\";\nimport { NumberBox } from \"ethstats-ui/lib/data/box/NumberBox\";\nimport { DifficultyBox } from \"ethstats-ui/lib/data/box/DifficultyBox\";\nimport { DecodedHexData } from \"ethstats-ui/lib/data/hex/DecodedHexData\";\nimport { Translation } from \"app/Translation\";\nimport { IUncleDetails } from \"app/data/uncle/details/IUncleDetails\";\nimport { Clipboard } from \"app/helpers/Clipboard\";\nimport { HashValueBox } from \"ethstats-ui/lib/data/box/HashValueBox\";\n\nexport interface IUncleContentProps {\n    uncleDetails: IUncleDetails;\n    translation: Translation;\n    locale: string;\n    clipboard: Clipboard;\n}\n\nexport class UncleContent extends React.PureComponent<IUncleContentProps> {\n    render() {\n        let { translation: tr, uncleDetails: uncle, clipboard, locale} = this.props;\n\n        return <>\n            <LayoutRow minWidth={900}>\n                <LayoutRowItem>\n                    <Label>{tr.get(\"uncleView.content.uncleNumber.label\")}</Label>\n                    <UncleNumberBox>{uncle.id}</UncleNumberBox>\n                </LayoutRowItem>\n                <LayoutRowItem>\n                    {uncle.creationTime ?\n                    <>\n                    <Label>{tr.get(\"blockView.content.blockCreationTime.label\")}</Label>\n                    <TimeElapsedBox timestamp={uncle.creationTime}\n                        translation={tr}\n                        locale={locale}\n                        clipboard={clipboard} />\n                    </>\n                    : null }\n                </LayoutRowItem>\n                { uncle.position !== void 0 ?\n                <LayoutRowItem>\n                    <Label>{tr.get(\"uncleView.content.position.label\")}</Label>\n                    <ValueBox>{uncle.position}</ValueBox>\n                </LayoutRowItem>\n                : null }\n            </LayoutRow>\n            <LayoutRow minWidth={760}>\n                <LayoutRowItem>\n                    <Label>{tr.get(\"general.hash\")}</Label>\n                    <UncleHashBox clipboard={clipboard} noLink\n                         blockNr={uncle.parentId} uncleIndex={0}>{uncle.hash}</UncleHashBox>\n                </LayoutRowItem>\n                {uncle.parentId ?\n                <LayoutRowItem>\n                    <Label>{tr.get(\"uncleView.content.includedBy.label\")}</Label>\n                    <BlockNumberBox>{uncle.parentId}</BlockNumberBox>\n                </LayoutRowItem> : null }\n            </LayoutRow>\n            <LayoutRow>\n                <LayoutRowItem>\n                    <Label>{tr.get(\"general.nonce\")}</Label>\n                    <BlockNonceBox>{uncle.nonce}</BlockNonceBox>\n                </LayoutRowItem>\n            </LayoutRow>\n            { uncle.sha3uncles ?\n            <LayoutRow>\n                <LayoutRowItem>\n                    <Label>{tr.get(\"blockView.content.sha3Uncles.label\")}</Label>\n                    <HashValueBox clipboard={clipboard}>{uncle.sha3uncles}</HashValueBox>\n                </LayoutRowItem>\n            </LayoutRow>\n            : null }\n            { uncle.beneficiaryAddress ?\n            <LayoutRow>\n                <LayoutRowItem fullRow>\n                    <Label>{tr.get(\"blockView.content.beneficiary.label\")}</Label>\n                    <AddressHashBox clipboard={clipboard}>{uncle.beneficiaryAddress}</AddressHashBox>\n                </LayoutRowItem>\n            </LayoutRow>\n            : null }\n            <LayoutRow>\n                <LayoutRowItem>\n                    <Label>{tr.get(\"general.gasLimit\")}</Label>\n                    <NumberBox value={uncle.gasLimit} locale={locale} />\n                </LayoutRowItem>\n            </LayoutRow>\n            <LayoutRow>\n                <LayoutRowItem>\n                    <Label>{tr.get(\"blockView.content.difficulty.label\")}</Label>\n                    <DifficultyBox\n                        value={uncle.difficulty} locale={locale} />\n                </LayoutRowItem>\n            </LayoutRow>\n            { uncle.extraData ?\n            <LayoutRow>\n                <LayoutRowItem>\n                    <Label>{tr.get(\"blockView.content.extraData.label\")}</Label>\n                    <DecodedHexData data={uncle.extraData} clipboard={clipboard} />\n                </LayoutRowItem>\n            </LayoutRow>\n            : null }\n            { uncle.mixHash ?\n            <LayoutRow>\n                { uncle.mixHash ?\n                <LayoutRowItem>\n                    <Label>{tr.get(\"blockView.content.mixHash.label\")}</Label>\n                    <HashValueBox clipboard={clipboard}>{uncle.mixHash}</HashValueBox>\n                </LayoutRowItem>\n                : [] }\n            </LayoutRow>\n            : null }\n        </>;\n    }\n}\n","import * as React from \"react\";\nimport styled from \"../../styled-components\";\nimport { ILayoutRowItemProps } from \"./LayoutRowItem\";\n\ninterface ILayoutBoxItemProps extends ILayoutRowItemProps {\n    className?: string;\n}\n\nconst $LayoutBoxItem: React.StatelessComponent<ILayoutBoxItemProps> = ({ children, className }) => (\n    <div className={className}>{children}</div>\n);\nexport const LayoutBoxItem = styled($LayoutBoxItem)`\n    display: flex;\n    align-items: center;\n    /* put this to auto for tx alignment */\n    height: ${({autoHeight, baseHeight}) => autoHeight ? \"auto\" : (baseHeight ? baseHeight + \"px\" : \"48px\")};\n    padding: 0 8px;\n    /* flex: 0 0 auto; put this to 1 1 for tx wrapping */\n    flex: ${({autoHeight}) => autoHeight ? \"1 1\" : \"0 0\"} auto;\n    width: ${props => (props.isBeginningOfRow && !props.autoWidth ? \"200px\" : \"auto\")};\n    justify-content: ${props => (\n        props.justifyContent ? props.justifyContent : (props.isBeginningOfRow ? \"flex-end\" : \"inherit\")\n    )};\n\n    @media ${props => props.theme.mediaQueries.breakPoints.smallerThanFullView} {\n        width: auto;\n        min-width: ${props => (props.isBeginningOfRow && !props.autoWidth ? \"125px\" : \"auto\")};\n    }\n\n    @media ${props => props.theme.mediaQueries.breakPoints.lessThan620px} {\n        width: auto;\n        min-width: ${props => (props.isBeginningOfRow && !props.autoWidth ? \"95px\" : \"auto\")};\n    }\n`;\n","import * as React from \"react\";\nimport styled from \"../../styled-components\";\nimport { LayoutBoxItem } from \"./LayoutBoxItem\";\nimport * as ReactIs from \"react-is\";\n\ninterface ILayoutRowItemWrapperProps {\n    fullRow?: boolean;\n    className?: string;\n}\n\nconst $LayoutRowItemWrapper: React.StatelessComponent<ILayoutRowItemWrapperProps> = ({\n    children,\n    className\n}) => (\n    <div className={className}>{children}</div>\n);\n\nconst LayoutRowItemWrapper = styled($LayoutRowItemWrapper)`\n    display: flex;\n    flex: ${props => props.fullRow ? \"1 1\" : \"0 0\"} auto;\n`;\n\ninterface ILayoutInfoBoxItemProps {\n    fullRow?: boolean;\n    className?: string;\n}\nconst $LayoutInfoBoxItem: React.StatelessComponent<ILayoutInfoBoxItemProps> = ({\n    children,\n    className\n}) => (\n    <div className={className}>{children}</div>\n);\nconst LayoutInfoBoxItem = styled($LayoutInfoBoxItem)`\n    display: flex;\n    flex: ${({fullRow}) => fullRow ? \"1 1\" : \"0 1\"} auto;\n    flex-wrap: wrap;\n`;\n\nexport interface ILayoutRowItemProps {\n    isBeginningOfRow?: boolean;\n    ignoreFirstLabel?: boolean;\n    fullRow?: boolean;\n    baseHeight?: number;\n    autoHeight?: boolean;\n    autoWidth?: boolean;\n    justifyContent?: string;\n}\n\nexport class LayoutRowItem extends React.PureComponent<ILayoutRowItemProps> {\n    static _brand = \"layoutRowItem\";\n    render() {\n        const childrenArray = React.Children.toArray(this.props.children)\n            .reduce((outArr, child) => {\n                if (ReactIs.isFragment(child)) {\n                    outArr.push(...React.Children.map((child.props as React.Props<{}>).children, c => {\n                        if (!ReactIs.isElement(c)) {\n                            // tslint:disable-next-line:no-console\n                            console.error(\n                                `Fragment passed to LayoutRowItem contains a child that is not a React.Element.`, c);\n                            return c;\n                        }\n                        return React.cloneElement(c, {});\n                    }));\n                } else {\n                    outArr.push(child);\n                }\n                return outArr;\n            }, [] as React.ReactChild[]);\n\n        const labelElement = childrenArray.shift();\n        return (\n            <LayoutRowItemWrapper fullRow={this.props.fullRow}>\n                { this.props.ignoreFirstLabel ? null :\n                    <LayoutBoxItem isBeginningOfRow={this.props.isBeginningOfRow} baseHeight={this.props.baseHeight}\n                        autoWidth={this.props.autoWidth}>\n                        { labelElement }\n                    </LayoutBoxItem>\n                }\n                { childrenArray.length === 1 ?\n                    this.childrenArrayRender(childrenArray) :\n                    <LayoutInfoBoxItem fullRow={this.props.fullRow}>\n                        { this.childrenArrayRender(childrenArray) }\n                    </LayoutInfoBoxItem>\n                }\n            </LayoutRowItemWrapper>\n        );\n    }\n\n    private childrenArrayRender(children: React.ReactChild[]) {\n        return children.map((c, idx) => {\n            return (\n                <LayoutBoxItem baseHeight={this.props.baseHeight} autoHeight={this.props.autoHeight}\n                    autoWidth={this.props.autoWidth} key={idx}\n                >\n                    { c }\n                </LayoutBoxItem>\n            );\n        });\n    }\n}\n"],"sourceRoot":""}